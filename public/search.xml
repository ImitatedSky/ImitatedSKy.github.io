<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Leetcode#100. Same Tree</title>
    <url>/posts/leetcode/Leetcode-100-Same-Tree/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Given the roots of two binary trees <code>p</code> and <code>q</code>, write a function to check if they are the same or not.</p>
<p>Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/12/20/ex1.jpg"></p>
<p>!<a href="https://assets.leetcode.com/uploads/2020/12/20/ex1.jpg">https://assets.leetcode.com/uploads/2020/12/20/ex1.jpg</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: p = [1,2,3], q = [1,2,3]</span><br><span class="line">Output: true</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/12/20/ex2.jpg"></p>
<p>!<a href="https://assets.leetcode.com/uploads/2020/12/20/ex2.jpg">https://assets.leetcode.com/uploads/2020/12/20/ex2.jpg</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: p = [1,2], q = [1,null,2]</span><br><span class="line">Output: false</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/12/20/ex3.jpg"></p>
<p>!<a href="https://assets.leetcode.com/uploads/2020/12/20/ex3.jpg">https://assets.leetcode.com/uploads/2020/12/20/ex3.jpg</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: p = [1,2,1], q = [1,1,2]</span><br><span class="line">Output: false</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in both trees is in the range <code>[0, 100]</code>.</li>
<li><code>10^4 &lt;= Node.val &lt;= 10^4</code></li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isSameTree</span>(<span class="params">self, p: <span class="type">Optional</span>[TreeNode], q: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> p <span class="keyword">and</span> <span class="keyword">not</span> q:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> p <span class="keyword">or</span> <span class="keyword">not</span> q <span class="keyword">or</span> p.val != q.val:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> (self.isSameTree(p.left,q.left) <span class="keyword">and</span> self.isSameTree(p.right,q.right))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>medium</tag>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#120. Triangle</title>
    <url>/posts/leetcode/Leetcode-120-Triangle/</url>
    <content><![CDATA[<p><a href="..%5CLeetcode-62-Unique-Paths.md">leetcode62</a></p>
<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Given a <code>triangle</code> array, return <em>the minimum path sum from top to bottom</em>.</p>
<p>For each step, you may move to an adjacent number of the row below. More formally, if you are on index <code>i</code> on the current row, you may move to either index <code>i</code> or index <code>i + 1</code> on the next row.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]</span><br><span class="line">Output: 11</span><br><span class="line">Explanation: The triangle looks like:</span><br><span class="line">   2</span><br><span class="line">  3 4</span><br><span class="line"> 6 5 7</span><br><span class="line">4 1 8 3</span><br><span class="line">The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: triangle = [[-10]]</span><br><span class="line">Output: -10</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= triangle.length &lt;= 200</code></li>
<li><code>triangle[0].length == 1</code></li>
<li><code>triangle[i].length == triangle[i - 1].length + 1</code></li>
<li><code>-10^4 &lt;= triangle[i][j] &lt;= 10^4</code></li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><h2 id="use-recursion"><a href="#use-recursion" class="headerlink" title="use recursion"></a><code>use recursion</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Time Limit Exceeded</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minimumTotal</span>(<span class="params">self, triangle: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dp</span>(<span class="params">i,j</span>):</span><br><span class="line">            <span class="keyword">if</span> i == <span class="built_in">len</span>(triangle)-<span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> triangle[i][j]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> triangle[i][j] + <span class="built_in">min</span>(dp(i+<span class="number">1</span>,j),dp(i+<span class="number">1</span>,j+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># dp(0,0) return triangle[0][0] + min(dp(1,0),dp(1,1))</span></span><br><span class="line"><span class="comment"># dp(1,0) return triangle[1][0]</span></span><br><span class="line"><span class="comment"># dp(1,1) return triangle[1][1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dp(i,j) return triangle[i][j] + min(dp(i+1,j),dp(i+1,j+1))</span></span><br><span class="line"><span class="comment"># dp(i+1,j) return triangle[i+1][j]</span></span><br><span class="line"><span class="comment"># dp(i+1,j+1) return triangle[i+1][j+1]</span></span><br></pre></td></tr></table></figure>

<p>O(2^n) time, O(n) space</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># add meno</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minimumTotal</span>(<span class="params">self, triangle: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        memo = &#123;&#125;</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dp</span>(<span class="params">i, j</span>):</span><br><span class="line">            <span class="keyword">if</span> i == <span class="built_in">len</span>(triangle) - <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> triangle[i][j]</span><br><span class="line">            <span class="keyword">if</span> (i, j) <span class="keyword">in</span> memo:</span><br><span class="line">                <span class="keyword">return</span> memo[(i, j)]</span><br><span class="line">            memo[(i, j)] = triangle[i][j] + <span class="built_in">min</span>(dp(i+<span class="number">1</span>, j), dp(i+<span class="number">1</span>, j+<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">return</span> memo[(i, j)]</span><br><span class="line">        <span class="keyword">return</span> dp(<span class="number">0</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>O(n^2) time, O(n^2) space</p>
<h2 id="use-dp-與-recursion-不同-，recursion-是從上往下推，dp-是從下往上推"><a href="#use-dp-與-recursion-不同-，recursion-是從上往下推，dp-是從下往上推" class="headerlink" title="use dp(# 與 recursion 不同 ，recursion 是從上往下推，dp 是從下往上推)"></a><code>use dp</code>(# 與 recursion 不同 ，recursion 是從上往下推，dp 是從下往上推)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minimumTotal</span>(<span class="params">self, triangle: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(triangle)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 建立一個二維陣列，用來儲存每個點的最小值</span></span><br><span class="line">        <span class="comment"># n 行 n 列</span></span><br><span class="line">        dp = [[<span class="number">0</span>]*n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 最後一列的值，最後一個 triangle[n-1][n-1]</span></span><br><span class="line">        <span class="comment"># 將最後一列的值，都加入到 dp 中</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            dp[n-<span class="number">1</span>][j]=triangle[n-<span class="number">1</span>][j]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 從倒數第二列開始，往上推</span></span><br><span class="line">        <span class="comment"># (n-2, n-2) -&gt; (0, 0)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">            <span class="comment"># 從左到右推，長度為 i+1</span></span><br><span class="line">            <span class="comment"># (i, 0) -&gt; (i, i)</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>):</span><br><span class="line">                dp[i][j] = <span class="built_in">min</span>(dp[i+<span class="number">1</span>][j], dp[i+<span class="number">1</span>][j+<span class="number">1</span>]) + triangle[i][j]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<p>O(n^2) time<br>O(n^2) space</p>
<h2 id="看到最簡便的"><a href="#看到最簡便的" class="headerlink" title="看到最簡便的"></a><code>看到最簡便的</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minimumTotal</span>(<span class="params">self, triangle: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(triangle)-<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(triangle[i])):</span><br><span class="line">                triangle[i][j]+=<span class="built_in">min</span>(triangle[i+<span class="number">1</span>][j+<span class="number">1</span>],triangle[i+<span class="number">1</span>][j])</span><br><span class="line">        <span class="keyword">return</span> triangle[<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<p>O(n^2) time</p>
<p>O(1) space</p>
<p>直接不用儲存</p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>medium</tag>
        <tag>💡</tag>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#116. Populating Next Right Pointers in Each Node</title>
    <url>/posts/leetcode/Leetcode-116-Populating-Next-Right-Pointers-in-Each-Node/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>You are given a <strong>perfect binary tree</strong> where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct Node &#123;</span><br><span class="line">  int val;</span><br><span class="line">  Node *left;</span><br><span class="line">  Node *right;</span><br><span class="line">  Node *next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to <code>NULL</code>.</p>
<p>Initially, all next pointers are set to <code>NULL</code>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2019/02/14/116_sample.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,3,4,5,6,7]</span><br><span class="line">Output: [1,#,2,3,#,4,5,6,7,#]</span><br><span class="line">Explanation:Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with &#x27;#&#x27; signifying the end of each level.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = []</span><br><span class="line">Output: []</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[0, 212 - 1]</code>.</li>
<li><code>1000 &lt;= Node.val &lt;= 1000</code></li>
</ul>
<p><strong>Follow-up:</strong></p>
<ul>
<li>You may only use constant extra space.</li>
<li>The recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.</li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><p>top-down  recursive</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">connect</span>(<span class="params">self, root: <span class="string">&#x27;Optional[Node]&#x27;</span></span>) -&gt; <span class="string">&#x27;Optional[Node]&#x27;</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">set_node</span>(<span class="params">root</span>):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">if</span> root.left:</span><br><span class="line">                root.left.<span class="built_in">next</span> = root.right</span><br><span class="line">            <span class="keyword">if</span> root.right <span class="keyword">and</span> root.<span class="built_in">next</span>:</span><br><span class="line">                root.right.<span class="built_in">next</span> = root.<span class="built_in">next</span>.left</span><br><span class="line">            </span><br><span class="line">            <span class="comment">#兩個順序可以調換</span></span><br><span class="line">            set_node(root.left) </span><br><span class="line">            set_node(root.right)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> set_node(root)</span><br></pre></td></tr></table></figure>

<p>簡化一點</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">connect</span>(<span class="params">self, root: <span class="string">&#x27;Optional[Node]&#x27;</span></span>) -&gt; <span class="string">&#x27;Optional[Node]&#x27;</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> root.left:</span><br><span class="line">            root.left.<span class="built_in">next</span> = root.right</span><br><span class="line">        <span class="keyword">if</span> root.right <span class="keyword">and</span> root.<span class="built_in">next</span>:</span><br><span class="line">            root.right.<span class="built_in">next</span> = root.<span class="built_in">next</span>.left</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#兩個順序可以調換</span></span><br><span class="line">        self.connect(root.left)</span><br><span class="line">        self.connect(root.right)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>medium</tag>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
        <tag>💡</tag>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#117. Populating Next Right Pointers in Each Node II</title>
    <url>/posts/leetcode/Leetcode-117-Populating-Next-Right-Pointers-in-Each-Node-II/</url>
    <content><![CDATA[<p><a href="../Leetcode-116-Populating-Next-Right-Pointers-in-Each-Node">leetcode116</a></p>
<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Given a binary tree</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct Node &#123;</span><br><span class="line">  int val;</span><br><span class="line">  Node *left;</span><br><span class="line">  Node *right;</span><br><span class="line">  Node *next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to <code>NULL</code>.</p>
<p>Initially, all next pointers are set to <code>NULL</code>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2019/02/15/117_sample.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,3,4,5,null,7]</span><br><span class="line">Output: [1,#,2,3,#,4,5,7,#]</span><br><span class="line">Explanation:Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with &#x27;#&#x27; signifying the end of each level.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = []</span><br><span class="line">Output: []</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[0, 6000]</code>.</li>
<li><code>100 &lt;= Node.val &lt;= 100</code></li>
</ul>
<p><strong>Follow-up:</strong></p>
<ul>
<li>You may only use constant extra space.</li>
<li>The recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.</li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><p>可以先去看看116</p>
<p>這邊就是多一 <code>指針</code> <code>curr</code>，協助找子節點 next</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 左子節點和右子節點的 next 指針連接</span></span><br><span class="line">        <span class="keyword">if</span> root.left:</span><br><span class="line">            <span class="keyword">if</span> root.right:</span><br><span class="line">                root.left.<span class="built_in">next</span> = root.right  <span class="comment"># 左子節點 next 指向右子節點</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 找右側存在的節點</span></span><br><span class="line">                curr = root.<span class="built_in">next</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 重複尋找右側存在的子節點</span></span><br><span class="line">                <span class="keyword">while</span> curr:</span><br><span class="line">                    <span class="keyword">if</span> curr.left:</span><br><span class="line">                        root.left.<span class="built_in">next</span> = curr.left <span class="comment"># 左子節點 next</span></span><br><span class="line">                        <span class="keyword">break</span> <span class="comment"># 找到後就跳出</span></span><br><span class="line">                    <span class="keyword">elif</span> curr.right:</span><br><span class="line">                        root.left.<span class="built_in">next</span> = curr.right</span><br><span class="line">                        <span class="keyword">break</span> <span class="comment"># 找到後就跳出</span></span><br><span class="line">                    curr = curr.<span class="built_in">next</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 右子節點和右子節點的 next 指針連接</span></span><br><span class="line">        <span class="keyword">if</span> root.right:</span><br><span class="line">            <span class="comment"># 找右側存在的節點</span></span><br><span class="line">            curr = root.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 重複尋找右側存在的子節點</span></span><br><span class="line">            <span class="keyword">while</span> curr:</span><br><span class="line">                <span class="keyword">if</span> curr.left:</span><br><span class="line">                    root.right.<span class="built_in">next</span> = curr.left</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">elif</span> curr.right:</span><br><span class="line">                    root.right.<span class="built_in">next</span> = curr.right</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                curr = curr.<span class="built_in">next</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 遞迴處理右子樹和左子樹</span></span><br><span class="line">        <span class="comment"># 先處理右子樹，因為左子樹的 next 指針可能會用到右子樹的 next 指針</span></span><br><span class="line">        self.connect(root.right)</span><br><span class="line">        self.connect(root.left)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>medium</tag>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
        <tag>💡</tag>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#121. Best Time to Buy and Sell Stock</title>
    <url>/posts/leetcode/Leetcode-121-Best-Time-to-Buy-and-Sell-Stock/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>ith</code> day.</p>
<p>You want to maximize your profit by choosing a <strong>single day</strong> to buy one stock and choosing a <strong>different day in the future</strong> to sell that stock.</p>
<p>Return <em>the maximum profit you can achieve from this transaction</em>. If you cannot achieve any profit, return <code>0</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: prices = [7,1,5,3,6,4]</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.</span><br><span class="line">Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: prices = [7,6,4,3,1]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: In this case, no transactions are done and the max profit = 0.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= prices.length &lt;= 10^5</code></li>
<li><code>0 &lt;= prices[i] &lt;= 10^4</code></li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxProfit</span>(<span class="params">self, prices: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        min_price = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>) <span class="comment">#正無窮大</span></span><br><span class="line">        max_profit = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> price <span class="keyword">in</span> prices:</span><br><span class="line">            min_price = <span class="built_in">min</span>(min_price, price)</span><br><span class="line">            max_profit = <span class="built_in">max</span>(max_profit, price - min_price)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> max_profit</span><br></pre></td></tr></table></figure>

<p>O (n) time and O(1) space</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxProfit</span>(<span class="params">self, prices: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">      min_p = prices[<span class="number">0</span>]</span><br><span class="line">      profit = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(prices)):</span><br><span class="line">          min_p = <span class="built_in">min</span>(min_p , prices[i])</span><br><span class="line">          profit = <span class="built_in">max</span>(profit , prices[i] - min_p)</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> profit</span><br></pre></td></tr></table></figure>

<p>O (n) time and O(1) space</p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
        <tag>easy</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#14. Longest Common Prefix</title>
    <url>/posts/leetcode/Leetcode-14-Longest-Common-Prefix/</url>
    <content><![CDATA[<p>#<code>Problem</code><br>Write a function to find the longest common prefix string amongst an array of strings.</p>
<p>If there is no common prefix, return an empty string <code>&quot;&quot;</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: strs = [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">Output: &quot;fl&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: strs = [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line">Output: &quot;&quot;</span><br><span class="line">Explanation: There is no common prefix among the input strings.</span><br></pre></td></tr></table></figure>

<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">longestCommonPrefix</span>(<span class="params">self, strs: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        pref = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        </span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        minWord = <span class="built_in">min</span>(strs, key=<span class="built_in">len</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(minWord):</span><br><span class="line">            <span class="keyword">for</span> word <span class="keyword">in</span> strs:</span><br><span class="line">                <span class="keyword">if</span> word[i] != minWord[i]:</span><br><span class="line">                    <span class="keyword">return</span> pref</span><br><span class="line">            pref += minWord[i]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> pref</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>easy</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#146. LRU Cache</title>
    <url>/posts/leetcode/Leetcode-146-LRU-Cache/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Design a data structure that follows the constraints of a <strong><a href="https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU">Least Recently Used (LRU) cache</a></strong>.</p>
<p>Implement the <code>LRUCache</code> class:</p>
<ul>
<li><code>LRUCache(int capacity)</code> Initialize the LRU cache with <strong>positive</strong> size <code>capacity</code>.</li>
<li><code>int get(int key)</code> Return the value of the <code>key</code> if the key exists, otherwise return <code>1</code>.</li>
<li><code>void put(int key, int value)</code> Update the value of the <code>key</code> if the <code>key</code> exists. Otherwise, add the <code>key-value</code> pair to the cache. If the number of keys exceeds the <code>capacity</code> from this operation, <strong>evict</strong> the least recently used key.</li>
</ul>
<p>The functions <code>get</code> and <code>put</code> must each run in <code>O(1)</code> average time complexity.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line">[&quot;LRUCache&quot;, &quot;put&quot;, &quot;put&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;get&quot;, &quot;get&quot;]</span><br><span class="line">[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]</span><br><span class="line">Output</span><br><span class="line">[null, null, null, 1, null, -1, null, -1, 3, 4]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">LRUCache lRUCache = new LRUCache(2);</span><br><span class="line">lRUCache.put(1, 1); // cache is &#123;1=1&#125;</span><br><span class="line">lRUCache.put(2, 2); // cache is &#123;1=1, 2=2&#125;</span><br><span class="line">lRUCache.get(1);    // return 1</span><br><span class="line">lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is &#123;1=1, 3=3&#125;</span><br><span class="line">lRUCache.get(2);    // returns -1 (not found)</span><br><span class="line">lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is &#123;4=4, 3=3&#125;</span><br><span class="line">lRUCache.get(1);    // return -1 (not found)</span><br><span class="line">lRUCache.get(3);    // return 3</span><br><span class="line">lRUCache.get(4);    // return 4</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= capacity &lt;= 3000</code></li>
<li><code>0 &lt;= key &lt;= 10^4</code></li>
<li><code>0 &lt;= value &lt;= 10^5</code></li>
<li>At most <code>2 * 10^5</code> calls will be made to <code>get</code> and <code>put</code>.</li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><p>題目給的 LRU 是一個儲存器(緩存器)</p>
<p>有放入 拿出功能</p>
<p>放入時，如果超過容量，就要把最久沒有被使用的資料移除</p>
<p>我這邊表示 cache 前後 關係為 舊資料，後面為新資料</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ex:</span><br><span class="line"><span class="comment"># 初始化一個 LRU Cache 容量為 3，並且放入 1:1 2:5 3:7</span></span><br><span class="line"><span class="comment"># cache is &#123;1=1, 2=5, 3=7&#125;</span></span><br><span class="line">LRUCache lRUCache = new LRUCache(<span class="number">3</span>);  </span><br><span class="line">lRUCache.put(<span class="number">1</span>, <span class="number">1</span>); </span><br><span class="line">lRUCache.put(<span class="number">2</span>, <span class="number">5</span>); </span><br><span class="line">lRUCache.put(<span class="number">3</span>, <span class="number">7</span>); </span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 1:1 2:5 3:7 位置關係是 1:1 在最前面，3:7 在最後面</span></span><br><span class="line"><span class="string"># 前面的資料是最舊的資料，後面的資料是最新的資料</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 這邊get像是調用資料，但是不會移除資料</span></span><br><span class="line">lRUCache.get(<span class="number">1</span>);    // <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 這邊put 4:9 會把 2:5 移除，因為 2:5 是最舊的資料</span></span><br><span class="line"><span class="comment"># 順序變成 3:7 1:1 4:9 ，3=7 是最舊的資料，4:9 是最新的資料</span></span><br><span class="line">lRUCache.put(<span class="number">4</span>, <span class="number">9</span>); // LRU key was <span class="number">2</span>, evicts key <span class="number">2</span>, cache <span class="keyword">is</span> &#123;<span class="number">3</span>=<span class="number">7</span>, <span class="number">1</span>=<span class="number">1</span>, <span class="number">4</span>=<span class="number">9</span>&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化一個 LRU Cache 容量為 2</span></span><br><span class="line">LRUCache lRUCache = new LRUCache(<span class="number">2</span>);  </span><br><span class="line"></span><br><span class="line">lRUCache.put(<span class="number">1</span>, <span class="number">1</span>); // cache <span class="keyword">is</span> &#123;<span class="number">1</span>=<span class="number">1</span>&#125; <span class="comment"># 放入 1:1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 放入 2:2 ，位置在 1:1 後面，因為 1:1 是最舊的資料</span></span><br><span class="line">lRUCache.put(<span class="number">2</span>, <span class="number">2</span>); // cache <span class="keyword">is</span> &#123;<span class="number">1</span>=<span class="number">1</span>, <span class="number">2</span>=<span class="number">2</span>&#125; <span class="comment"># 放入 2:2</span></span><br><span class="line"></span><br><span class="line">lRUCache.get(<span class="number">1</span>);    // <span class="keyword">return</span> <span class="number">1</span> <span class="comment"># 拿出 1:1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 做完 get 之後 cache 為 &#123;2=2, 1=1&#125; </span></span><br><span class="line"><span class="string"># 這時候 2:2 是最舊的資料，所以下次如果要放入新的資料時，就是把 2:2 移除，並且把新的資料放入</span></span><br><span class="line"><span class="string"># 所以下次如果要放入新的資料時，就要把 2:2 移除，並且把新的資料放入</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">lRUCache.put(<span class="number">3</span>, <span class="number">3</span>); // LRU key was <span class="number">2</span>, evicts key <span class="number">2</span>, cache <span class="keyword">is</span> &#123;<span class="number">1</span>=<span class="number">1</span>, <span class="number">3</span>=<span class="number">3</span>&#125; </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># LRU key 用途就是用來記錄最舊的資料，當要放入新的資料時，就可以把最舊的資料移除(evicts)</span></span><br><span class="line"><span class="string"># 這樣就可以達到 LRU 的效果</span></span><br><span class="line"><span class="string"># 放入 3:3 並且把 2:2 移除</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2:2 已經被移除了，所以拿不到資料</span></span><br><span class="line">lRUCache.get(<span class="number">2</span>);    // returns -<span class="number">1</span> (<span class="keyword">not</span> found)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 放入 4:4 並且把 1:1 移除，4:4 是最新的資料，所以放在最後面</span></span><br><span class="line">lRUCache.put(<span class="number">4</span>, <span class="number">4</span>); // LRU key was <span class="number">1</span>, evicts key <span class="number">1</span>, cache <span class="keyword">is</span> &#123;<span class="number">3</span>=<span class="number">3</span>, <span class="number">4</span>=<span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1:1 已經被移除了，所以拿不到資料</span></span><br><span class="line">lRUCache.get(<span class="number">1</span>);    // <span class="keyword">return</span> -<span class="number">1</span> (<span class="keyword">not</span> found)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3:3 4:4 還在 cache 裡面</span></span><br><span class="line">lRUCache.get(<span class="number">3</span>);    // <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">lRUCache.get(<span class="number">4</span>);    // <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="題目要求的-Hash-Table-Doubly-Linked-List"><a href="#題目要求的-Hash-Table-Doubly-Linked-List" class="headerlink" title="題目要求的 Hash Table Doubly-Linked List"></a><code>題目要求的 Hash Table Doubly-Linked List</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, key, val</span>):</span><br><span class="line">        self.key = key  <span class="comment"># 節點的鍵（對比  LRU Cache 中的 key）</span></span><br><span class="line">        self.val = val  <span class="comment"># 節點的值（對比  LRU Cache 中的 value）</span></span><br><span class="line">        self.prev = <span class="literal">None</span>  <span class="comment"># 上一個節點的指針</span></span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span>  <span class="comment"># 下一個節點的指針</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, capacity</span>):</span><br><span class="line">        self.capacity = capacity  <span class="comment"># LRU Cache 的容量</span></span><br><span class="line">        self.<span class="built_in">dict</span> = <span class="built_in">dict</span>()  <span class="comment"># 哈希表用於快速查找節點</span></span><br><span class="line">        self.head = Node(<span class="number">0</span>, <span class="number">0</span>)  <span class="comment"># 鏈表的頭節點</span></span><br><span class="line">        self.tail = Node(<span class="number">0</span>, <span class="number">0</span>)  <span class="comment"># 鏈表的尾節點</span></span><br><span class="line">        self.head.<span class="built_in">next</span> = self.tail  <span class="comment"># 頭節點的下一個指向尾節點</span></span><br><span class="line">        self.tail.prev = self.head  <span class="comment"># 尾節點的上一個指向頭節點</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, key</span>):</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.<span class="built_in">dict</span>:  <span class="comment"># 如果 key 存在於哈希表中</span></span><br><span class="line">            n = self.<span class="built_in">dict</span>[key]  <span class="comment"># 獲得對應的節點</span></span><br><span class="line">            self._remove(n)  <span class="comment"># 從鏈表中移除節點</span></span><br><span class="line">            self._add(n)  <span class="comment"># 將節點添加到鏈表尾部，表示最近訪問</span></span><br><span class="line">            <span class="keyword">return</span> n.val  <span class="comment"># 返回節點的值</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>  <span class="comment"># 如果 key 不存在，返回 -1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, key, value</span>):</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.<span class="built_in">dict</span>:  <span class="comment"># 如果 key 已經存在於哈希表中</span></span><br><span class="line">            self._remove(self.<span class="built_in">dict</span>[key])  <span class="comment"># 從鏈表中移除對應節點</span></span><br><span class="line">        n = Node(key, value)  <span class="comment"># 創建新的節點</span></span><br><span class="line">        self._add(n)  <span class="comment"># 將節點添加到鏈表尾部，表示最近訪問</span></span><br><span class="line">        self.<span class="built_in">dict</span>[key] = n  <span class="comment"># 在哈希表中添加鍵值對的引用</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.<span class="built_in">dict</span>) &gt; self.capacity:  <span class="comment"># 如果超過容量上限</span></span><br><span class="line">            n = self.head.<span class="built_in">next</span>  <span class="comment"># 獲得鏈表中第一個節點（即最久未使用的節點）</span></span><br><span class="line">            self._remove(n)  <span class="comment"># 從鏈表中移除節點</span></span><br><span class="line">            <span class="keyword">del</span> self.<span class="built_in">dict</span>[n.key]  <span class="comment"># 從哈希表中刪除鍵值對的引用</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_remove</span>(<span class="params">self, node</span>):</span><br><span class="line">        <span class="comment"># 將節點從鏈表中移除</span></span><br><span class="line">        p = node.prev</span><br><span class="line">        n = node.<span class="built_in">next</span></span><br><span class="line">        p.<span class="built_in">next</span> = n</span><br><span class="line">        n.prev = p</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_add</span>(<span class="params">self, node</span>):</span><br><span class="line">        <span class="comment"># 將節點添加到鏈表尾部，表示最近訪問</span></span><br><span class="line">        p = self.tail.prev</span><br><span class="line">        p.<span class="built_in">next</span> = node</span><br><span class="line">        self.tail.prev = node</span><br><span class="line">        node.prev = p</span><br><span class="line">        node.<span class="built_in">next</span> = self.tail</span><br></pre></td></tr></table></figure>

<h2 id="但python-dict-可以變有序"><a href="#但python-dict-可以變有序" class="headerlink" title="但python dict 可以變有序 !!!"></a><code>但python dict 可以變有序 !!!</code></h2><p>可以像 list 這樣做</p>
<p>但list 搜尋是用 for</p>
<p>時間複雜為O(n)，所以失敗</p>
<h2 id="用list-for迴圈，但效能上有問題-O-n-失敗"><a href="#用list-for迴圈，但效能上有問題-O-n-失敗" class="headerlink" title="用list for迴圈，但效能上有問題 O(n) (失敗)"></a><code>用list for迴圈，但效能上有問題 O(n) (失敗)</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, capacity: <span class="built_in">int</span></span>):</span><br><span class="line">        self.<span class="built_in">list</span> = []</span><br><span class="line">        self.capacity = capacity</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, key: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(self.<span class="built_in">list</span>)):</span><br><span class="line">            <span class="keyword">if</span> self.<span class="built_in">list</span>[i][<span class="number">0</span>] == key:</span><br><span class="line">                <span class="comment"># self.list.pop(i)</span></span><br><span class="line">                <span class="comment"># self.list.append((key, value))</span></span><br><span class="line">                self.<span class="built_in">list</span>.append(self.<span class="built_in">list</span>.pop(i))</span><br><span class="line">                <span class="keyword">return</span> self.<span class="built_in">list</span>[-<span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, key: <span class="built_in">int</span>, value: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(self.<span class="built_in">list</span>)):</span><br><span class="line">            <span class="keyword">if</span> self.<span class="built_in">list</span>[i][<span class="number">0</span>] == key:</span><br><span class="line">                self.<span class="built_in">list</span>.pop(i)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.<span class="built_in">list</span>) == self.capacity:</span><br><span class="line">            self.<span class="built_in">list</span>.pop(<span class="number">0</span>)</span><br><span class="line">        self.<span class="built_in">list</span>.append((key, value))</span><br></pre></td></tr></table></figure>

<p><code>時間複雜度: O(n)</code></p>
<p>邏輯沒錯 但是 時間跑太久</p>
<h2 id="利用iter-dict-為有序的-python-3-7"><a href="#利用iter-dict-為有序的-python-3-7" class="headerlink" title="利用iter(dict) 為有序的(python 3.7~)"></a><code>利用iter(dict) 為有序的</code>(python 3.7~)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, capacity: <span class="built_in">int</span></span>):</span><br><span class="line">        self.<span class="built_in">dict</span> = &#123;&#125;</span><br><span class="line">        self.capacity = capacity</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, key: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> self.<span class="built_in">dict</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        val = self.<span class="built_in">dict</span>.pop(key)  <span class="comment">#Remove it first before inserting it at the end again</span></span><br><span class="line">        self.<span class="built_in">dict</span>[key] = val</span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, key: <span class="built_in">int</span>, value: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.<span class="built_in">dict</span>:</span><br><span class="line">            self.<span class="built_in">dict</span>.pop(key)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(self.<span class="built_in">dict</span>) == self.capacity:</span><br><span class="line">                <span class="keyword">del</span> self.<span class="built_in">dict</span>[<span class="built_in">next</span>(<span class="built_in">iter</span>(self.<span class="built_in">dict</span>))]</span><br><span class="line">        self.<span class="built_in">dict</span>[key] = value</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">iter(self.dict)：iter() 函數將字典轉換成一個迭代器（iterator）</span></span><br><span class="line"><span class="string">next(iter(self.dict)) 取得第一個鍵</span></span><br><span class="line"><span class="string">del self.dict[next(iter(self.dict))]  將取得的第一個鍵刪除</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>在 Python 3.7 之後，**<code>dict</code>** 在保留插入順序方面是有序的。因此，**<code>iter(self.dict)</code>** 返回的迭代器將按照鍵（key）插入的順序來迭代字典中的鍵。</p>
<p><code>時間複雜度:O(1)</code></p>
<ul>
<li>iterator : 迭代器是 Python 中一種特殊的物件，它允許遍歷（迭代）容器中的元素，而不需要事先知道容器的結構。字典、列表、元組等可迭代的容器都可以通過 <strong><code>iter()</code></strong> 函數轉換成迭代器。</li>
<li><strong><code>iter()</code></strong> 函數：用於將可迭代的容器（如字典、列表、元組等）轉換成迭代器當使用迭代器時，我們可以使用 <strong><code>next()</code></strong> 函數依次取得容器中的元素。</li>
</ul>
<ol>
<li>**<code>iter(self.dict)</code>**：這一部分將字典 <strong><code>self.dict</code></strong> 轉換為一個迭代器。這是因為字典本身並不是一個迭代器，但我們希望能夠逐一訪問其中的鍵。</li>
<li>**<code>next(iter(self.dict))</code>**：這一部分使用 <strong><code>next()</code></strong> 函數取得迭代器 <strong><code>iter(self.dict)</code></strong> 中的下一個元素（這裡是字典中的第一個鍵）。換句話說，它返回字典中的第一個鍵。</li>
</ol>
<h2 id="偷吃步、直接載入有序的dict"><a href="#偷吃步、直接載入有序的dict" class="headerlink" title="偷吃步、直接載入有序的dict"></a><code>偷吃步、直接載入有序的dict</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, capacity: <span class="built_in">int</span></span>):</span><br><span class="line">        self.<span class="built_in">dict</span> = OrderedDict()  <span class="comment"># 使用OrderedDict來保持插入順序</span></span><br><span class="line">        self.capacity = capacity</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, key: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.<span class="built_in">dict</span>:</span><br><span class="line">            <span class="comment"># 移動查詢到的鍵值對到字典的末尾，表示最近使用</span></span><br><span class="line">            self.<span class="built_in">dict</span>.move_to_end(key)</span><br><span class="line">            <span class="keyword">return</span> self.<span class="built_in">dict</span>[key]</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, key: <span class="built_in">int</span>, value: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.<span class="built_in">dict</span>:</span><br><span class="line">            self.<span class="built_in">dict</span>.move_to_end(key)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(self.<span class="built_in">dict</span>) == self.capacity:</span><br><span class="line">                <span class="comment"># 如果容量已滿，刪除字典的第一個元素（最久未使用）</span></span><br><span class="line">                self.<span class="built_in">dict</span>.popitem(last=<span class="literal">False</span>)</span><br><span class="line">        self.<span class="built_in">dict</span>[key] = value</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>medium</tag>
        <tag>💡</tag>
        <tag>Linked List</tag>
        <tag>Hash Table</tag>
        <tag>Design</tag>
        <tag>Doubly-Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#148. Sort Listk</title>
    <url>/posts/leetcode/Leetcode-148-Sort-Listk/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Given the <code>head</code> of a linked list, return <em>the list after sorting it in <strong>ascending order</strong></em>.</p>
<p><strong>Example 1:</strong><br><img src="https://assets.leetcode.com/uploads/2020/09/14/sort_list_1.jpg"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: head = [4,2,1,3]</span><br><span class="line">Output: [1,2,3,4]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong><br><img src="/invert1-tree.jpg" alt="Alt text"><br><img src="https://assets.leetcode.com/uploads/2020/09/14/sort_list_2.jpg"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: head = [-1,5,3,4,0]</span><br><span class="line">Output: [-1,0,3,4,5]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: head = []</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure>

<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sortList</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 沒有 或只只有一個 代表已經排好了</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.<span class="built_in">next</span>:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 用快慢指針找到中間點</span></span><br><span class="line">        slow = head</span><br><span class="line">        fast = head.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> fast <span class="keyword">and</span> fast.<span class="built_in">next</span>:</span><br><span class="line">            slow = slow.<span class="built_in">next</span></span><br><span class="line">            fast = fast.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        mid= slow.<span class="built_in">next</span></span><br><span class="line">        slow.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 遞迴調用 sortList 函式 排序左右兩邊</span></span><br><span class="line">        left = self.sortList(head)</span><br><span class="line">        right = self.sortList(mid)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 創建兩個指針，指向相同的 ListNode(0) </span></span><br><span class="line">        h = res = ListNode(<span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 將兩個已排序鏈表的合併</span></span><br><span class="line">        <span class="keyword">while</span> left <span class="keyword">and</span> right:</span><br><span class="line">            <span class="keyword">if</span> left.val &lt; right.val:</span><br><span class="line">                h.<span class="built_in">next</span>= left</span><br><span class="line">                left = left.<span class="built_in">next</span></span><br><span class="line">                <span class="comment"># 如果左半部分鏈表的節點值小於右半部分鏈表的節點值，</span></span><br><span class="line">                <span class="comment"># 將 h 的下一個節點指向 left，同時更新 left 指針到下一個節點。</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                h.<span class="built_in">next</span> = right</span><br><span class="line">                right = right.<span class="built_in">next</span></span><br><span class="line">                <span class="comment"># 如果右半部分鏈表的節點值小於等於左半部分鏈表的節點值，</span></span><br><span class="line">                <span class="comment"># 將 h 的下一個節點指向 right，同時更新 right 指針到下一個節點</span></span><br><span class="line">            h = h.<span class="built_in">next</span></span><br><span class="line">            <span class="comment"># 更新 h 指針到下一個節點</span></span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">        <span class="comment"># 連接剩下的</span></span><br><span class="line">        h.<span class="built_in">next</span> = left <span class="keyword">if</span> left <span class="keyword">else</span> right</span><br><span class="line">        <span class="keyword">return</span> res.<span class="built_in">next</span></span><br></pre></td></tr></table></figure>

<h3 id="拆分為三個函式"><a href="#拆分為三個函式" class="headerlink" title="拆分為三個函式"></a>拆分為三個函式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sortList</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        <span class="comment"># 如果鏈表為空或只有一個節點，則無需排序，直接返回鏈表</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.<span class="built_in">next</span>:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 獲取鏈表的中間節點</span></span><br><span class="line">        mid = self.getMiddle(head)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 遞迴排序左半部分鏈表和右半部分鏈表</span></span><br><span class="line">        left = self.sortList(head)</span><br><span class="line">        right = self.sortList(mid)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 合併排序後的左半部分鏈表和右半部分鏈表</span></span><br><span class="line">        <span class="keyword">return</span> self.merge(left, right)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getMiddle</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        <span class="comment"># 使用快慢指針法找到鏈表的中間節點</span></span><br><span class="line">        slow, fast = head, head.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">while</span> fast <span class="keyword">and</span> fast.<span class="built_in">next</span>:</span><br><span class="line">            slow = slow.<span class="built_in">next</span></span><br><span class="line">            fast = fast.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 將鏈表切分成兩半，並返回中間節點</span></span><br><span class="line">        mid = slow.<span class="built_in">next</span></span><br><span class="line">        slow.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> mid</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">self, left: <span class="type">Optional</span>[ListNode], right: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        合併兩個已排序的鏈表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            left: 第一個已排序的鏈表的頭節點</span></span><br><span class="line"><span class="string">            right: 第二個已排序的鏈表的頭節點</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            合併後的已排序鏈表的頭節點</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果其中一個鏈表為空，則直接返回另一個鏈表</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> left:</span><br><span class="line">            <span class="keyword">return</span> right</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> right:</span><br><span class="line">            <span class="keyword">return</span> left</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 比較兩個鏈表頭節點的值</span></span><br><span class="line">        <span class="keyword">if</span> left.val &lt; right.val:</span><br><span class="line">            <span class="comment"># 如果左鏈表的頭節點值較小，則將其連接到合併後的鏈表，</span></span><br><span class="line">            <span class="comment"># 同時遞迴地將左鏈表的下一個節點和右鏈表傳入 merge 函式進行合併</span></span><br><span class="line">            left.<span class="built_in">next</span> = self.merge(left.<span class="built_in">next</span>, right)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 返回合併後的鏈表的頭節點</span></span><br><span class="line">            <span class="keyword">return</span> left</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 如果右鏈表的頭節點值較小或相等，則將其連接到合併後的鏈表，</span></span><br><span class="line">            <span class="comment"># 同時遞迴地將左鏈表和右鏈表的下一個節點傳入 merge 函式進行合併</span></span><br><span class="line">            right.<span class="built_in">next</span> = self.merge(left, right.<span class="built_in">next</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 返回合併後的鏈表的頭節點</span></span><br><span class="line">            <span class="keyword">return</span> right</span><br></pre></td></tr></table></figure>

<p>程式碼將原先的 <strong><code>sortList</code></strong> 函式拆分為三個函式：**<code>sortList</code><strong>、</strong><code>getMiddle</code>** 和 <strong><code>merge</code><strong>。</strong><code>sortList</code></strong> 函式仍然是入口點，用於遞迴調用和合併兩部分鏈表，**<code>getMiddle</code>** 函式用於獲取鏈表的中間節點並切斷鏈表，**<code>merge</code>** 函式用於合併兩個已排序的鏈表。</p>
<p>在 <strong><code>merge</code></strong> 函式中，通過比較兩個鏈表的頭節點的值，每次選擇較小的節點，並將其 <strong><code>next</code></strong> 指針指向遞迴調用的結果，最後返回合併後的鏈表。</p>
<p>這樣的實現方式可以使用合併排序的思想對鏈表進行排序，達到相同的效果。</p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>medium</tag>
        <tag>💡</tag>
        <tag>Linked List</tag>
        <tag>Two Pointers</tag>
        <tag>Divide and Conquer</tag>
        <tag>Sorting</tag>
        <tag>Merge Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#198. House Robber</title>
    <url>/posts/leetcode/Leetcode-198-House-Robber/</url>
    <content><![CDATA[<p>可以先看看<br><a href="../Leetcode-70-Climbing-Stairs">leetcode70</a></p>
<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and <strong>it will automatically contact the police if two adjacent houses were broken into on the same night</strong>.</p>
<p>Given an integer array <code>nums</code> representing the amount of money of each house, return <em>the maximum amount of money you can rob tonight <strong>without alerting the police</strong></em>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,3,1]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).</span><br><span class="line">Total amount you can rob = 1 + 3 = 4.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [2,7,9,3,1]</span><br><span class="line">Output: 12</span><br><span class="line">Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).</span><br><span class="line">Total amount you can rob = 2 + 9 + 1 = 12.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 100</code></li>
<li><code>0 &lt;= nums[i] &lt;= 400</code></li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><h2 id="遞迴"><a href="#遞迴" class="headerlink" title="遞迴"></a><code>遞迴</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Time Limit Exceeded</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rob</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dp</span>(<span class="params">nums</span>):</span><br><span class="line">            n = <span class="built_in">len</span>(nums)</span><br><span class="line">            <span class="keyword">if</span> n == <span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> n == <span class="number">1</span>: <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">if</span> n == <span class="number">2</span>: <span class="keyword">return</span> <span class="built_in">max</span>(nums[<span class="number">0</span>], nums[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">max</span>(dp(nums[:-<span class="number">2</span>]) + nums[-<span class="number">1</span>], dp(nums[:-<span class="number">1</span>]))</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> dp(nums)</span><br></pre></td></tr></table></figure>

<p>加上 menory</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rob</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        meno = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dp</span>(<span class="params">nums</span>):</span><br><span class="line">            n = <span class="built_in">len</span>(nums)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> n <span class="keyword">in</span> meno: <span class="keyword">return</span> meno[n]</span><br><span class="line">            <span class="keyword">if</span> n == <span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> n == <span class="number">1</span>: <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">if</span> n == <span class="number">2</span>: <span class="keyword">return</span> <span class="built_in">max</span>(nums[<span class="number">0</span>], nums[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">            meno[n] = <span class="built_in">max</span>(dp(nums[:-<span class="number">2</span>]) + nums[-<span class="number">1</span>], dp(nums[:-<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> meno[n]</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> dp(nums)</span><br></pre></td></tr></table></figure>

<h2 id="dp"><a href="#dp" class="headerlink" title="dp"></a><code>dp</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rob</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">1</span>: <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">2</span>: <span class="keyword">return</span> <span class="built_in">max</span>(nums)</span><br><span class="line"></span><br><span class="line">        dp = [<span class="number">0</span>]*<span class="built_in">len</span>(nums)</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>]</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="built_in">max</span>(nums[<span class="number">0</span>], nums[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="built_in">len</span>(nums)):</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i-<span class="number">2</span>] + nums[i], dp[i-<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> dp[-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>medium</tag>
        <tag>💡</tag>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#149. Max Points on a Line</title>
    <url>/posts/leetcode/Leetcode-149-Max-Points-on-a-Line/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Given an array of <code>points</code> where <code>points[i] = [xi, yi]</code> represents a point on the <strong>X-Y</strong> plane, return <em>the maximum number of points that lie on the same straight line</em>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/02/25/plane1.jpg"></p>
<p>!<a href="https://assets.leetcode.com/uploads/2021/02/25/plane1.jpg">https://assets.leetcode.com/uploads/2021/02/25/plane1.jpg</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: points = [[1,1],[2,2],[3,3]]</span><br><span class="line">Output: 3</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/02/25/plane2.jpg"></p>
<p>!<a href="https://assets.leetcode.com/uploads/2021/02/25/plane2.jpg">https://assets.leetcode.com/uploads/2021/02/25/plane2.jpg</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]</span><br><span class="line">Output: 4</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= points.length &lt;= 300</code></li>
<li><code>points[i].length == 2</code></li>
<li><code>10^4 &lt;= xi, yi &lt;= 10^4</code></li>
<li>All the <code>points</code> are <strong>unique</strong>.</li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><h3 id="法一"><a href="#法一" class="headerlink" title="法一"></a><code>法一</code></h3><p>找到最多</p>
<p>兩點斜率公式 y &#x3D; tan * x + res             ( y &#x3D; a x  + b)</p>
<p>“#” 為垂直線</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxPoints</span>(<span class="params">self, points: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">				<span class="comment"># At least the last point, if the list is not empty</span></span><br><span class="line">        max_value = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(points)):</span><br><span class="line">            memo = &#123;&#125;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>( i + <span class="number">1</span> ,<span class="built_in">len</span>(points)):</span><br><span class="line"></span><br><span class="line">                dx = points[i][<span class="number">0</span>]-points[j][<span class="number">0</span>]</span><br><span class="line">                dy = points[i][<span class="number">1</span>]-points[j][<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> dx == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">&quot;#&quot;</span>,-points[i][<span class="number">0</span>]) <span class="keyword">in</span> memo:</span><br><span class="line">                        memo[(<span class="string">&quot;#&quot;</span>,-points[i][<span class="number">0</span>])] += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        memo[(<span class="string">&quot;#&quot;</span>,-points[i][<span class="number">0</span>])] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    tan = dy / dx</span><br><span class="line">                    res = points[i][<span class="number">1</span>] - tan*points[i][<span class="number">0</span>]</span><br><span class="line">                    <span class="keyword">if</span> (tan , res) <span class="keyword">in</span> memo:</span><br><span class="line">                        memo[(tan,res)] += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        memo[(tan,res)] = <span class="number">2</span></span><br><span class="line">                </span><br><span class="line">            <span class="keyword">if</span> memo:</span><br><span class="line">                max_value = <span class="built_in">max</span>(max_value , <span class="built_in">max</span>(memo.values()))</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> max_value</span><br></pre></td></tr></table></figure>

<p>Time complexity :</p>
<p>O( n^2)</p>
<h3 id="優化"><a href="#優化" class="headerlink" title="優化"></a><code>優化</code></h3><p>發現 res 根本不重要</p>
<p>畢竟在 第 i 點上</p>
<p>所以res 一定一樣</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxPoints</span>(<span class="params">self, points: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        max_value = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(points)):</span><br><span class="line">            memo = &#123;&#125;</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>( i + <span class="number">1</span> ,<span class="built_in">len</span>(points)):</span><br><span class="line"></span><br><span class="line">                dx = points[i][<span class="number">0</span>]-points[j][<span class="number">0</span>]</span><br><span class="line">                dy = points[i][<span class="number">1</span>]-points[j][<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> dx == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&quot;#&quot;</span> <span class="keyword">in</span> memo:</span><br><span class="line">                        memo[<span class="string">&quot;#&quot;</span>] += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        memo[<span class="string">&quot;#&quot;</span>] = <span class="number">2</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    tan = dy / dx</span><br><span class="line">                    <span class="keyword">if</span> (tan) <span class="keyword">in</span> memo:</span><br><span class="line">                        memo[tan] += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        memo[tan] = <span class="number">2</span></span><br><span class="line">                        </span><br><span class="line">            <span class="keyword">if</span> memo:</span><br><span class="line">                max_value = <span class="built_in">max</span>(max_value , <span class="built_in">max</span>(memo.values()))</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> max_value</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>💡</tag>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>hard</tag>
        <tag>Math</tag>
        <tag>Geometry</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#190. Reverse Bits</title>
    <url>/posts/leetcode/Leetcode-190-Reverse-Bits/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Reverse bits of a given 32 bits unsigned integer.</p>
<p><strong>Note:</strong></p>
<ul>
<li>Note that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer’s internal binary representation is the same, whether it is signed or unsigned.</li>
<li>In Java, the compiler represents the signed integers using <a href="https://en.wikipedia.org/wiki/Two%27s_complement">2’s complement notation</a>. Therefore, in <strong>Example 2</strong> above, the input represents the signed integer <code>3</code> and the output represents the signed integer <code>1073741825</code>.</li>
</ul>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 00000010100101000001111010011100</span><br><span class="line">Output:    964176192 (00111001011110000010100101000000)</span><br><span class="line">Explanation:The input binary string00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is00111001011110000010100101000000.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 11111111111111111111111111111101</span><br><span class="line">Output:   3221225471 (10111111111111111111111111111111)</span><br><span class="line">Explanation:The input binary string11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is10111111111111111111111111111111.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The input must be a <strong>binary string</strong> of length <code>32</code></li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><h2 id="位元的方法"><a href="#位元的方法" class="headerlink" title="位元的方法"></a><code>位元的方法</code></h2><h3 id="利用位元移位"><a href="#利用位元移位" class="headerlink" title="利用位元移位"></a><code>利用位元移位</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverseBits</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        res = <span class="number">0</span>  </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">          <span class="keyword">if</span> n &amp; <span class="number">1</span>:</span><br><span class="line">            res += <span class="number">2</span>**(<span class="number">31</span> - i)</span><br><span class="line">          n=n&gt;&gt;<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<h3 id="純位元"><a href="#純位元" class="headerlink" title="純位元"></a><code>純位元</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverseBits</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        res = <span class="number">0</span>  <span class="comment"># 初始化結果為 0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">            <span class="comment"># 計算 n 的最後一位（最低有效位）</span></span><br><span class="line">            bit = n &amp; <span class="number">1</span></span><br><span class="line">            <span class="comment"># 將這一位按照反轉後的位置，加入到結果中</span></span><br><span class="line">            res |= bit &lt;&lt; (<span class="number">31</span> - i)</span><br><span class="line">            <span class="comment"># 將 n 向右移一位，以獲取下一位元</span></span><br><span class="line">            n &gt;&gt;= <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res  <span class="comment"># 返回反轉後的整數結果</span></span><br></pre></td></tr></table></figure>

<h2 id="字串方法"><a href="#字串方法" class="headerlink" title="字串方法"></a><code>字串方法</code></h2><h3 id=""><a href="#" class="headerlink" title="."></a><code>.</code></h3><p>1.轉成字串+補字元</p>
<p>2.反轉</p>
<p>3.運算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverseBits</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        r_n = <span class="string">&quot;0&quot;</span>*(<span class="number">32</span>-<span class="built_in">len</span>(<span class="built_in">bin</span>(n)[<span class="number">2</span>:])) + <span class="built_in">str</span>(<span class="built_in">bin</span>(n)[<span class="number">2</span>:])</span><br><span class="line">        r_n = r_n[::-<span class="number">1</span>] </span><br><span class="line">        level = <span class="number">0</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        cursor = <span class="number">31</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> cursor &gt;= <span class="number">0</span>  :</span><br><span class="line">            res += <span class="built_in">int</span>( r_n[cursor] ) *(<span class="number">2</span>**level)</span><br><span class="line">            level += <span class="number">1</span></span><br><span class="line">            cursor -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>  res</span><br></pre></td></tr></table></figure>

<h3 id="網路縮寫"><a href="#網路縮寫" class="headerlink" title="網路縮寫"></a><code>網路縮寫</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverseBits</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># convert the input integer to a binary string</span></span><br><span class="line">        binary_str = <span class="built_in">bin</span>(n)[<span class="number">2</span>:]</span><br><span class="line">        binary_str = <span class="string">&quot;0&quot;</span>*(<span class="number">32</span>-<span class="built_in">len</span>(binary_str))+ binary_str </span><br><span class="line">        <span class="comment"># reverse the binary string</span></span><br><span class="line">        reversed_str = binary_str[::-<span class="number">1</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># convert the reversed binary string back to an integer</span></span><br><span class="line">        reversed_int = <span class="built_in">int</span>(reversed_str, <span class="number">2</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> reversed_int</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>💡</tag>
        <tag>easy</tag>
        <tag>Divide and Conquer</tag>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#201. Bitwise AND of Numbers Range</title>
    <url>/posts/leetcode/Leetcode-201-Bitwise-AND-of-Numbers-Range/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Given two integers <code>left</code> and <code>right</code> that represent the range <code>[left, right]</code>, return <em>the bitwise(位元運算) AND of all numbers in this range, inclusive</em>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: left = 5, right = 7</span><br><span class="line">Output: 4</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: left = 0, right = 0</span><br><span class="line">Output: 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: left = 1, right = 2147483647</span><br><span class="line">Output: 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>0 &lt;= left &lt;= right &lt;= 2^31 - 1</code></li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><p>對區間的數字進行位元運算</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">根據位元的值（0或1）進行邏輯運算</span><br><span class="line"></span><br><span class="line">位元 AND（&amp;）：對兩個二進制數進行對應位元的 AND 運算。當兩個對應位元都為1時，結果的對應位元為1，否則為0。</span><br><span class="line">10101010   (170)</span><br><span class="line">&amp; </span><br><span class="line">11001100   (204)</span><br><span class="line">----------</span><br><span class="line">10001000   (136)</span><br></pre></td></tr></table></figure>

<p><code>不過題目要連續</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">101</span>   (<span class="number">5</span>)</span><br><span class="line">&amp; </span><br><span class="line"><span class="number">110</span>   (<span class="number">6</span>)</span><br><span class="line">&amp;</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">&amp;</span><br><span class="line"><span class="number">1100</span>   (<span class="number">12</span>)</span><br><span class="line">----------</span><br><span class="line"><span class="number">0000</span>   (<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">10101010</span>   (<span class="number">170</span>)</span><br><span class="line">&amp; </span><br><span class="line"><span class="number">10101010</span>   (<span class="number">171</span>)</span><br><span class="line">&amp;</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">&amp;</span><br><span class="line"><span class="number">11001100</span>   (<span class="number">204</span>)</span><br><span class="line">----------</span><br><span class="line"><span class="number">10000000</span>   (<span class="number">128</span>)</span><br></pre></td></tr></table></figure>

<h2 id="先說結論、實際看-就是看位元數有沒有一樣"><a href="#先說結論、實際看-就是看位元數有沒有一樣" class="headerlink" title="先說結論、實際看 就是看位元數有沒有一樣"></a>先說<code>結論、實際看 就是看位元數有沒有一樣</code></h2><p>因為連續區間 位元 AND 的結果該位元會是 0。</p>
<p>所以只有長度一樣時，才有</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rangeBitwiseAnd</span>(<span class="params">self, left: <span class="built_in">int</span>, right: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        shift = <span class="number">0</span>  <span class="comment">#紀錄往右的次數</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right: <span class="comment">#當長短不一時會持續進行，最終可能為0  0</span></span><br><span class="line">            left &gt;&gt;= <span class="number">1</span>   <span class="comment">#位元往右 1</span></span><br><span class="line">            right &gt;&gt;= <span class="number">1</span>  <span class="comment">#位元往右 1</span></span><br><span class="line">            shift += <span class="number">1</span>  <span class="comment">#往右次數+1</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> left &lt;&lt; shift  <span class="comment">#位元往左 shift 次</span></span><br></pre></td></tr></table></figure>

<h3 id="範例一"><a href="#範例一" class="headerlink" title="範例一"></a>範例一</h3><p>當 <strong><code>left = 5</code><strong>、</strong><code>right = 7</code></strong> 時</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scssCopy code</span><br><span class="line">left = 5   (二進制: 101)</span><br><span class="line">right = 7  (二進制: 111)</span><br><span class="line">shift = 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>迴圈開始，每次右移 <strong><code>left</code></strong> 和 <strong><code>right</code></strong> 一位，同時增加 <strong><code>shift</code></strong> 的值。</p>
<p>第一次迴圈：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scssCopy code</span><br><span class="line">left = 2   (二進制: 10)</span><br><span class="line">right = 3  (二進制: 11)</span><br><span class="line">shift = 1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第二次迴圈：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scssCopy code</span><br><span class="line">left = 1   (二進制: 1)</span><br><span class="line">right = 1  (二進制: 1)</span><br><span class="line">shift = 2</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>迴圈結束，因為此時 <strong><code>left</code></strong> 等於 **<code>right</code>**。</p>
<p>最後，將 <strong><code>left</code></strong> 左移 <strong><code>shift</code></strong> 位：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scssCopy code</span><br><span class="line">result = 1 &lt;&lt; 2</span><br><span class="line">       = 100  (二進制)</span><br><span class="line">       = 4    (十進制)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>所以，在區間 <strong><code>[5, 7]</code></strong> 內的所有數字的位元 AND 運算結果為 **<code>4</code>**。</p>
<p>這個方法通過右移邊界來逐漸縮小區間的範圍，同時使用 <strong><code>shift</code></strong> 變數跟踪右移的位元數。最後，將左邊界左移回來，得到位元 AND 運算的結果。</p>
<h3 id="範例二"><a href="#範例二" class="headerlink" title="範例二"></a>範例二</h3><p>假設 **<code>left = 3</code><strong>、</strong><code>right = 8</code>**。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scssCopy code</span><br><span class="line">left = 3   (二進制: 11)</span><br><span class="line">right = 8  (二進制: 1000)</span><br><span class="line">shift = 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>迴圈開始，每次右移 <strong><code>left</code></strong> 和 <strong><code>right</code></strong> 一位，同時增加 <strong><code>shift</code></strong> 的值。</p>
<p>第一次迴圈：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scssCopy code</span><br><span class="line">left = 1   (二進制: 1)</span><br><span class="line">right = 4  (二進制: 100)</span><br><span class="line">shift = 1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第二次迴圈：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scssCopy code</span><br><span class="line">left = 0   (二進制: 0)</span><br><span class="line">right = 2  (二進制: 10)</span><br><span class="line">shift = 2</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>迴圈結束，因為此時 <strong><code>left</code></strong> 等於 **<code>right</code>**。</p>
<p>最後，將 <strong><code>left</code></strong> 左移 <strong><code>shift</code></strong> 位：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scssCopy code</span><br><span class="line">result = 0 &lt;&lt; 2</span><br><span class="line">       = 00  (二進制)</span><br><span class="line">       = 0   (十進制)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>所以，在區間 <strong><code>[3, 8]</code></strong> 內的所有數字的位元 AND 運算結果為 **<code>0</code>**。</p>
<p>這個方法通過右移邊界來逐漸縮小區間的範圍，同時使用 <strong><code>shift</code></strong> 變數跟踪右移的位元數。最後，將左邊界左移回來，得到位元 AND 運算的結果。</p>
<p>注意：該程式碼的目的是求解區間內所有數字的位元 AND 運算結果，而不是計算 <strong><code>left</code></strong> 和 <strong><code>right</code></strong> 的位元 AND 運算結果。因此，當區間內的數字差異較大時，位元 AND 運算的結果可能為 0。</p>
<h3 id="範例三"><a href="#範例三" class="headerlink" title="範例三"></a>範例三</h3><p>假設 **<code>left = 3</code><strong>、</strong><code>right = 9</code>**。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scssCopy code</span><br><span class="line">left = 3   (二進制: 11)</span><br><span class="line">right = 9  (二進制: 1001)</span><br><span class="line">shift = 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>迴圈開始，每次右移 <strong><code>left</code></strong> 和 <strong><code>right</code></strong> 一位，同時增加 <strong><code>shift</code></strong> 的值。</p>
<p>第一次迴圈：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scssCopy code</span><br><span class="line">left = 1   (二進制: 1)</span><br><span class="line">right = 4  (二進制: 100)</span><br><span class="line">shift = 1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第二次迴圈：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scssCopy code</span><br><span class="line">left = 0   (二進制: 0)</span><br><span class="line">right = 2  (二進制: 10)</span><br><span class="line">shift = 2</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>迴圈結束，因為此時 <strong><code>left</code></strong> 等於 **<code>right</code>**。</p>
<p>最後，將 <strong><code>left</code></strong> 左移 <strong><code>shift</code></strong> 位：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scssCopy code</span><br><span class="line">result = 0 &lt;&lt; 2</span><br><span class="line">       = 00  (二進制)</span><br><span class="line">       = 0   (十進制)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>所以，在區間 <strong><code>[3, 9]</code></strong> 內的所有數字的位元 AND 運算結果為 **<code>0</code>**。</p>
<p>這個方法通過右移邊界來逐漸縮小區間的範圍，同時使用 <strong><code>shift</code></strong> 變數跟踪右移的位元數。最後，將左邊界左移回來，得到位元 AND 運算的結果。</p>
<p>注意：該程式碼的目的是求解區間內所有數字的位元 AND 運算結果，而不是計算 <strong><code>left</code></strong> 和 <strong><code>right</code></strong> 的位元 AND 運算結果。因此，當區間內的數字差異較大時，位元 AND 運算的結果可能為 0。</p>
<h2 id="偷吃步"><a href="#偷吃步" class="headerlink" title="偷吃步"></a>偷吃步</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1. right - 1 會將 right 的最右邊的 1 位元轉為 0</span></span><br><span class="line"><span class="string">2. right &amp;= right - 1 則是將 right 的值和 right - 1 的值進行位元 AND 運算，這一步的目的是將 right 的最右邊的 1 位元消除，因為在 left 和 right 之間的區間內，</span></span><br><span class="line"><span class="string">必定會有某個數字的該位元為 0。</span></span><br><span class="line"><span class="string">3. 重複執行以上兩步，直到 left 不再小於 right，即 left 和 right 相等或 left 大於 right。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">也就是窮舉法</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rangeBitwiseAnd</span>(<span class="params">self, left: <span class="built_in">int</span>, right: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            right &amp;= right - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> right</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>medium</tag>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#221. Maximal Square</title>
    <url>/posts/leetcode/Leetcode-221-Maximal-Square/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Given an <code>m x n</code> binary <code>matrix</code> filled with <code>0</code>‘s and <code>1</code>‘s, <em>find the largest square containing only</em> <code>1</code>‘s <em>and return its area</em>.</p>
<p><strong>Example 1:</strong></p>
<p>![]<a href="https://assets.leetcode.com/uploads/2020/11/26/max1grid.jpg">https://assets.leetcode.com/uploads/2020/11/26/max1grid.jpg</a></p>
<p>!<a href="https://assets.leetcode.com/uploads/2020/11/26/max1grid.jpg">https://assets.leetcode.com/uploads/2020/11/26/max1grid.jpg</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: matrix = [[&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],[&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;],[&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;],[&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;]]</span><br><span class="line">Output: 4</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p>![]<a href="https://assets.leetcode.com/uploads/2020/11/26/max2grid.jpg">https://assets.leetcode.com/uploads/2020/11/26/max2grid.jpg</a></p>
<p>!<a href="https://assets.leetcode.com/uploads/2020/11/26/max2grid.jpg">https://assets.leetcode.com/uploads/2020/11/26/max2grid.jpg</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: matrix = [[&quot;0&quot;,&quot;1&quot;],[&quot;1&quot;,&quot;0&quot;]]</span><br><span class="line">Output: 1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: matrix = [[&quot;0&quot;]]</span><br><span class="line">Output: 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>m == matrix.length</code></li>
<li><code>n == matrix[i].length</code></li>
<li><code>1 &lt;= m, n &lt;= 300</code></li>
<li><code>matrix[i][j]</code> is <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code>.</li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><p>好像memo 不會有問題，多此一舉了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maximalSquare</span>(<span class="params">self, matrix: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        memo = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(matrix)):</span><br><span class="line">            memo[(r,<span class="number">0</span>)] = <span class="built_in">int</span>(matrix[r][<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(matrix[<span class="number">0</span>])):</span><br><span class="line">            memo[(<span class="number">0</span>,c)] = <span class="built_in">int</span>(matrix[<span class="number">0</span>][c])</span><br><span class="line">    </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dp</span>(<span class="params">i, j</span>):</span><br><span class="line">            <span class="keyword">if</span>(i, j) <span class="keyword">in</span> memo  :</span><br><span class="line">                <span class="keyword">return</span> memo[(i,j)]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> matrix[i][j] == <span class="string">&quot;0&quot;</span>:</span><br><span class="line">                memo[(i,j)] = <span class="number">0</span></span><br><span class="line">                </span><br><span class="line">            <span class="keyword">elif</span> matrix[i][j] == <span class="string">&quot;1&quot;</span> <span class="keyword">and</span> memo[(i-<span class="number">1</span>,j)] != <span class="number">0</span> <span class="keyword">and</span> memo[(i,j-<span class="number">1</span>)] != <span class="number">0</span>:</span><br><span class="line">                memo[(i,j)] = <span class="built_in">min</span>(memo[(i-<span class="number">1</span>,j)] , memo[(i,j-<span class="number">1</span>)] , memo[(i-<span class="number">1</span>, j-<span class="number">1</span>)] ) + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                memo[(i,j)] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> memo[(i, j)]</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>( <span class="built_in">len</span>(matrix) ):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>( <span class="built_in">len</span>(matrix[<span class="number">0</span>]) ):</span><br><span class="line">                dp(i, j)</span><br><span class="line">                res = <span class="built_in">max</span>(res,memo[(i,j)])</span><br><span class="line">        <span class="keyword">return</span> res*res</span><br></pre></td></tr></table></figure>
<p>Time complixity:</p>
<p>O(m * n)</p>
<h3 id="優化"><a href="#優化" class="headerlink" title="優化"></a><code>優化</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maximalSquare</span>(<span class="params">self, matrix: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> matrix:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        m, n = <span class="built_in">len</span>(matrix), <span class="built_in">len</span>(matrix[<span class="number">0</span>])</span><br><span class="line">				<span class="comment"># 全部填充為0</span></span><br><span class="line">        memo = [[<span class="number">0</span>] * n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">				<span class="comment"># 製作邊界 同時運算res</span></span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            memo[r][<span class="number">0</span>] = <span class="built_in">int</span>(matrix[r][<span class="number">0</span>])</span><br><span class="line">            res = <span class="built_in">max</span>(res, memo[r][<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            memo[<span class="number">0</span>][c] = <span class="built_in">int</span>(matrix[<span class="number">0</span>][c])</span><br><span class="line">            res = <span class="built_in">max</span>(res, memo[<span class="number">0</span>][c])</span><br><span class="line"></span><br><span class="line">				<span class="comment"># 從[1][1]開始</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">int</span>(matrix[i][j]) == <span class="number">1</span>:</span><br><span class="line">                    memo[i][j] = <span class="built_in">min</span>(memo[i-<span class="number">1</span>][j], memo[i][j-<span class="number">1</span>], memo[i-<span class="number">1</span>][j-<span class="number">1</span>]) + <span class="number">1</span></span><br><span class="line">                    res = <span class="built_in">max</span>(res, memo[i][j])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res * res</span><br></pre></td></tr></table></figure>
<p>Time complixity:</p>
<p>O(m * n)</p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>medium</tag>
        <tag>💡</tag>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#212. Word Search II</title>
    <url>/posts/leetcode/Leetcode-212-Word-Search-II/</url>
    <content><![CDATA[<p>簡易<br><a href="../Leetcode-79-Word-Search">leetcode79</a></p>
<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Given an <code>m x n</code> <code>board</code> of characters and a list of strings <code>words</code>, return <em>all words on the board</em>.</p>
<p>Each word must be constructed from letters of sequentially adjacent cells, where <strong>adjacent cells</strong> are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/11/07/search1.jpg"></p>
<p>!<a href="https://assets.leetcode.com/uploads/2020/11/07/search1.jpg">https://assets.leetcode.com/uploads/2020/11/07/search1.jpg</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: board = [[&quot;o&quot;,&quot;a&quot;,&quot;a&quot;,&quot;n&quot;],[&quot;e&quot;,&quot;t&quot;,&quot;a&quot;,&quot;e&quot;],[&quot;i&quot;,&quot;h&quot;,&quot;k&quot;,&quot;r&quot;],[&quot;i&quot;,&quot;f&quot;,&quot;l&quot;,&quot;v&quot;]], words = [&quot;oath&quot;,&quot;pea&quot;,&quot;eat&quot;,&quot;rain&quot;]</span><br><span class="line">Output: [&quot;eat&quot;,&quot;oath&quot;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/11/07/search2.jpg"></p>
<p>!<a href="https://assets.leetcode.com/uploads/2020/11/07/search2.jpg">https://assets.leetcode.com/uploads/2020/11/07/search2.jpg</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: board = [[&quot;a&quot;,&quot;b&quot;],[&quot;c&quot;,&quot;d&quot;]], words = [&quot;abcb&quot;]</span><br><span class="line">Output: []</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>m == board.length</code></li>
<li><code>n == board[i].length</code></li>
<li><code>1 &lt;= m, n &lt;= 12</code></li>
<li><code>board[i][j]</code> is a lowercase English letter.</li>
<li><code>1 &lt;= words.length &lt;= 3 * 10^4</code></li>
<li><code>1 &lt;= words[i].length &lt;= 10</code></li>
<li><code>words[i]</code> consists of lowercase English letters.</li>
<li>All the strings of <code>words</code> are unique.</li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><h2 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a><strong><code>Trie</code></strong></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先建立一個Trie，再用DFS去找</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TrieNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.children = &#123;&#125;</span><br><span class="line">        self.is_word = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.root = TrieNode()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, word</span>):</span><br><span class="line">        node = self.root</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> word:</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> node.children:</span><br><span class="line">                node.children[char] = TrieNode()</span><br><span class="line">            node = node.children[char]</span><br><span class="line">        node.is_word = <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, word</span>):</span><br><span class="line">        node = self.root</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> word:</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> node.children:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            node = node.children[char]</span><br><span class="line">        <span class="keyword">return</span> node.is_word</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">startsWith</span>(<span class="params">self, prefix</span>):</span><br><span class="line">        node = self.root</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> prefix:</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> node.children:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            node = node.children[char]</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findWords</span>(<span class="params">self, board: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]], words: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果board是空的，或是board裡面的row是空的，就直接回傳空的list</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> board <span class="keyword">or</span> <span class="keyword">not</span> board[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 建立一個Trie</span></span><br><span class="line">        trie = Trie()</span><br><span class="line">        <span class="comment"># 把words裡面的word都insert進去</span></span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">            trie.insert(word)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 建立一個res來存答案</span></span><br><span class="line">        res = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 用DFS去找</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i, j, node, path</span>):</span><br><span class="line">            char = board[i][j]</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> node.children:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># node.children[char]是下一個node</span></span><br><span class="line">            next_node = node.children[char]</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 如果next_node是word，就把path + char加進res裡面</span></span><br><span class="line">            <span class="keyword">if</span> next_node.is_word:</span><br><span class="line">                res.append(path + char)</span><br><span class="line">                next_node.is_word = <span class="literal">False</span>  <span class="comment"># 避免重複加入</span></span><br><span class="line"></span><br><span class="line">            board[i][j] = <span class="string">&quot;#&quot;</span>  <span class="comment"># 標記已經走過了</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 用DFS遍地搜尋</span></span><br><span class="line">            <span class="keyword">for</span> x, y <span class="keyword">in</span> [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, -<span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>]]:</span><br><span class="line">                new_i, new_j = i + x, j + y</span><br><span class="line">                <span class="comment"># 如果new_i, new_j在board裡面，就繼續DFS</span></span><br><span class="line">                <span class="keyword">if</span> <span class="number">0</span> &lt;= new_i &lt; <span class="built_in">len</span>(board) <span class="keyword">and</span> <span class="number">0</span> &lt;= new_j &lt; <span class="built_in">len</span>(board[<span class="number">0</span>]):</span><br><span class="line">                    dfs(new_i, new_j, next_node, path + char)</span><br><span class="line"></span><br><span class="line">            board[i][j] = char  <span class="comment"># 回復</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 用DFS去搜尋所有的board</span></span><br><span class="line">        <span class="comment"># 這邊的i, j是board的row, col</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(board)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(board[<span class="number">0</span>])):</span><br><span class="line">                dfs(i, j, trie.root, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<h2 id="易讀版"><a href="#易讀版" class="headerlink" title="易讀版"></a><strong><code>易讀版</code></strong></h2><p>Trie 的  search, startsWith事實上沒有用到，所以可以不用寫</p>
<p>看解答有人多寫一個 <code>removeWord</code>，這樣 is_word 就不用改成 False，更好理解，也會比較快</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TrieNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.children = &#123;&#125;</span><br><span class="line">        self.is_word = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.root = TrieNode()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, word</span>):</span><br><span class="line">        node = self.root</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> word:</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> node.children:</span><br><span class="line">                node.children[char] = TrieNode()</span><br><span class="line">            node = node.children[char]</span><br><span class="line">        node.is_word = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findWords</span>(<span class="params">self, board: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]], words: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        node = Trie()</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">            node.insert(word)</span><br><span class="line">        </span><br><span class="line">        res = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params"> r , c , node , path</span>):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (r &lt; <span class="number">0</span> </span><br><span class="line">            <span class="keyword">or</span> r &gt;= <span class="built_in">len</span>(board) </span><br><span class="line">            <span class="keyword">or</span> c &lt; <span class="number">0</span> </span><br><span class="line">            <span class="keyword">or</span> c &gt;= <span class="built_in">len</span>(board[<span class="number">0</span>]) </span><br><span class="line">            ):</span><br><span class="line">                <span class="keyword">return</span> </span><br><span class="line"></span><br><span class="line">            char = board[r][c]</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> node.children:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> node.children[char].is_word:</span><br><span class="line">                res.append(path + char)</span><br><span class="line">                node.children[char].is_word = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">            board[r][c] = <span class="string">&quot;#&quot;</span></span><br><span class="line"></span><br><span class="line">            dfs( r+<span class="number">1</span> , c , node.children[char] , path + char)</span><br><span class="line">            dfs( r-<span class="number">1</span> , c , node.children[char] , path + char)</span><br><span class="line">            dfs( r , c+<span class="number">1</span> , node.children[char] , path + char)</span><br><span class="line">            dfs( r , c-<span class="number">1</span> , node.children[char] , path + char)</span><br><span class="line">            </span><br><span class="line">            board[r][c] = char</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(board)):</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(board[<span class="number">0</span>])):</span><br><span class="line">                dfs( r , c , node.root , <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">        </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>💡</tag>
        <tag>Array</tag>
        <tag>hard</tag>
        <tag>Matrix</tag>
        <tag>String</tag>
        <tag>Backtracking</tag>
        <tag>Trie</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#224. Basic Calculator</title>
    <url>/posts/leetcode/Leetcode-224-Basic-Calculator/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Given a string <code>s</code> representing a valid expression, implement a basic calculator to evaluate it, and return <em>the result of the evaluation</em>.</p>
<p><strong>Note:</strong> You are <strong>not</strong> allowed to use any built-in function which evaluates strings as mathematical expressions, such as <code>eval()</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;1 + 1&quot;</span><br><span class="line">Output: 2</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s = &quot; 2-1 + 2 &quot;</span><br><span class="line">Output: 3</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;(1+(4+5+2)-3)+(6+8)&quot;</span><br><span class="line">Output: 23</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 3 * 10^5</code></li>
<li><code>s</code> consists of digits, <code>&#39;+&#39;</code>, <code>&#39;-&#39;</code>, <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, and <code>&#39; &#39;</code>.</li>
<li><code>s</code> represents a valid expression.</li>
<li><code>&#39;+&#39;</code> is <strong>not</strong> used as a unary operation (i.e., <code>&quot;+1&quot;</code> and <code>&quot;+(2 + 3)&quot;</code> is invalid).</li>
<li><code>&#39;-&#39;</code> could be used as a unary operation (i.e., <code>&quot;-1&quot;</code> and <code>&quot;-(2 + 3)&quot;</code> is valid).</li>
<li>There will be no two consecutive operators in the input.</li>
<li>Every number and running calculation will fit in a signed 32-bit integer.</li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><p>這題不能用既有的公式，所以就土法煉鋼，將整段刻出來</p>
<p>其中可能有括弧中又有括弧的問題，所以用stack將記錄</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        stack = [] <span class="comment"># 用來放置 括弧的計算</span></span><br><span class="line">        num = <span class="number">0</span></span><br><span class="line">        sign = <span class="number">1</span>  <span class="comment"># 初始化正號</span></span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">				<span class="comment"># 是否為數字</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">is_digit</span>(<span class="params">char</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;0&#x27;</span> &lt;= char &lt;= <span class="string">&#x27;9&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> is_digit(char):</span><br><span class="line">                num = num * <span class="number">10</span> + <span class="built_in">int</span>(char)  <span class="comment"># 最開始是0，當連續讀到數字 num*10 + char</span></span><br><span class="line">            <span class="keyword">elif</span> char == <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                result += sign * num  <span class="comment"># 將當前數字加入結果，根據當前符號加減</span></span><br><span class="line">                num = <span class="number">0</span>  <span class="comment"># 重置數字</span></span><br><span class="line">                sign = <span class="number">1</span>  <span class="comment"># 設置為正號</span></span><br><span class="line">            <span class="keyword">elif</span> char == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                result += sign * num  <span class="comment"># res</span></span><br><span class="line">                num = <span class="number">0</span>  </span><br><span class="line">                sign = -<span class="number">1</span>  </span><br><span class="line"></span><br><span class="line">						<span class="comment"># 括弧的運算，利用 stack儲存括弧前的result</span></span><br><span class="line">						<span class="comment"># 括弧中有括弧也不會有問題</span></span><br><span class="line">            <span class="keyword">elif</span> char == <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">                stack.append((result, sign))  <span class="comment"># 將括弧前的結果 和 前面的符號  放進stack</span></span><br><span class="line">                result = <span class="number">0</span>  </span><br><span class="line">                sign = <span class="number">1</span>  </span><br><span class="line">            <span class="keyword">elif</span> char == <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">                result += sign * num  <span class="comment"># 這是括弧內 # res</span></span><br><span class="line">                num = <span class="number">0</span>  </span><br><span class="line">                prev_result, prev_sign = stack.pop()  <span class="comment"># 取出最後一個放入stack的</span></span><br><span class="line">                result = prev_result + prev_sign * result  <span class="comment"># 使用前一個結果和符號更新當前結果</span></span><br><span class="line"></span><br><span class="line">        result += sign * num  <span class="comment"># 加上最後一個數字</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<p>Time complexity : O(n) <del>雖然好像是廢話 XD</del></p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>hard</tag>
        <tag>Math</tag>
        <tag>String</tag>
        <tag>Stack</tag>
        <tag>Recursion</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#27. Remove Element</title>
    <url>/posts/leetcode/Leetcode-27-Remove-Element/</url>
    <content><![CDATA[<p>#<code>Problem</code><br>Given an integer array <code>nums</code> and an integer <code>val</code>, remove all occurrences of <code>val</code> in <code>nums</code> <strong><a href="https://en.wikipedia.org/wiki/In-place_algorithm">in-place</a></strong>. The order of the elements may be changed. Then return <em>the number of elements in</em> <code>nums</code> <em>which are not equal to</em> <code>val</code>.</p>
<p>Consider the number of elements in <code>nums</code> which are not equal to <code>val</code> be <code>k</code>, to get accepted, you need to do the following things:</p>
<ul>
<li>Change the array <code>nums</code> such that the first <code>k</code> elements of <code>nums</code> contain the elements which are not equal to <code>val</code>. The remaining elements of <code>nums</code> are not important as well as the size of <code>nums</code>.</li>
<li>Return <code>k</code>.</li>
</ul>
<p><strong>Custom Judge:</strong></p>
<p>The judge will test your solution with the following code:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int[] nums = [...]; // Input array</span><br><span class="line">int val = ...; // Value to remove</span><br><span class="line">int[] expectedNums = [...]; // The expected answer with correct length.</span><br><span class="line">                            // It is sorted with no values equaling val.</span><br><span class="line"></span><br><span class="line">int k = removeElement(nums, val); // Calls your implementation</span><br><span class="line"></span><br><span class="line">assert k == expectedNums.length;</span><br><span class="line">sort(nums, 0, k); // Sort the first k elements of nums</span><br><span class="line">for (int i = 0; i &lt; actualLength; i++) &#123;</span><br><span class="line">    assert nums[i] == expectedNums[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>If all assertions pass, then your solution will be <strong>accepted</strong>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [3,2,2,3], val = 3</span><br><span class="line">Output: 2, nums = [2,2,_,_]</span><br><span class="line">Explanation: Your function should return k = 2, with the first two elements of nums being 2.</span><br><span class="line">It does not matter what you leave beyond the returned k (hence they are underscores).</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [0,1,2,2,3,0,4,2], val = 2</span><br><span class="line">Output: 5, nums = [0,1,4,0,3,_,_,_]</span><br><span class="line">Explanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.</span><br><span class="line">Note that the five elements can be returned in any order.</span><br><span class="line">It does not matter what you leave beyond the returned k (hence they are underscores).</span><br></pre></td></tr></table></figure>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeElement</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], val: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> num != val:</span><br><span class="line">                nums[i] = num</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> i</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeElement</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], val: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">while</span> val <span class="keyword">in</span> nums:</span><br><span class="line">            nums.remove(val)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(nums)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>Array</tag>
        <tag>easy</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#23. Merge k Sorted Lists</title>
    <url>/posts/leetcode/Leetcode-23-Merge-k-Sorted-Lists/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>You are given an array of <code>k</code> linked-lists <code>lists</code>, each linked-list is sorted in ascending order.</p>
<p><em>Merge all the linked-lists into one sorted linked-list and return it.</em></p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: lists = [[1,4,5],[1,3,4],[2,6]]</span><br><span class="line">Output: [1,1,2,3,4,4,5,6]</span><br><span class="line">Explanation: The linked-lists are:</span><br><span class="line">[</span><br><span class="line">  1-&gt;4-&gt;5,</span><br><span class="line">  1-&gt;3-&gt;4,</span><br><span class="line">  2-&gt;6</span><br><span class="line">]</span><br><span class="line">merging them into one sorted list:</span><br><span class="line">1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: lists = []</span><br><span class="line">Output: []</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: lists = [[]]</span><br><span class="line">Output: []</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>k == lists.length</code></li>
<li><code>0 &lt;= k &lt;= 104</code></li>
<li><code>0 &lt;= lists[i].length &lt;= 500</code></li>
<li><code>104 &lt;= lists[i][j] &lt;= 104</code></li>
<li><code>lists[i]</code> is sorted in <strong>ascending order</strong>.</li>
<li>The sum of <code>lists[i].length</code> will not exceed <code>104</code>.</li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><p>Leetcode#<strong>148</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mergeKLists</span>(<span class="params">self, lists: <span class="type">List</span>[<span class="type">Optional</span>[ListNode]]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># if lists is empty, return None</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> lists:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># if lists has only one element, return that element</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(lists) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> lists[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># if lists has more than one element, merge them</span></span><br><span class="line">        <span class="comment"># merge the first two lists, and then merge the result with the third list, and so on</span></span><br><span class="line">        <span class="comment"># until all lists are merged</span></span><br><span class="line">        merged_list = lists[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(lists)):</span><br><span class="line">            merged_list = self.mergeTwoLists(merged_list, lists[i])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> merged_list</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mergeTwoLists</span>(<span class="params">self, l1: <span class="type">Optional</span>[ListNode], l2: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        <span class="comment"># if l1 is empty, return l2</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l1:</span><br><span class="line">            <span class="keyword">return</span> l2</span><br><span class="line"></span><br><span class="line">        <span class="comment"># if l2 is empty, return l1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l2:</span><br><span class="line">            <span class="keyword">return</span> l1</span><br><span class="line"></span><br><span class="line">        <span class="comment"># if l1 and l2 are not empty, merge them</span></span><br><span class="line">        <span class="comment"># create a new list to store the merged list</span></span><br><span class="line">        merged_list = ListNode()</span><br><span class="line">        <span class="comment"># create a pointer to traverse the merged list</span></span><br><span class="line">        pointer = merged_list</span><br><span class="line"></span><br><span class="line">        <span class="comment"># while l1 and l2 are not empty, compare the first elements of l1 and l2</span></span><br><span class="line">        <span class="comment"># add the smaller one to the merged list</span></span><br><span class="line">        <span class="comment"># move the pointer to the next element of the merged list</span></span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">and</span> l2:</span><br><span class="line">            <span class="keyword">if</span> l1.val &lt;= l2.val:</span><br><span class="line">                pointer.<span class="built_in">next</span> = l1</span><br><span class="line">                l1 = l1.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pointer.<span class="built_in">next</span> = l2</span><br><span class="line">                l2 = l2.<span class="built_in">next</span></span><br><span class="line">            pointer = pointer.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># if l1 is empty, add the rest of l2 to the merged list</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l1:</span><br><span class="line">            pointer.<span class="built_in">next</span> = l2</span><br><span class="line"></span><br><span class="line">        <span class="comment"># if l2 is empty, add the rest of l1 to the merged list</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l2:</span><br><span class="line">            pointer.<span class="built_in">next</span> = l1</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> merged_list.<span class="built_in">next</span></span><br></pre></td></tr></table></figure>

<p>O(n log k) </p>
<ul>
<li>n 是所有list的長度總和</li>
<li>k 是lists的長度</li>
</ul>
<h2 id="可以過-但速度太慢"><a href="#可以過-但速度太慢" class="headerlink" title="可以過 但速度太慢"></a>可以過 但速度太慢</h2><p><del>原先寫得，但時間複雜度太慘</del></p>
<ul>
<li>這邊的時間複雜度：O(n log k) ???</li>
</ul>
<p>想法是:</p>
<p>將每一個對比合併，但思考後 應該可以用(Leetcode#<strong>148</strong>)的方法<br>先將全部合併，在merge sort 排序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mergeKLists</span>(<span class="params">self, lists: <span class="type">List</span>[<span class="type">Optional</span>[ListNode]]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line"></span><br><span class="line">        min_val = -<span class="number">10</span>**<span class="number">4</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> lists :</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(lists) == <span class="number">1</span> :</span><br><span class="line">            <span class="keyword">return</span> lists[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        h = res = ListNode(min_val)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>( <span class="built_in">len</span>(lists)):</span><br><span class="line">            h = self.merge(h,lists[i])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">self,l1: <span class="type">List</span>[<span class="type">Optional</span>[ListNode]],l2: <span class="type">List</span>[<span class="type">Optional</span>[ListNode]]</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l1:</span><br><span class="line">            <span class="keyword">return</span> l2</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l2:</span><br><span class="line">            <span class="keyword">return</span> l1</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">and</span> l2:</span><br><span class="line">            <span class="keyword">if</span> l1.val &lt; l2.val:</span><br><span class="line">                l1.<span class="built_in">next</span> = self.merge(l1.<span class="built_in">next</span> , l2)</span><br><span class="line">                <span class="keyword">return</span> l1</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                l2.<span class="built_in">next</span> = self.merge(l1 , l2.<span class="built_in">next</span>)</span><br><span class="line">                <span class="keyword">return</span> l2</span><br></pre></td></tr></table></figure>

<p>O(n log k)</p>
<ul>
<li>n 是所有list的長度總和</li>
<li>k 是lists的長度</li>
</ul>
<h2 id="偷吃步O-n-log-n"><a href="#偷吃步O-n-log-n" class="headerlink" title="偷吃步O(n log n)"></a>偷吃步O(n log n)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mergeKLists</span>(<span class="params">self, lists: <span class="type">List</span>[<span class="type">Optional</span>[ListNode]]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># merge all lists into one list</span></span><br><span class="line">        merged_list = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> lists:</span><br><span class="line">            <span class="keyword">while</span> i:</span><br><span class="line">                merged_list.append(i.val)</span><br><span class="line">                i = i.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">           </span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">        <span class="comment"># sort the merged list</span></span><br><span class="line">        a = <span class="built_in">sorted</span>(merged_list,reverse=<span class="literal">True</span>)</span><br><span class="line">        </span><br><span class="line">        final=<span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">            final=ListNode(i,final)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> final</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># merge all lists into one list</span></span><br><span class="line">        merged_list = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> lists:</span><br><span class="line">            <span class="keyword">while</span> i:</span><br><span class="line">                merged_list.append(i.val)</span><br><span class="line">                i = i.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">           </span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">        <span class="comment"># sort the merged list</span></span><br><span class="line">        merged_list.sort()</span><br><span class="line">        <span class="comment"># reverse the merged list</span></span><br><span class="line">        merged_list.reverse()</span><br><span class="line">        </span><br><span class="line">        final=<span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> merged_list:</span><br><span class="line">            final=ListNode(i,final)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> final</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>💡</tag>
        <tag>Linked List</tag>
        <tag>Divide and Conquer</tag>
        <tag>Merge Sort</tag>
        <tag>hard</tag>
        <tag>Heap (Priority Queue)</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#35. Search Insert Position</title>
    <url>/posts/leetcode/Leetcode-35-Search-Insert-Position/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p>
<p>You must write an algorithm with <code>O(log n)</code> runtime complexity.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,3,5,6], target = 5</span><br><span class="line">Output: 2</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,3,5,6], target = 2</span><br><span class="line">Output: 1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,3,5,6], target = 7</span><br><span class="line">Output: 4</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 10^4</code></li>
<li><code>10^4 &lt;= nums[i] &lt;= 10^4</code></li>
<li><code>nums</code> contains <strong>distinct</strong> values sorted in <strong>ascending</strong> order.</li>
<li><code>10^4 &lt;= target &lt;= 10^4</code></li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><h2 id="就使用-二分搜尋演算"><a href="#就使用-二分搜尋演算" class="headerlink" title="就使用 二分搜尋演算"></a>就使用 <strong>二分搜尋演算</strong></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">searchInsert</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        </span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = <span class="built_in">len</span>(nums)-<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            mid = (left + right) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> nums[mid] == target:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            <span class="keyword">elif</span> target &lt; nums[mid]:</span><br><span class="line">                right = mid -<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                left =  mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> left</span><br></pre></td></tr></table></figure>

<p>最後return left為 target 不在nums 裡</p>
<p>所以應該插在 left 這位置</p>
<p>如果要確切找到，就 return false，代表沒有在裏頭</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nums = [<span class="number">2</span> , <span class="number">4</span>]</span><br><span class="line">target = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">left = 0</span></span><br><span class="line"><span class="string">right = 2-1  = 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">iter1</span></span><br><span class="line"><span class="string">	mid = (0+1)//2 = 0</span></span><br><span class="line"><span class="string">	進入 else</span></span><br><span class="line"><span class="string">	left = mid + 1 = 1</span></span><br><span class="line"><span class="string">iter2</span></span><br><span class="line"><span class="string">	mid = (1+1)//2 = 1</span></span><br><span class="line"><span class="string">	target &lt; nums[mid]   3&lt;4</span></span><br><span class="line"><span class="string">	right = mid - 1 = 0</span></span><br><span class="line"><span class="string">iterEND</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">return left</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>💡</tag>
        <tag>Array</tag>
        <tag>easy</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#226. Invert Binary Tree</title>
    <url>/posts/leetcode/Leetcode-226-Invert-Binary-Tree/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Given the <code>root</code> of a binary tree, invert the tree, and return <em>its root</em>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/03/14/invert1-tree.jpg"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = [4,2,7,1,3,6,9]</span><br><span class="line">Output: [4,7,2,9,6,3,1]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/03/14/invert2-tree.jpg"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = [2,1,3]</span><br><span class="line">Output: [2,3,1]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = []</span><br><span class="line">Output: []</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[0, 100]</code>.</li>
<li><code>100 &lt;= Node.val &lt;= 100</code></li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">invertTree</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="type">Optional</span>[TreeNode]:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">invert</span>(<span class="params">node</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            node.left , node.right = node.right , node.left  <span class="comment">#交換</span></span><br><span class="line">						<span class="comment">#如果還有就繼續做</span></span><br><span class="line">            <span class="keyword">if</span> node.left:</span><br><span class="line">                invert(node.left)</span><br><span class="line">            <span class="keyword">if</span> node.right:</span><br><span class="line">                invert(node.right)</span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> invert(root)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
        <tag>💡</tag>
        <tag>easy</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#427. Construct Quad Tree</title>
    <url>/posts/leetcode/Leetcode-427-Construct-Quad-Tree/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Given a <code>n * n</code> matrix <code>grid</code> of <code>0&#39;s</code> and <code>1&#39;s</code> only. We want to represent <code>grid</code> with a Quad-Tree.</p>
<p>Return <em>the root of the Quad-Tree representing</em> <code>grid</code>.</p>
<p>A Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:</p>
<ul>
<li><code>val</code>: True if the node represents a grid of 1’s or False if the node represents a grid of 0’s. Notice that you can assign the <code>val</code> to True or False when <code>isLeaf</code> is False, and both are accepted in the answer.</li>
<li><code>isLeaf</code>: True if the node is a leaf node on the tree or False if the node has four children.</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Node &#123;</span><br><span class="line">    public boolean val;</span><br><span class="line">    public boolean isLeaf;</span><br><span class="line">    public Node topLeft;</span><br><span class="line">    public Node topRight;</span><br><span class="line">    public Node bottomLeft;</span><br><span class="line">    public Node bottomRight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>We can construct a Quad-Tree from a two-dimensional area using the following steps:</p>
<ol>
<li>If the current grid has the same value (i.e all <code>1&#39;s</code> or all <code>0&#39;s</code>) set <code>isLeaf</code> True and set <code>val</code> to the value of the grid and set the four children to Null and stop.</li>
<li>If the current grid has different values, set <code>isLeaf</code> to False and set <code>val</code> to any value and divide the current grid into four sub-grids as shown in the photo.</li>
<li>Recurse for each of the children with the proper sub-grid.</li>
</ol>
<p><img src="https://assets.leetcode.com/uploads/2020/02/11/new_top.png"></p>
<p>If you want to know more about the Quad-Tree, you can refer to the <a href="https://en.wikipedia.org/wiki/Quadtree">wiki</a>.</p>
<p><strong>Quad-Tree format:</strong></p>
<p>You don’t need to read this section for solving the problem. This is only if you want to understand the output format here. The output represents the serialized format of a Quad-Tree using level order traversal, where <code>null</code> signifies a path terminator where no node exists below.</p>
<p>It is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list <code>[isLeaf, val]</code>.</p>
<p>If the value of <code>isLeaf</code> or <code>val</code> is True we represent it as <strong>1</strong> in the list <code>[isLeaf, val]</code> and if the value of <code>isLeaf</code> or <code>val</code> is False we represent it as <strong>0</strong>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/02/11/grid1.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: grid = [[0,1],[1,0]]</span><br><span class="line">Output: [[0,1],[1,0],[1,1],[1,1],[1,0]]</span><br><span class="line">Explanation: The explanation of this example is shown below:</span><br><span class="line">Notice that 0 represnts False and 1 represents True in the photo representing the Quad-Tree.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://assets.leetcode.com/uploads/2020/02/12/e1tree.png"></p>
<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/02/12/e2mat.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: grid = [[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0]]</span><br><span class="line">Output: [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]</span><br><span class="line">Explanation: All values in the grid are not the same. We divide the grid into four sub-grids.</span><br><span class="line">The topLeft, bottomLeft and bottomRight each has the same value.</span><br><span class="line">The topRight have different values so we divide it into 4 sub-grids where each has the same value.</span><br><span class="line">Explanation is shown in the photo below:</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Input: grid = </span><br><span class="line">[[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]]</span><br></pre></td></tr></table></figure>

<p><img src="https://assets.leetcode.com/uploads/2020/02/12/e2tree.png"></p>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># Definition for a QuadTree node.</span></span><br><span class="line"><span class="string">class Node:</span></span><br><span class="line"><span class="string">    def __init__(self, val, isLeaf, topLeft, topRight, bottomLeft, bottomRight):</span></span><br><span class="line"><span class="string">        self.val = val</span></span><br><span class="line"><span class="string">        self.isLeaf = isLeaf</span></span><br><span class="line"><span class="string">        self.topLeft = topLeft</span></span><br><span class="line"><span class="string">        self.topRight = topRight</span></span><br><span class="line"><span class="string">        self.bottomLeft = bottomLeft</span></span><br><span class="line"><span class="string">        self.bottomRight = bottomRight</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">construct</span>(<span class="params">self, grid: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="string">&#x27;Node&#x27;</span>:</span><br><span class="line">		<span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">x, y, l</span>):</span><br><span class="line">            <span class="keyword">if</span> l == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> Node(grid[x][y] == <span class="number">1</span>, <span class="literal">True</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line">            l = l // <span class="number">2</span></span><br><span class="line">            topLeft = dfs(x, y, l)</span><br><span class="line">            topRight = dfs(x, y + l, l)</span><br><span class="line">            bottomLeft = dfs(x + l, y, l)</span><br><span class="line">            bottomRight = dfs(x + l, y + l, l)</span><br><span class="line">            <span class="keyword">if</span> topLeft.isLeaf <span class="keyword">and</span> topRight.isLeaf <span class="keyword">and</span> bottomLeft.isLeaf <span class="keyword">and</span> bottomRight.isLeaf <span class="keyword">and</span> topLeft.val == topRight.val == bottomLeft.val == bottomRight.val:</span><br><span class="line">                <span class="keyword">return</span> Node(topLeft.val, <span class="literal">True</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> Node(<span class="literal">True</span>, <span class="literal">False</span>, topLeft, topRight, bottomLeft, bottomRight)</span><br><span class="line">        <span class="keyword">return</span> dfs(<span class="number">0</span>, <span class="number">0</span>, <span class="built_in">len</span>(grid))</span><br></pre></td></tr></table></figure>

<h3 id="分解"><a href="#分解" class="headerlink" title="分解"></a>分解</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Input: grid = </span><br><span class="line">[[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line"><span class="built_in">len</span>(grid)    <span class="comment"># is the number of rows ， List[List[int]] 有多少個list</span></span><br><span class="line"><span class="comment"># [1,1,1,1,0,0,0,0] 1</span></span><br><span class="line"><span class="comment"># [1,1,1,1,0,0,0,0] 2</span></span><br><span class="line"><span class="comment"># .</span></span><br><span class="line"><span class="comment"># .</span></span><br><span class="line"><span class="comment"># .</span></span><br><span class="line"><span class="comment"># [1,1,1,1,0,0,0,0] 8</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">len</span>(grid[<span class="number">0</span>]) <span class="comment"># is the number of columns ， List[List[int]] 每個list有多少個元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [1,1,1,1,0,0,0,0] 8</span></span><br><span class="line"></span><br><span class="line">node.topLeft = constructTree([row[:n//<span class="number">2</span>] <span class="keyword">for</span> row <span class="keyword">in</span> grid[:n//<span class="number">2</span>]])</span><br><span class="line"><span class="comment"># [row[:n//2] for row in grid[:n//2]]  # 0-3行，0-3列</span></span><br><span class="line"></span><br><span class="line">node.bottomLeft = constructTree([row[:n//<span class="number">2</span>] <span class="keyword">for</span> row <span class="keyword">in</span> grid[n//<span class="number">2</span>:]])</span><br><span class="line"><span class="comment"># [row[:n//2] for row in grid[n//2:]]  # 4-7行，0-3列</span></span><br><span class="line"></span><br><span class="line">node.topRight = constructTree([row[n//<span class="number">2</span>:] <span class="keyword">for</span> row <span class="keyword">in</span> grid[:n//<span class="number">2</span>]])</span><br><span class="line"><span class="comment"># [row[n//2:] for row in grid[:n//2]]  # 0-3行，4-7列</span></span><br><span class="line"></span><br><span class="line">node.bottomRight = constructTree([row[n//<span class="number">2</span>:] <span class="keyword">for</span> row <span class="keyword">in</span> grid[n//<span class="number">2</span>:]])</span><br><span class="line"><span class="comment"># [row[n//2:] for row in grid[n//2:]]  # 4-7行，4-7列</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">grid[:n//<span class="number">2</span>] 是一個切片操作，它取出 grid 列表的前半部分。</span><br><span class="line">row[n//<span class="number">2</span>:]  是一個切片操作，它取出grid 每一 row 列表的後半部分。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">construct</span>(<span class="params">self, grid: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="string">&#x27;Node&#x27;</span>:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. check if the grid is leaf ，all same</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">isLeaf</span>(<span class="params">grid</span>):</span><br><span class="line">            val = grid[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(grid)):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(grid[<span class="number">0</span>])):</span><br><span class="line">                    <span class="keyword">if</span> grid[i][j] != val:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 2. construct the node</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">constructNode</span>(<span class="params">grid</span>):</span><br><span class="line">            node = Node()</span><br><span class="line">            node.isLeaf = isLeaf(grid)</span><br><span class="line">            node.val = grid[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">            node.topLeft = <span class="literal">None</span></span><br><span class="line">            node.topRight = <span class="literal">None</span></span><br><span class="line">            node.bottomLeft = <span class="literal">None</span></span><br><span class="line">            node.bottomRight = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 3. construct the tree</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">constructTree</span>(<span class="params">grid</span>):</span><br><span class="line">            node = constructNode(grid)</span><br><span class="line">            <span class="keyword">if</span> node.isLeaf:</span><br><span class="line">                <span class="keyword">return</span> node</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                n = <span class="built_in">len</span>(grid)</span><br><span class="line">                node.topLeft = constructTree([row[:n//<span class="number">2</span>] <span class="keyword">for</span> row <span class="keyword">in</span> grid[:n//<span class="number">2</span>]]) <span class="comment">#記得要加中括弧</span></span><br><span class="line">                node.topRight = constructTree([row[n//<span class="number">2</span>:] <span class="keyword">for</span> row <span class="keyword">in</span> grid[:n//<span class="number">2</span>]])</span><br><span class="line">                node.bottomLeft = constructTree([row[:n//<span class="number">2</span>] <span class="keyword">for</span> row <span class="keyword">in</span> grid[n//<span class="number">2</span>:]])</span><br><span class="line">                node.bottomRight = constructTree([row[n//<span class="number">2</span>:] <span class="keyword">for</span> row <span class="keyword">in</span> grid[n//<span class="number">2</span>:]])</span><br><span class="line">                <span class="keyword">return</span> node</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> constructTree(grid)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>medium</tag>
        <tag>Tree</tag>
        <tag>💡</tag>
        <tag>Array</tag>
        <tag>Divide and Conquer</tag>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#52. N-Queens II</title>
    <url>/posts/leetcode/Leetcode-52-N-Queens-II/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>The <strong>n-queens</strong> puzzle is the problem of placing <code>n</code> queens on an <code>n x n</code> chessboard such that no two queens attack each other.</p>
<p>Given an integer <code>n</code>, return <em>the number of distinct solutions to the <strong>n-queens puzzle</strong></em>.</p>
<p><strong>Example 1:</strong></p>
<p>![(<a href="https://assets.leetcode.com/uploads/2020/11/13/queens.jpg">https://assets.leetcode.com/uploads/2020/11/13/queens.jpg</a>)</p>
<p>!<a href="https://assets.leetcode.com/uploads/2020/11/13/queens.jpg">https://assets.leetcode.com/uploads/2020/11/13/queens.jpg</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 4</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: There are two distinct solutions to the 4-queens puzzle as shown.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 1</span><br><span class="line">Output: 1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 9</code></li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><h3 id="法1"><a href="#法1" class="headerlink" title="法1"></a><code>法1</code></h3><p>遍歷每一層，要觀察的條件</p>
<p>1.只需檢查當前點以上的垂直行</p>
<p>2.左上斜線</p>
<p>3.右上斜線</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">totalNQueens</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        chessboard = [ [<span class="number">0</span>]*n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">is_valid</span>(<span class="params">row , col</span>):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(row):</span><br><span class="line">                <span class="comment"># 直線</span></span><br><span class="line">                <span class="keyword">if</span> chessboard[r][col] == <span class="string">&#x27;Q&#x27;</span>:</span><br><span class="line">                  <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment"># if abs(row-r) == abs(col - r ) 斜線 </span></span><br><span class="line">                <span class="comment"># 左上斜線</span></span><br><span class="line">                <span class="keyword">if</span> col - (row - r) &gt;= <span class="number">0</span> <span class="keyword">and</span> chessboard[r][col - (row - r)] == <span class="string">&#x27;Q&#x27;</span>  :</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="comment"># 右上斜線 </span></span><br><span class="line">                <span class="keyword">if</span> col + (row - r) &lt; n <span class="keyword">and</span> chessboard[r][col + (row - r)] == <span class="string">&#x27;Q&#x27;</span>  :</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># row 代表層數</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">row</span>):</span><br><span class="line">          <span class="comment"># res 為全域變數</span></span><br><span class="line">            <span class="keyword">nonlocal</span> res</span><br><span class="line">          <span class="comment"># 當row == n (超出範圍)時，代表已經找到一個解</span></span><br><span class="line">            <span class="keyword">if</span> row == n:</span><br><span class="line">                res += <span class="number">1</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">          <span class="comment"># col 做每一層的每一個點</span></span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                <span class="keyword">if</span> is_valid(row , col):</span><br><span class="line">                    chessboard[row][col] = <span class="string">&#x27;Q&#x27;</span></span><br><span class="line">                    <span class="comment"># 繼續往下一層走</span></span><br><span class="line">                    dfs(row + <span class="number">1</span>)</span><br><span class="line">                    chessboard[row][col] = <span class="number">0</span></span><br><span class="line">          </span><br><span class="line">        dfs(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">現在才知道</span><br><span class="line">      <span class="keyword">if</span> col + (row - r) &lt; n <span class="keyword">and</span> chessboard[r][col + (row - r)] == <span class="string">&#x27;Q&#x27;</span>  :</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">      <span class="keyword">if</span>  chessboard[r][col + (row - r)] == <span class="string">&#x27;Q&#x27;</span> <span class="keyword">and</span> col + (row - r) &lt; n   :</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">有差</span><br><span class="line">上方的的因為前辦已經false，所以不會跑超出範圍的</span><br><span class="line">下方的可以因為超出範圍 先error，而不會達到想要的結果</span><br></pre></td></tr></table></figure>

<h3 id="法2、網路上快速解"><a href="#法2、網路上快速解" class="headerlink" title="法2、網路上快速解"></a><code>法2、網路上快速解</code></h3><p>利用 <code>主對角線</code>、<code>副對角線</code>性質，用來判斷是否有斜線</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">0</span>, <span class="number">0</span>)   (<span class="number">0</span>, <span class="number">1</span>)   (<span class="number">0</span>, <span class="number">2</span>)   (<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="number">0</span>)   (<span class="number">1</span>, <span class="number">1</span>)   (<span class="number">1</span>, <span class="number">2</span>)   (<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="number">0</span>)   (<span class="number">2</span>, <span class="number">1</span>)   (<span class="number">2</span>, <span class="number">2</span>)   (<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="number">0</span>)   (<span class="number">3</span>, <span class="number">1</span>)   (<span class="number">3</span>, <span class="number">2</span>)   (<span class="number">3</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>主對角線上 <code>row + col</code> 都為同一個值</p>
<p>副對角線上 col - row 也會是同一個值，但為了避免負數 改為 <code>col - row + n - 1</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">totalNQueens</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    ans = <span class="number">0</span>  <span class="comment"># 用來儲存符合條件的解的總數</span></span><br><span class="line">    cols = [<span class="literal">False</span>] * n  <span class="comment"># 用來記錄每一列是否已經有皇后存在</span></span><br><span class="line">    diag1 = [<span class="literal">False</span>] * (<span class="number">2</span> * n - <span class="number">1</span>)  <span class="comment"># 主對角線</span></span><br><span class="line">    diag2 = [<span class="literal">False</span>] * (<span class="number">2</span> * n - <span class="number">1</span>)  <span class="comment"># 副對角線</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">      <span class="keyword">nonlocal</span> ans</span><br><span class="line">      <span class="keyword">if</span> i == n:  <span class="comment"># 如果已經檢查完所有行，找到了一個符合條件的解</span></span><br><span class="line">        ans += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):  <span class="comment"># 嘗試在當前行的每一個列上放置皇后</span></span><br><span class="line">				<span class="comment">#</span></span><br><span class="line">        <span class="keyword">if</span> cols[j] <span class="keyword">or</span> diag1[i + j] <span class="keyword">or</span> diag2[j - i + n - <span class="number">1</span>]:</span><br><span class="line">          <span class="keyword">continue</span>  <span class="comment"># 如果該列或對角線已經有皇后存在，則跳過</span></span><br><span class="line">        cols[j] = diag1[i + j] = diag2[j - i + n - <span class="number">1</span>] = <span class="literal">True</span>  <span class="comment"># 放置皇后，並更新對應的記錄</span></span><br><span class="line">        dfs(i + <span class="number">1</span>)  <span class="comment"># 遞歸處理下一行</span></span><br><span class="line">        cols[j] = diag1[i + j] = diag2[j - i + n - <span class="number">1</span>] = <span class="literal">False</span>  <span class="comment"># 回溯，移除皇后，恢復記錄</span></span><br><span class="line"></span><br><span class="line">    dfs(<span class="number">0</span>)  <span class="comment"># 從第一行開始進行遞歸遍歷</span></span><br><span class="line">    <span class="keyword">return</span> ans  <span class="comment"># 返回總的解數量</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>💡</tag>
        <tag>hard</tag>
        <tag>Backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#530. Minimum Absolute Difference in BST</title>
    <url>/posts/leetcode/Leetcode-530-Minimum-Absolute-Difference-in-BST/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Given the <code>root</code> of a Binary Search Tree (BST), return <em>the minimum absolute difference between the values of any two different nodes in the tree</em>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/02/05/bst1.jpg"></p>
<p>!<a href="https://assets.leetcode.com/uploads/2021/02/05/bst1.jpg">https://assets.leetcode.com/uploads/2021/02/05/bst1.jpg</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = [4,2,6,1,3]</span><br><span class="line">Output: 1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/02/05/bst2.jpg"></p>
<p>!<a href="https://assets.leetcode.com/uploads/2021/02/05/bst2.jpg">https://assets.leetcode.com/uploads/2021/02/05/bst2.jpg</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = [1,0,48,null,null,12,49]</span><br><span class="line">Output: 1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[2, 10^4]</code>.</li>
<li><code>0 &lt;= Node.val &lt;= 10^5</code></li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><h3 id="法一"><a href="#法一" class="headerlink" title="法一"></a><code>法一</code></h3><p>由於有<code>有序</code>性質、且<code>正整數</code></p>
<p>遍歷一遍，後項減前項，找出最小即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">				<span class="comment">#結果先放入無限大，後面比對方便</span></span><br><span class="line">        self.res = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">        self.pre = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getMinimumDifference</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        self.order_traversal(root)</span><br><span class="line">        <span class="keyword">return</span> self.res</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 先從最左邊開始，一路往右邊走</span></span><br><span class="line">    <span class="comment"># self.pre 紀錄前一個節點，當root.left為None時，self.pre = root.val</span></span><br><span class="line">    <span class="comment"># 所以在root.right時，self.pre 剛好是他的父節點</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">order_traversal</span>(<span class="params">self, root</span>):</span><br><span class="line">        <span class="comment"># root為None時，返回</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># dfs 先往左邊走</span></span><br><span class="line">        self.order_traversal(root.left)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 計算結果</span></span><br><span class="line">        <span class="keyword">if</span> self.pre <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.res = <span class="built_in">min</span>(self.res, root.val - self.pre)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 紀錄前一個節點</span></span><br><span class="line">        self.pre = root.val</span><br><span class="line"></span><br><span class="line">        <span class="comment"># dfs 往右邊走</span></span><br><span class="line">        self.order_traversal(root.right)</span><br></pre></td></tr></table></figure>

<h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a><code>Note</code></h3><p>BST 若為有序</p>
<p>遍歷的順序為 </p>
<p>1              2               3               4               5               6               7</p>
<p>root.left.left → root.left → root.left.right → root → root.right.left → root.right → root.right.right</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">    <span class="number">4</span></span><br><span class="line">   / \</span><br><span class="line">  <span class="number">2</span>   <span class="number">6</span></span><br><span class="line"> / \ / \</span><br><span class="line"><span class="number">1</span>  <span class="number">3</span> <span class="number">5</span>  <span class="number">7</span></span><br></pre></td></tr></table></figure>

<p>down-top 的走法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">down_top</span>(<span class="params">root</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    down_top(root.left)</span><br><span class="line">    down_top(root.right)</span><br><span class="line">    <span class="built_in">print</span>(root.val)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
        <tag>💡</tag>
        <tag>easy</tag>
        <tag>Binary Search Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#62. Unique Paths</title>
    <url>/posts/leetcode/Leetcode-62-Unique-Paths/</url>
    <content><![CDATA[<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> [Leetcode]</span><br><span class="line"><span class="bullet">-</span> [Python]</span><br><span class="line"><span class="bullet">-</span> [medium]</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> [💡]</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> Math</span><br><span class="line"><span class="bullet">-</span> Dynamic Programming</span><br><span class="line"><span class="bullet">-</span> Combinatorics</span><br><span class="line"></span><br><span class="line">cover: /img/cover/leetcode.jpg</span><br><span class="line">categories: Leetcode</span><br></pre></td></tr></table></figure>

<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>There is a robot on an <code>m x n</code> grid. The robot is initially located at the <strong>top-left corner</strong> (i.e., <code>grid[0][0]</code>). The robot tries to move to the <strong>bottom-right corner</strong> (i.e., <code>grid[m - 1][n - 1]</code>). The robot can only move either down or right at any point in time.</p>
<p>Given the two integers <code>m</code> and <code>n</code>, return <em>the number of possible unique paths that the robot can take to reach the bottom-right corner</em>.</p>
<p>The test cases are generated so that the answer will be less than or equal to <code>2 * 109</code>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2018/10/22/robot_maze.png"></p>
<p>!<a href="https://assets.leetcode.com/uploads/2018/10/22/robot_maze.png">https://assets.leetcode.com/uploads/2018/10/22/robot_maze.png</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: m = 3, n = 7</span><br><span class="line">Output: 28</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: m = 3, n = 2</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:</span><br><span class="line">1. Right -&gt; Down -&gt; Down</span><br><span class="line">2. Down -&gt; Down -&gt; Right</span><br><span class="line">3. Down -&gt; Right -&gt; Down</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= m, n &lt;= 100</code></li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><table>
<thead>
<tr>
<th>x-1 ,  y-1</th>
<th>x ,  y-1</th>
</tr>
</thead>
<tbody><tr>
<td>x-1   ,    y</td>
<td>x   ,   y</td>
</tr>
</tbody></table>
<p>應該是國中數學吧</p>
<p>右下角的為，上方 + 左邊 的方法次數</p>
<h2 id="使用dp，memo"><a href="#使用dp，memo" class="headerlink" title="使用dp，memo"></a><code>使用dp，memo</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">uniquePaths</span>(<span class="params">self, m: <span class="built_in">int</span>, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        dp = &#123;&#125;</span><br><span class="line">        </span><br><span class="line">        dp[(<span class="number">0</span>,<span class="number">0</span>)] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            dp[(i,<span class="number">0</span>)] = <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            dp[(<span class="number">0</span>,j)] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n):</span><br><span class="line">                dp[(i,j)] = dp[(i-<span class="number">1</span>,j)] + dp[(i,j-<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[(m-<span class="number">1</span>,n-<span class="number">1</span>)]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>medium</tag>
        <tag>💡</tag>
        <tag>Dynamic Programming</tag>
        <tag>Math</tag>
        <tag>Combinatorics</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#67. Add Binary</title>
    <url>/posts/leetcode/Leetcode-67-Add-Binary/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Given two binary strings <code>a</code> and <code>b</code>, return <em>their sum as a binary string</em>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: a = &quot;11&quot;, b = &quot;1&quot;</span><br><span class="line">Output: &quot;100&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: a = &quot;1010&quot;, b = &quot;1011&quot;</span><br><span class="line">Output: &quot;10101&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= a.length, b.length &lt;= 10^4</code></li>
<li><code>a</code> and <code>b</code> consist only of <code>&#39;0&#39;</code> or <code>&#39;1&#39;</code> characters.</li>
<li>Each string does not contain leading zeros except for the zero itself.</li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addBinary</span>(<span class="params">self, a: <span class="built_in">str</span>, b: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">      <span class="comment"># s 用來存放結果 ，因為是用append(從後面加) 最後要用reversed</span></span><br><span class="line">      s = []</span><br><span class="line">      <span class="comment"># carry 存放進位</span></span><br><span class="line">      carry = <span class="number">0</span></span><br><span class="line">      i = <span class="built_in">len</span>(a) - <span class="number">1</span></span><br><span class="line">      j = <span class="built_in">len</span>(b) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 運算式</span></span><br><span class="line">      <span class="comment"># 不會動到原先的a,b</span></span><br><span class="line">      <span class="comment"># i  j 為處理的位置</span></span><br><span class="line">      <span class="keyword">while</span> i &gt;= <span class="number">0</span> <span class="keyword">or</span> j &gt;= <span class="number">0</span> <span class="keyword">or</span> carry:</span><br><span class="line">        total = carry</span><br><span class="line">        <span class="keyword">if</span> i &gt;= <span class="number">0</span>:</span><br><span class="line">          total += <span class="built_in">int</span>(a[i])</span><br><span class="line">          i -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> j &gt;= <span class="number">0</span>:</span><br><span class="line">          total += <span class="built_in">int</span>(b[j])</span><br><span class="line">          j -= <span class="number">1</span></span><br><span class="line">        s.append(<span class="built_in">str</span>(total % <span class="number">2</span>))</span><br><span class="line">        carry = total // <span class="number">2</span></span><br><span class="line">        </span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">reversed</span>(s))</span><br></pre></td></tr></table></figure>

<p>稍做修改</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addBinary</span>(<span class="params">self, a: <span class="built_in">str</span>, b: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">      s = <span class="string">&quot;&quot;</span></span><br><span class="line">      carry = <span class="number">0</span></span><br><span class="line">      i = <span class="built_in">len</span>(a) - <span class="number">1</span></span><br><span class="line">      j = <span class="built_in">len</span>(b) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> i &gt;= <span class="number">0</span> <span class="keyword">or</span> j &gt;= <span class="number">0</span> <span class="keyword">or</span> carry:</span><br><span class="line">        total = carry</span><br><span class="line">        <span class="keyword">if</span> i &gt;= <span class="number">0</span>:</span><br><span class="line">          total += <span class="built_in">int</span>(a[i])</span><br><span class="line">          i -= <span class="number">1</span> </span><br><span class="line">        <span class="keyword">if</span> j &gt;= <span class="number">0</span>:</span><br><span class="line">          total += <span class="built_in">int</span>(b[j])</span><br><span class="line">          j -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        s += (<span class="built_in">str</span>(total % <span class="number">2</span>))</span><br><span class="line">        carry = total // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">      <span class="keyword">return</span> s[::-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>


<h2 id="偷吃步"><a href="#偷吃步" class="headerlink" title="偷吃步"></a><code>偷吃步</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addBinary</span>(<span class="params">self, a: <span class="built_in">str</span>, b: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        x=<span class="built_in">int</span>(a,<span class="number">2</span>)</span><br><span class="line">        y=<span class="built_in">int</span>(b,<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bin</span>(x+y)[<span class="number">2</span>:]</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>💡</tag>
        <tag>easy</tag>
        <tag>Math</tag>
        <tag>Bit Manipulation</tag>
        <tag>String</tag>
        <tag>Simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#87. Scramble String</title>
    <url>/posts/leetcode/Leetcode-87-Scramble-String/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>We can scramble a string s to get a string t using the following algorithm:</p>
<ol>
<li>If the length of the string is 1, stop.</li>
<li>If the length of the string is &gt; 1, do the following:<ul>
<li>Split the string into two non-empty substrings at a random index, i.e., if the string is <code>s</code>, divide it to <code>x</code> and <code>y</code> where <code>s = x + y</code>.</li>
<li><strong>Randomly</strong> decide to swap the two substrings or to keep them in the same order. i.e., after this step, <code>s</code> may become <code>s = x + y</code> or <code>s = y + x</code>.</li>
<li>Apply step 1 recursively on each of the two substrings <code>x</code> and <code>y</code>.</li>
</ul>
</li>
</ol>
<p>Given two strings <code>s1</code> and <code>s2</code> of <strong>the same length</strong>, return <code>true</code> if <code>s2</code> is a scrambled string of <code>s1</code>, otherwise, return <code>false</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s1 = &quot;great&quot;, s2 = &quot;rgeat&quot;</span><br><span class="line">Output: true</span><br><span class="line">Explanation: One possible scenario applied on s1 is:</span><br><span class="line">&quot;great&quot; --&gt; &quot;gr/eat&quot; // divide at random index.</span><br><span class="line">&quot;gr/eat&quot; --&gt; &quot;gr/eat&quot; // random decision is not to swap the two substrings and keep them in order.</span><br><span class="line">&quot;gr/eat&quot; --&gt; &quot;g/r / e/at&quot; // apply the same algorithm recursively on both substrings. divide at random index each of them.</span><br><span class="line">&quot;g/r / e/at&quot; --&gt; &quot;r/g / e/at&quot; // random decision was to swap the first substring and to keep the second substring in the same order.</span><br><span class="line">&quot;r/g / e/at&quot; --&gt; &quot;r/g / e/ a/t&quot; // again apply the algorithm recursively, divide &quot;at&quot; to &quot;a/t&quot;.</span><br><span class="line">&quot;r/g / e/ a/t&quot; --&gt; &quot;r/g / e/ a/t&quot; // random decision is to keep both substrings in the same order.</span><br><span class="line">The algorithm stops now, and the result string is &quot;rgeat&quot; which is s2.</span><br><span class="line">As one possible scenario led s1 to be scrambled to s2, we return true.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s1 = &quot;abcde&quot;, s2 = &quot;caebd&quot;</span><br><span class="line">Output: false</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s1 = &quot;a&quot;, s2 = &quot;a&quot;</span><br><span class="line">Output: true</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>s1.length == s2.length</code></li>
<li><code>1 &lt;= s1.length &lt;= 30</code></li>
<li><code>s1</code> and <code>s2</code> consist of lowercase English letters.</li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><p>題目簡單解釋，str分割可以得到  x1 + y1  ，可以互換，若能互換後相同就為scrambled</p>
<p><del>當初看超久</del></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    rgeat</span><br><span class="line">   /    \</span><br><span class="line">  rg    eat</span><br><span class="line"> / \    /  \</span><br><span class="line">r   g  e   at</span><br><span class="line">           / \</span><br><span class="line">          a   t</span><br><span class="line"></span><br><span class="line">    great</span><br><span class="line">    /  \</span><br><span class="line">  gr    eat</span><br><span class="line"> / \    /  \</span><br><span class="line">g  r   e    at</span><br><span class="line">           /  \</span><br><span class="line">         a     t</span><br></pre></td></tr></table></figure>

<p>前面gr 與 rg 為scrambled ， eat當然就一樣</p>
<p>所以也能延伸</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">    greta</span><br><span class="line">   /     \</span><br><span class="line">  gr      eta</span><br><span class="line"> /  \    /   \</span><br><span class="line">g   r   e    ta</span><br><span class="line">           /    \</span><br><span class="line">          t      a</span><br></pre></td></tr></table></figure>

<p>at &amp;  ta ⇒ <code>True</code> ( scrambled )   →  eat  &amp;  ate  ⇒ <code>True</code></p>
<p>→  great  &amp;    grate    ⇒   <code>True</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">     abb</span><br><span class="line">    /   \</span><br><span class="line">  ab      b</span><br><span class="line"> /  \</span><br><span class="line">a    b</span><br><span class="line"></span><br><span class="line">   bba</span><br><span class="line">  /   \</span><br><span class="line">b     ba</span><br><span class="line">      /  \</span><br><span class="line">     b    a</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bab</span><br><span class="line">   /   \</span><br><span class="line">  b     ab</span><br><span class="line">       /  \</span><br><span class="line">      a    b</span><br></pre></td></tr></table></figure>

<p>這種情況也是    abb &amp; bba  ⇒<code>True</code></p>
<p>由於 abb  &amp;   bab   ⇒  <code>True</code>   第一層互換</p>
<p>ab  &amp;  ba  ⇒ <code>True</code>     → abb  &amp;  bba  ⇒  <code>True</code></p>
<h2 id="可以但超過時間"><a href="#可以但超過時間" class="headerlink" title="可以但超過時間"></a><code>可以但超過時間</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 類似用遞迴窮舉</span></span><br><span class="line"><span class="comment"># 但會超過時間</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isScramble</span>(<span class="params">self, s1: <span class="built_in">str</span>, s2: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(s1)!=<span class="built_in">len</span>(s2):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> s1==s2:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        n = <span class="built_in">len</span>(s1)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(s1)):</span><br><span class="line">            <span class="keyword">if</span> self.isScramble(s1[:i],s2[:i]) <span class="keyword">and</span> self.isScramble(s1[i:],s2[i:]):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> self.isScramble(s1[:i] , s2[n-i:]) <span class="keyword">and</span> self.isScramble(s1[i:] , s2[:n-i]):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h2 id="借鏡別人的"><a href="#借鏡別人的" class="headerlink" title="借鏡別人的"></a><code>借鏡別人的</code></h2><p>做一個儲存庫</p>
<p>這樣不用每次都從新跑</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isScramble</span>(<span class="params">self, s1: <span class="built_in">str</span>, s2: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># memoization: (s1, s2) -&gt; bool ，表示 s1 和 s2 是否 scramble</span></span><br><span class="line">        memo = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">s1, s2</span>):</span><br><span class="line">            <span class="comment"># 先判斷是否已經計算過</span></span><br><span class="line">            <span class="keyword">if</span> (s1, s2) <span class="keyword">in</span> memo:</span><br><span class="line">                <span class="keyword">return</span> memo[(s1, s2)]</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 長度不同 或者 字母不同，則不可能 scramble</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(s1) != <span class="built_in">len</span>(s2) <span class="keyword">or</span> <span class="built_in">sorted</span>(s1) != <span class="built_in">sorted</span>(s2):</span><br><span class="line">                <span class="comment"># 記錄結果</span></span><br><span class="line">                memo[(s1, s2)] = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 一樣的字母，則為 True</span></span><br><span class="line">            <span class="keyword">if</span> s1 == s2:</span><br><span class="line">                <span class="comment"># 記錄結果</span></span><br><span class="line">                memo[(s1, s2)] = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">            n = <span class="built_in">len</span>(s1)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">                <span class="comment"># 不交換的情況  or 交換的情況</span></span><br><span class="line">                <span class="keyword">if</span> (helper(s1[:i], s2[:i]) <span class="keyword">and</span> helper(s1[i:], s2[i:])) <span class="keyword">or</span> (helper(s1[:i], s2[n-i:]) <span class="keyword">and</span> helper(s1[i:], s2[:n-i])):</span><br><span class="line">                    <span class="comment"># 記錄結果</span></span><br><span class="line">                    memo[(s1, s2)] = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                </span><br><span class="line">            <span class="comment"># 記錄結果</span></span><br><span class="line">            memo[(s1, s2)] = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> helper(s1, s2)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">great  &amp;  rgeta</span><br><span class="line"></span><br><span class="line">memo = &#123;</span><br><span class="line">    (<span class="string">&quot;g&quot;</span>, <span class="string">&quot;r&quot;</span>): <span class="literal">False</span>,</span><br><span class="line">    (<span class="string">&quot;r&quot;</span>, <span class="string">&quot;g&quot;</span>): <span class="literal">False</span>,</span><br><span class="line">    (<span class="string">&quot;gr&quot;</span>, <span class="string">&quot;rg&quot;</span>): <span class="literal">True</span>,</span><br><span class="line">    (<span class="string">&quot;rg&quot;</span>, <span class="string">&quot;gr&quot;</span>): <span class="literal">True</span>,</span><br><span class="line">    (<span class="string">&quot;g&quot;</span>, <span class="string">&quot;e&quot;</span>): <span class="literal">False</span>,</span><br><span class="line">    (<span class="string">&quot;e&quot;</span>, <span class="string">&quot;g&quot;</span>): <span class="literal">False</span>,</span><br><span class="line">    (<span class="string">&quot;gr&quot;</span>, <span class="string">&quot;at&quot;</span>): <span class="literal">True</span>,</span><br><span class="line">    (<span class="string">&quot;at&quot;</span>, <span class="string">&quot;gr&quot;</span>): <span class="literal">True</span>,</span><br><span class="line">    (<span class="string">&quot;rg&quot;</span>, <span class="string">&quot;ea&quot;</span>): <span class="literal">True</span>,</span><br><span class="line">    (<span class="string">&quot;ea&quot;</span>, <span class="string">&quot;rg&quot;</span>): <span class="literal">True</span>,</span><br><span class="line">    (<span class="string">&quot;g&quot;</span>, <span class="string">&quot;at&quot;</span>): <span class="literal">False</span>,</span><br><span class="line">    (<span class="string">&quot;at&quot;</span>, <span class="string">&quot;g&quot;</span>): <span class="literal">False</span>,</span><br><span class="line">    (<span class="string">&quot;gr&quot;</span>, <span class="string">&quot;eat&quot;</span>): <span class="literal">True</span>,</span><br><span class="line">    (<span class="string">&quot;eat&quot;</span>, <span class="string">&quot;gr&quot;</span>): <span class="literal">True</span>,</span><br><span class="line">    (<span class="string">&quot;rg&quot;</span>, <span class="string">&quot;eat&quot;</span>): <span class="literal">True</span>,</span><br><span class="line">    (<span class="string">&quot;eat&quot;</span>, <span class="string">&quot;rg&quot;</span>): <span class="literal">True</span>,</span><br><span class="line">    (<span class="string">&quot;g&quot;</span>, <span class="string">&quot;rge&quot;</span>): <span class="literal">False</span>,</span><br><span class="line">    (<span class="string">&quot;rge&quot;</span>, <span class="string">&quot;g&quot;</span>): <span class="literal">False</span>,</span><br><span class="line">    (<span class="string">&quot;gr&quot;</span>, <span class="string">&quot;ge&quot;</span>): <span class="literal">False</span>,</span><br><span class="line">    (<span class="string">&quot;ge&quot;</span>, <span class="string">&quot;gr&quot;</span>): <span class="literal">False</span>,</span><br><span class="line">    (<span class="string">&quot;g&quot;</span>, <span class="string">&quot;eat&quot;</span>): <span class="literal">False</span>,</span><br><span class="line">    (<span class="string">&quot;eat&quot;</span>, <span class="string">&quot;g&quot;</span>): <span class="literal">False</span>,</span><br><span class="line">    (<span class="string">&quot;gr&quot;</span>, <span class="string">&quot;reat&quot;</span>): <span class="literal">False</span>,</span><br><span class="line">    (<span class="string">&quot;reat&quot;</span>, <span class="string">&quot;gr&quot;</span>): <span class="literal">False</span>,</span><br><span class="line">    (<span class="string">&quot;rg&quot;</span>, <span class="string">&quot;eat&quot;</span>): <span class="literal">True</span>,</span><br><span class="line">    (<span class="string">&quot;eat&quot;</span>, <span class="string">&quot;rg&quot;</span>): <span class="literal">True</span>,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="目前看到的最佳解之一"><a href="#目前看到的最佳解之一" class="headerlink" title="目前看到的最佳解之一"></a><code>目前看到的最佳解之一</code></h2><p>使用的Memory更少</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isScramble</span>(<span class="params">self,s1, s2</span>):</span><br><span class="line">        m =&#123;&#125;</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">s1, s2</span>):</span><br><span class="line">            <span class="keyword">if</span> (s1, s2) <span class="keyword">in</span> m:</span><br><span class="line">                <span class="keyword">return</span> m[(s1, s2)]</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">sorted</span>(s1) == <span class="built_in">sorted</span>(s2):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(s1) == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(s1)):</span><br><span class="line">                <span class="keyword">if</span> func(s1[:i], s2[-i:]) <span class="keyword">and</span> func(s1[i:], s2[:-i]) <span class="keyword">or</span> func(s1[:i], s2[:i]) <span class="keyword">and</span> func(s1[i:], s2[i:]):</span><br><span class="line">                    m[(s1, s2)] = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            m[(s1, s2)] = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> func(s1, s2)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>💡</tag>
        <tag>Dynamic Programming</tag>
        <tag>hard</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#79. Word Search</title>
    <url>/posts/leetcode/Leetcode-79-Word-Search/</url>
    <content><![CDATA[<p>進階<br><a href="../Leetcode-212-Word-Search-II.md">leetcode212</a></p>
<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Given an <code>m x n</code> grid of characters <code>board</code> and a string <code>word</code>, return <code>true</code> <em>if</em> <code>word</code> <em>exists in the grid</em>.</p>
<p>The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/11/04/word2.jpg"></p>
<p>!<a href="https://assets.leetcode.com/uploads/2020/11/04/word2.jpg">https://assets.leetcode.com/uploads/2020/11/04/word2.jpg</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: board = [[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;E&quot;],[&quot;S&quot;,&quot;F&quot;,&quot;C&quot;,&quot;S&quot;],[&quot;A&quot;,&quot;D&quot;,&quot;E&quot;,&quot;E&quot;]], word = &quot;ABCCED&quot;</span><br><span class="line">Output: true</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/11/04/word-1.jpg"></p>
<p>!<a href="https://assets.leetcode.com/uploads/2020/11/04/word-1.jpg">https://assets.leetcode.com/uploads/2020/11/04/word-1.jpg</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: board = [[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;E&quot;],[&quot;S&quot;,&quot;F&quot;,&quot;C&quot;,&quot;S&quot;],[&quot;A&quot;,&quot;D&quot;,&quot;E&quot;,&quot;E&quot;]], word = &quot;SEE&quot;</span><br><span class="line">Output: true</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/10/15/word3.jpg"></p>
<p>!<a href="https://assets.leetcode.com/uploads/2020/10/15/word3.jpg">https://assets.leetcode.com/uploads/2020/10/15/word3.jpg</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: board = [[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;E&quot;],[&quot;S&quot;,&quot;F&quot;,&quot;C&quot;,&quot;S&quot;],[&quot;A&quot;,&quot;D&quot;,&quot;E&quot;,&quot;E&quot;]], word = &quot;ABCB&quot;</span><br><span class="line">Output: false</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>m == board.length</code></li>
<li><code>n = board[i].length</code></li>
<li><code>1 &lt;= m, n &lt;= 6</code></li>
<li><code>1 &lt;= word.length &lt;= 15</code></li>
<li><code>board</code> and <code>word</code> consists of only lowercase and uppercase English letters.</li>
</ul>
<p><strong>Follow up:</strong> Could you use search pruning to make your solution faster with a larger <code>board</code>?</p>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><p>先全部搜索，當找到第一個字母時，再開始跑 DFS</p>
<p>DFS的概念，</p>
<p>1.判斷是否找到了，如果找到了，就回傳True</p>
<p>2.判斷是否超出邊界，或是word的第一個字母不等於board[i][j]時，代表找不到，回傳False</p>
<p>3.把board[i][j]標記為 #，代表已經走過了</p>
<p>4.往上下左右四個方向走，並且word往後一個字母</p>
<p>5.把board[i][j]還原</p>
<p>6.回傳結果</p>
<p>backtracking 的觀念，當發現走不下去時，就把標記還原，然後往另一個方向走</p>
<p>老鼠走迷宮的概念</p>
<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">exist</span>(<span class="params">self, board: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]], word: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="comment"># DFS approach</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">board, i, j, word</span>):</span><br><span class="line">            <span class="comment"># 當word長度為0時，代表已經找到了</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(word) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 當i,j超出邊界，或是word的第一個字母不等於board[i][j]時，代表找不到</span></span><br><span class="line">            <span class="keyword">if</span>( i &lt; <span class="number">0</span> <span class="keyword">or</span> i &gt;= <span class="built_in">len</span>(board) <span class="keyword">or</span> <span class="comment"># row</span></span><br><span class="line">                 j &lt; <span class="number">0</span> <span class="keyword">or</span> j &gt;= <span class="built_in">len</span>(board[<span class="number">0</span>]) <span class="keyword">or</span> <span class="comment"># column</span></span><br><span class="line">                 word[<span class="number">0</span>] != board[i][j]): <span class="comment"># word</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># temp用來記錄board[i][j]的值，因為之後會被改變 </span></span><br><span class="line">            temp = board[i][j]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># board[i][j] = #，代表已經走過了</span></span><br><span class="line">            board[i][j] = <span class="string">&#x27;#&#x27;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 往上下左右四個方向走，並且word往後一個字母</span></span><br><span class="line">            <span class="comment"># 這邊的board 會有 # 的情況，所以不用擔心會走回頭路</span></span><br><span class="line">            res = (dfs(board, i + <span class="number">1</span>, j, word[<span class="number">1</span>:]) <span class="keyword">or</span> </span><br><span class="line">                    dfs(board, i - <span class="number">1</span>, j, word[<span class="number">1</span>:]) <span class="keyword">or</span> </span><br><span class="line">                    dfs(board, i, j + <span class="number">1</span>, word[<span class="number">1</span>:]) <span class="keyword">or</span> </span><br><span class="line">                    dfs(board, i, j - <span class="number">1</span>, word[<span class="number">1</span>:]) )</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 把board[i][j]還原</span></span><br><span class="line">            board[i][j] = temp</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 全部都走過一遍</span></span><br><span class="line">        <span class="comment"># 這邊的i,j是用來找起點的</span></span><br><span class="line">        <span class="comment"># 通常board[i][j] != word[0]，所以不會進入dfs</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(board)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(board[<span class="number">0</span>])):</span><br><span class="line">                <span class="keyword">if</span> dfs(board, i, j, word):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>Time complexity: O(m*<em>n * 4^L) m</em>n is the size of the board and L is the length of the word</p>
<p>Space complexity: O(L) where L is the length of the word</p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>medium</tag>
        <tag>💡</tag>
        <tag>Array</tag>
        <tag>Matrix</tag>
        <tag>Backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#70. Climbing Stairs</title>
    <url>/posts/leetcode/Leetcode-70-Climbing-Stairs/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>You are climbing a staircase. It takes <code>n</code> steps to reach the top.</p>
<p>Each time you can either climb <code>1</code> or <code>2</code> steps. In how many distinct ways can you climb to the top?</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 2</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: There are two ways to climb to the top.</span><br><span class="line">1. 1 step + 1 step</span><br><span class="line">2. 2 steps</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 3</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: There are three ways to climb to the top.</span><br><span class="line">1. 1 step + 1 step + 1 step</span><br><span class="line">2. 1 step + 2 steps</span><br><span class="line">3. 2 steps + 1 step</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 45</code></li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><h2 id="用一般的-fibonacci-但時間上無法，所以加一個memory紀錄"><a href="#用一般的-fibonacci-但時間上無法，所以加一個memory紀錄" class="headerlink" title="用一般的**fibonacci 但時間上無法，所以加一個memory紀錄**"></a><code>用一般的**fibonacci 但時間上無法，所以加一個memory紀錄**</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Result time-exced limit</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">climbStairs</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">climb</span>(<span class="params">n</span>):</span><br><span class="line">            <span class="keyword">if</span>  n == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> n == <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> climb(n-<span class="number">1</span>) + climb(n-<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> climb(n)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">climbStairs</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        memo = &#123;&#125;</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">climb</span>(<span class="params">n</span>):</span><br><span class="line">            <span class="keyword">if</span>  n == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> n == <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> n <span class="keyword">in</span> memo:</span><br><span class="line">                <span class="keyword">return</span> memo[n]</span><br><span class="line">            memo[n] = climb(n-<span class="number">1</span>) + climb(n-<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> climb(n-<span class="number">1</span>) + climb(n-<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> climb(n)</span><br></pre></td></tr></table></figure>

<h2 id="用DP-可減少遞迴帶來的記憶體開銷"><a href="#用DP-可減少遞迴帶來的記憶體開銷" class="headerlink" title="用DP(可減少遞迴帶來的記憶體開銷)"></a><code>用DP(可減少遞迴帶來的記憶體開銷)</code></h2><p>用迭代計算所有項目</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">climbStairs</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span>  n</span><br><span class="line"></span><br><span class="line">        dp = &#123;&#125;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">2</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, n+<span class="number">1</span>):</span><br><span class="line">            dp[i] = dp[i-<span class="number">1</span>] + dp[i-<span class="number">2</span>]</span><br><span class="line">        <span class="comment"># print(f)</span></span><br><span class="line">        <span class="keyword">return</span> dp[n]</span><br></pre></td></tr></table></figure>

<p>通常情況下，使用動態規劃（DP）相對於純遞迴方法可以減少記憶體開銷。</p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>在嚴格的定義下，動態規劃是一種將複雜問題分解成簡單子問題的優化技術，並使用迭代的方式計算所有子問題的解，並且通常有一個明確的「狀態轉移方程」來描述子問題之間的關係。這樣的實現方式通常不依賴遞迴，而是使用循環來進行計算。</p>
<p>雖然<code>(Solve1)</code>確實使用了 memoization 技術來優化遞迴計算，但在 DP 的嚴格定義下，它仍然被視為是遞迴解法（recursive solution），而不是 DP 解法。遞迴解法仍然有一定的遞迴調用開銷，而真正的 DP 解法則完全避免了遞迴，只使用迭代計算。</p>
<p>總結來說，<code>(Solve1)</code>確實使用了 memoization 技術，它在時間和空間上優於純遞迴解法，但嚴格來說不屬於真正的動態規劃（DP）方法。</p>
<hr>
<h2 id="費式數列"><a href="#費式數列" class="headerlink" title="費式數列"></a>費式數列</h2><p>當爬梯子</p>
<p>可以爬 1 2 3 三種時</p>
<p>n &#x3D; 4時，有7組解</p>
<ol>
<li>1 + 1 + 1 + 1</li>
<li>1 + 2 + 1</li>
<li>2 + 1 + 1</li>
<li>1 + 1 + 2</li>
<li>2 + 2</li>
<li>3 + 1</li>
<li>1 + 3</li>
</ol>
<p>先回到原始的圖解</p>
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  flowchart TD

start[4]
treenode1[1]
treenode2[2]
treenode3[3]
	treenode3.1[1]
	treenode3.2[1]
	treenode3.3[2]

start --&gt;|4-3|treenode1
start --&gt;|4-2|treenode2
start --&gt;|4-1|treenode3

treenode3 --&gt;|3-3|treenode3.1
treenode3 --&gt;|3-2|treenode3.2
treenode3 --&gt;|3-1|treenode3.3

  </pre></div>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">climbStairs</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        dp = [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, n + <span class="number">1</span>):</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>] + dp[i - <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[n]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以爬 1 2 3 4 四種時</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">climbStairs</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        dp = [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span> <span class="comment">#這邊是把4當作一種</span></span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">2</span></span><br><span class="line">        dp[<span class="number">3</span>] = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>, n + <span class="number">1</span>): <span class="comment"># 4開始，所以階梯4時也會跑</span></span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>] + dp[i - <span class="number">3</span>] + dp[i-<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[n]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>💡</tag>
        <tag>Dynamic Programming</tag>
        <tag>easy</tag>
        <tag>Math</tag>
        <tag>Memoization</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#92. Reverse Linked List II</title>
    <url>/posts/leetcode/Leetcode-92-Reverse-Linked-List-II/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Given the <code>head</code> of a singly linked list and two integers <code>left</code> and <code>right</code> where <code>left &lt;= right</code>, reverse the nodes of the list from position <code>left</code> to position <code>right</code>, and return <em>the reversed list</em>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev2ex2.jpg"></p>
<p>!<a href="https://assets.leetcode.com/uploads/2021/02/19/rev2ex2.jpg">https://assets.leetcode.com/uploads/2021/02/19/rev2ex2.jpg</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: head = [1,2,3,4,5], left = 2, right = 4</span><br><span class="line">Output: [1,4,3,2,5]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: head = [5], left = 1, right = 1</span><br><span class="line">Output: [5]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the list is <code>n</code>.</li>
<li><code>1 &lt;= n &lt;= 500</code></li>
<li><code>500 &lt;= Node.val &lt;= 500</code></li>
<li><code>1 &lt;= left &lt;= right &lt;= n</code></li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><h3 id="法1"><a href="#法1" class="headerlink" title="法1"></a><code>法1</code></h3><p>題目一開始沒有看清楚</p>
<p>原來是 position ‘left’ 、 position ‘right’，還以為是跑到與left、right 相同的數字進行反轉，導致一直錯</p>
<p>這類題目就是用一個指標指向開頭，將後面節點進行一陣操作後</p>
<p>返回指向 <strong>開頭的節點</strong> 的指標</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverseBetween</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode], left: <span class="built_in">int</span>, right: <span class="built_in">int</span></span>) -&gt; <span class="type">Optional</span>[ListNode]:  </span><br><span class="line">        curr = head</span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        dummy.<span class="built_in">next</span> = head</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># prev 會是在left 前一個</span></span><br><span class="line">        prev = dummy</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(left - <span class="number">1</span>):</span><br><span class="line">            prev = prev.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># curr 是 left節點</span></span><br><span class="line">        curr = prev.<span class="built_in">next</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(right - left): <span class="comment"># 執行 right - left 次</span></span><br><span class="line">            <span class="comment"># nxt 是 curr 的下一個節點</span></span><br><span class="line">            nxt = curr.<span class="built_in">next</span></span><br><span class="line">            <span class="comment"># 將 curr 的下一個節點指向 nxt 的下一個節點</span></span><br><span class="line">            curr.<span class="built_in">next</span> = nxt.<span class="built_in">next</span></span><br><span class="line">            <span class="comment"># 將 nxt 的下一個節點指向 prev 的下一個節點</span></span><br><span class="line">            nxt.<span class="built_in">next</span> = prev.<span class="built_in">next</span></span><br><span class="line">            <span class="comment"># 將 prev 的下一個節點指向 nxt</span></span><br><span class="line">            prev.<span class="built_in">next</span> = nxt</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummy.<span class="built_in">next</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>medium</tag>
        <tag>💡</tag>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#88. Merge Sorted Array</title>
    <url>/posts/leetcode/Leetcode-88-Merge-Sorted-Array/</url>
    <content><![CDATA[<p>#<code>Problem</code><br>You are given two integer arrays <code>nums1</code> and <code>nums2</code>, sorted in <strong>non-decreasing order</strong>, and two integers <code>m</code> and <code>n</code>, representing the number of elements in <code>nums1</code> and <code>nums2</code> respectively.</p>
<p><strong>Merge</strong> <code>nums1</code> and <code>nums2</code> into a single array sorted in <strong>non-decreasing order</strong>.</p>
<p>The final sorted array should not be returned by the function, but instead be <em>stored inside the array</em> <code>nums1</code>. To accommodate this, <code>nums1</code> has a length of <code>m + n</code>, where the first <code>m</code> elements denote the elements that should be merged, and the last <code>n</code> elements are set to <code>0</code> and should be ignored. <code>nums2</code> has a length of <code>n</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3</span><br><span class="line">Output: [1,2,2,3,5,6]</span><br><span class="line">Explanation: The arrays we are merging are [1,2,3] and [2,5,6].</span><br><span class="line">The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [1], m = 1, nums2 = [], n = 0</span><br><span class="line">Output: [1]</span><br><span class="line">Explanation: The arrays we are merging are [1] and [].</span><br><span class="line">The result of the merge is [1].</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [0], m = 0, nums2 = [1], n = 1</span><br><span class="line">Output: [1]</span><br><span class="line">Explanation: The arrays we are merging are [] and [1].</span><br><span class="line">The result of the merge is [1].</span><br><span class="line">Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.</span><br></pre></td></tr></table></figure>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">self, nums1, m, nums2, n</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums1: List[int]</span></span><br><span class="line"><span class="string">        :type m: int</span></span><br><span class="line"><span class="string">        :type nums2: List[int]</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: None Do not return anything, modify nums1 in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        nums1[m:m+n] = nums2</span><br><span class="line">        nums1.sort()</span><br></pre></td></tr></table></figure>

<p>不用函式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">self, nums1: <span class="type">List</span>[<span class="built_in">int</span>], m: <span class="built_in">int</span>, nums2: <span class="type">List</span>[<span class="built_in">int</span>], n: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Do not return anything, modify nums1 in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        i = m - <span class="number">1</span></span><br><span class="line">        j = n - <span class="number">1</span></span><br><span class="line">        k = m + n - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>  j &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span>  i&gt;=<span class="number">0</span> <span class="keyword">and</span> nums1[i] &gt;= nums2[j]:</span><br><span class="line">                nums1[k] = nums1[i]</span><br><span class="line">                i -=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                nums1[k] = nums2[j]</span><br><span class="line">                j -=<span class="number">1</span></span><br><span class="line">            k -=<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>Array</tag>
        <tag>easy</tag>
        <tag>Two Pointers</tag>
        <tag>Sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#9. Palindrome Number</title>
    <url>/posts/leetcode/Leetcode-9-Palindrome-Number/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Given an integer <code>x</code>, return <code>true</code> <em>if</em> <code>x</code> <em>is a</em></p>
<p><em><strong>palindrome</strong></em></p>
<p><em>, and</em> <strong>false</strong> <em>otherwise</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Palindrome</span><br><span class="line">An integer is a palindrome when it reads the same forward and backward.</span><br><span class="line"></span><br><span class="line">For example, 121 is a palindrome while 123 is not</span><br></pre></td></tr></table></figure>

<p>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: x = 121</span><br><span class="line">Output: true</span><br><span class="line">Explanation: 121 reads as 121 from left to right and from right to left.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: x = -121</span><br><span class="line">Output: false</span><br><span class="line">Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: x = 10</span><br><span class="line">Output: false</span><br><span class="line">Explanation: Reads 01 from right to left. Therefore it is not a palindrome.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>2^31 &lt;= x &lt;= 2^31 - 1</code></li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><h2 id="利用字串"><a href="#利用字串" class="headerlink" title="利用字串"></a><code>利用字串</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isPalindrome</span>(<span class="params">self, x: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        str_x = <span class="built_in">str</span>(x)</span><br><span class="line">        r_str_x = str_x[::-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> str_x == r_str_x:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h3 id="簡化"><a href="#簡化" class="headerlink" title="簡化"></a><code>簡化</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isPalindrome</span>(<span class="params">self, x: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        str_x = <span class="built_in">str</span>(x)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> str_x == str_x[::-<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h2 id="數學"><a href="#數學" class="headerlink" title="數學"></a><code>數學</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isPalindrome</span>(<span class="params">self, x: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> (x != <span class="number">0</span> <span class="keyword">and</span> x % <span class="number">10</span> == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        reversed_num = <span class="number">0</span></span><br><span class="line">        original = x</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> x &gt; reversed_num:</span><br><span class="line">            reversed_num = reversed_num * <span class="number">10</span> + x % <span class="number">10</span></span><br><span class="line">            x //= <span class="number">10</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x == reversed_num <span class="keyword">or</span> x == reversed_num // <span class="number">10</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>💡</tag>
        <tag>easy</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>Post Front-matter</title>
    <url>/posts/gossip/Post%20Front-matter/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>寫法,</th>
<th>解釋</th>
</tr>
</thead>
<tbody><tr>
<td>title</td>
<td>【必需】文章標題</td>
</tr>
<tr>
<td>date</td>
<td>【必需】文章創建日期</td>
</tr>
<tr>
<td>updated</td>
<td>【可選】文章更新日期</td>
</tr>
<tr>
<td>tags</td>
<td>【可選】文章標籤</td>
</tr>
<tr>
<td>categories</td>
<td>【可選】文章分類</td>
</tr>
<tr>
<td>keywords</td>
<td>【可選】文章關鍵字</td>
</tr>
<tr>
<td>description</td>
<td>【可選】文章描述</td>
</tr>
<tr>
<td>top_img</td>
<td>【可選】文章頂部圖片</td>
</tr>
<tr>
<td>cover</td>
<td>【可選】文章縮略圖(如果沒有設置top_img,文章頁頂部將顯示縮略圖，可設為false&#x2F;圖片地址&#x2F;留空)</td>
</tr>
<tr>
<td>comments</td>
<td>【可選】顯示文章評論模塊(默認 true)</td>
</tr>
<tr>
<td>toc</td>
<td>【可選】顯示文章TOC(默認為設置中toc的enable配置)</td>
</tr>
<tr>
<td>toc_number</td>
<td>【可選】顯示toc_number(默認為設置中toc的number配置)</td>
</tr>
<tr>
<td>toc_style_simple</td>
<td>【可選】顯示 toc 簡潔模式</td>
</tr>
<tr>
<td>copyright</td>
<td>【可選】顯示文章版權模塊(默認為設置中post_copyright的enable配置)</td>
</tr>
<tr>
<td>copyright_author</td>
<td>【可選】文章版權模塊的文章作者</td>
</tr>
<tr>
<td>copyright_author_href</td>
<td>【可選】文章版權模塊的文章作者鏈接</td>
</tr>
<tr>
<td>copyright_url</td>
<td>【可選】文章版權模塊的文章連結鏈接</td>
</tr>
<tr>
<td>copyright_info</td>
<td>【可選】文章版權模塊的版權聲明文字</td>
</tr>
<tr>
<td>mathjax</td>
<td>【可選】顯示mathjax(當設置 mathjax 的 per_page: false 時，才需要配置，默認 false )</td>
</tr>
<tr>
<td>katex</td>
<td>【可選】顯示 katex (當設置 katex 的 per_page: false 時，才需要配置，默認 false )</td>
</tr>
<tr>
<td>aplayer</td>
<td>【可選】在需要的頁面加載 aplayer 的 js 和 css,請參考文章下面的音樂 配置</td>
</tr>
<tr>
<td>highlight_shrink</td>
<td>【可選】配置代碼框是否展開(true&#x2F;false)(默認為設置中 highlight_shrink 的配置)</td>
</tr>
<tr>
<td>aside</td>
<td>【可選】顯示側邊欄 (默認 true)</td>
</tr>
<tr>
<td>abcjs</td>
<td>【可選】加載 abcjs (當設置 abcjs 的 per_page: false 時，才需要配置，默認 false )</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>gossip</tag>
      </tags>
  </entry>
  <entry>
    <title>一些部落格配置adsense 域名</title>
    <url>/posts/gossip/%E4%B8%80%E4%BA%9B%E9%83%A8%E8%90%BD%E6%A0%BC%E9%85%8D%E7%BD%AEadsense-%E5%9F%9F%E5%90%8D/</url>
    <content><![CDATA[<h1 id="hexo部落格配置adsense"><a href="#hexo部落格配置adsense" class="headerlink" title="hexo部落格配置adsense"></a>hexo部落格配置adsense</h1><h2 id="1-申請adsense"><a href="#1-申請adsense" class="headerlink" title="1. 申請adsense"></a>1. 申請adsense</h2><p><a href="https://www.google.com/adsense/start/">https://www.google.com/adsense/start/</a></p>
<p>就照著申請帳號吧</p>
<h2 id="2-ads-txt"><a href="#2-ads-txt" class="headerlink" title="2. ads.txt"></a>2. ads.txt</h2><p>回到hexo在source底下新增ads.txt</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">google.com, pub-xxxxxxxxxxxxxxxx, DIRECT, f08c47fec0942fa0</span><br></pre></td></tr></table></figure>





<h1 id="架設在github-io上的網站設置自己的域名"><a href="#架設在github-io上的網站設置自己的域名" class="headerlink" title="架設在github.io上的網站設置自己的域名"></a>架設在github.io上的網站設置自己的域名</h1><h2 id="1-設定custome-domain"><a href="#1-設定custome-domain" class="headerlink" title="1. 設定custome domain"></a>1. 設定custome domain</h2><p>(假設已經有github.io的repo)</p>
<p>到github的setting&#x2F;Pages</p>
<p>找到custom domain，並輸入自己的網域</p>
<h2 id="2-hexo設定CNAME"><a href="#2-hexo設定CNAME" class="headerlink" title="2. hexo設定CNAME"></a>2. hexo設定CNAME</h2><p>在source底下新增CNAME</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yourdomain.com</span><br></pre></td></tr></table></figure>

<h2 id="3-設定DNS"><a href="#3-設定DNS" class="headerlink" title="3. 設定DNS"></a>3. 設定DNS</h2><p>到自己的買網域的地方，設定DNS</p>
<!-- https://www.namecheap.com/support/knowledgebase/article.aspx/9645/2208/how-do-i-link-my-domain-to-github-pages/ -->

<p>可以參考官方文檔</p>
<p><a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site">https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site</a></p>
]]></content>
      <tags>
        <tag>gossip</tag>
        <tag>adsense</tag>
        <tag>domain</tag>
      </tags>
  </entry>
  <entry>
    <title>ReactWeb-deploy-command</title>
    <url>/posts/gossip/resume-page-command/</url>
    <content><![CDATA[<p>我Resume 是使用React (在codesandbox)，紀錄上傳至github的步驟</p>
<h2 id="set-up"><a href="#set-up" class="headerlink" title="set up"></a>set up</h2><h3 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h3><h4 id="安裝gh-pages"><a href="#安裝gh-pages" class="headerlink" title="安裝gh-pages"></a>安裝gh-pages</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install gh-pages --save-dev</span><br></pre></td></tr></table></figure>
<p>可以看 dependencies 中有沒有，沒有的話再安裝一次，因為我有遇過安裝後沒有出現在 dependencies 中，若確定安裝成功，則可在<br>package.json 中看到</p>
<figure class="highlight json"><figcaption><span>/ dependencies</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;gh-pages&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.0.0&quot;</span></span><br></pre></td></tr></table></figure>
<p>不然就手動加入…</p>
<h4 id="加入deploy指令"><a href="#加入deploy指令" class="headerlink" title="加入deploy指令"></a>加入deploy指令</h4><p>package.json</p>
<figure class="highlight json"><figcaption><span>/ scripts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;predeploy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run build&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;deploy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gh-pages -d build&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="設定deploy的分支"><a href="#設定deploy的分支" class="headerlink" title="設定deploy的分支"></a>設定deploy的分支</h4><p>package.json</p>
<figure class="highlight json"><figcaption><span>/</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;homepage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://&#123;username&#125;.github.io/&#123;repro-name&#125;/&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<h4 id="執行deploy"><a href="#執行deploy" class="headerlink" title="執行deploy"></a>執行deploy</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm run deploy</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>gossip</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>other bash command</title>
    <url>/posts/gossip/other-bash-command/</url>
    <content><![CDATA[<p>紀錄一些指令</p>
<h2 id="set-up"><a href="#set-up" class="headerlink" title="set up"></a>set up</h2><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm inatall --force</span><br></pre></td></tr></table></figure>

<p>由於上傳未包含node_modules，因此下載後需要重新安裝</p>
<h3 id="上傳至github"><a href="#上傳至github" class="headerlink" title="上傳至github"></a>上傳至github</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pythone PushGit.py</span><br></pre></td></tr></table></figure>

<p>自己寫的上傳程式，包括:<code>hexo generate</code> 、 <code>hexo deploy</code> 、 整包上傳repro&#x2F;{填寫的分支}</p>
<p><code>2023/7/18</code> 新增 _config.yml 的github_deploy，節省輸入的時間</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _config.yml</span></span><br><span class="line">github_deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/ImitatedSky/ImitatedSky.github.io</span><br><span class="line">  branch: main</span><br><span class="line">  message: <span class="string">&#x27;deploy&#x27;</span></span><br><span class="line">  <span class="built_in">test</span>: <span class="string">&quot;test message&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pip install pyyaml</span></span><br><span class="line"><span class="comment"># PushGit.py</span></span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 讀取設定檔</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;_config.yml&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    config = yaml.load(f, Loader=yaml.FullLoader)</span><br><span class="line"></span><br><span class="line">github_url = config[<span class="string">&quot;github_deploy&quot;</span>][<span class="string">&quot;repo&quot;</span>]</span><br><span class="line">github_branch = config[<span class="string">&quot;github_deploy&quot;</span>][<span class="string">&quot;branch&quot;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="題外話-hexo-deploy"><a href="#題外話-hexo-deploy" class="headerlink" title="題外話-hexo deploy"></a>題外話-hexo deploy</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _config.yml</span></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/ImitatedSky/ImitatedSky.github.io <span class="comment"># https://github.com/[你的 GitHub 帳號]/[你的 GitHub 帳號].github.io.git</span></span><br><span class="line">  branch: gh-page <span class="comment"># 在這邊我是使用 gp-page 當作主要分支</span></span><br><span class="line">  message: <span class="string">&#x27;deploy&#x27;</span></span><br></pre></td></tr></table></figure>

<p>這邊我是上傳至 .io 的gh-pages分支，設定在 _config.yml</p>
]]></content>
      <tags>
        <tag>gossip</tag>
        <tag>bash</tag>
      </tags>
  </entry>
  <entry>
    <title>我的 hexo md排版</title>
    <url>/posts/gossip/%E6%88%91%E7%9A%84-hexo-md%E6%8E%92%E7%89%88/</url>
    <content><![CDATA[<p>我是使用notion 做一做 再複製貼上到 ，hexo生成的md上</p>
<p>例如:<a href="../Leetcode-149-Max-Points-on-a-Line.md">leetcode149</a>這篇</p>
<p><img src="https://file.notion.so/f/s/defe7bf7-6a0a-4de6-9a47-d7673e1f9678/Untitled.png?id=f7e61a0b-7172-40e8-ac44-110ee05098a4&table=block&spaceId=aa7d30ee-c6ed-4ce4-91c8-c79bede1cbaf&expirationTimestamp=1692432000000&signature=C0KOFegHWV94yzeHht3cFaFN8_W8A5CNgzyfUvhEyLA&downloadName=Untitled.png"></p>
<p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/defe7bf7-6a0a-4de6-9a47-d7673e1f9678/Untitled.png" alt="Untitled"></p>
<p>基本problem是放 leetcode那邊複製過來的，但圖片由於從notion上複製時，無法讀取，所以就自己加了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![]( …….)</span><br></pre></td></tr></table></figure>

<p>的連結</p>
<p><img src="https://file.notion.so/f/s/3c223c82-4736-425a-bea3-1bbc02dc0642/Untitled.png?id=fd8b2d48-0f75-4956-b13a-e2995b315848&table=block&spaceId=aa7d30ee-c6ed-4ce4-91c8-c79bede1cbaf&expirationTimestamp=1692432000000&signature=wXVpJ2eX_Z1mvA3YU1MA8nnIFXyHZkNW_-xYBPG64ZQ&downloadName=Untitled.png"></p>
<p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3c223c82-4736-425a-bea3-1bbc02dc0642/Untitled.png" alt="Untitled"></p>
<p>程式碼在notion 也有 ，都是在notionu編輯完直接全部複製</p>
<p>這篇在notion長這樣</p>
<p><img src="https://file.notion.so/f/s/6b8e44ea-e824-469d-b41e-e1ce61a3891d/Untitled.png?id=83051412-3d94-4ba6-8591-77156425b216&table=block&spaceId=aa7d30ee-c6ed-4ce4-91c8-c79bede1cbaf&expirationTimestamp=1692432000000&signature=FPikxfjXvtlraKctbJXSnp0mJsVVZ-4_iy2YEYhE-Jg&downloadName=Untitled.png"></p>
<p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/6b8e44ea-e824-469d-b41e-e1ce61a3891d/Untitled.png" alt="Untitled"></p>
<p><code>這篇圖片問題就是，複製時這圖片並非網址，notion也未公開，就不修正了</code></p>
<p><del><code>但我依舊偷渡notion的圖片利用 view original link</code></del></p>
]]></content>
      <tags>
        <tag>gossing</tag>
      </tags>
  </entry>
  <entry>
    <title>完成的網站了，聊一下</title>
    <url>/posts/gossip/%E5%AE%8C%E6%88%90%E7%9A%84%E7%B6%B2%E7%AB%99%E4%BA%86%EF%BC%8C%E8%81%8A%E4%B8%80%E4%B8%8B/</url>
    <content><![CDATA[<p>post 測試 123</p>
<p>介紹一下這個網站使用的技術</p>
<h2 id="網站製作"><a href="#網站製作" class="headerlink" title="網站製作"></a>網站製作</h2><h3 id="使用-Hexo"><a href="#使用-Hexo" class="headerlink" title="使用 Hexo"></a>使用 Hexo</h3><h3 id="使用-Butterfly-主題"><a href="#使用-Butterfly-主題" class="headerlink" title="使用 Butterfly 主題"></a>使用 Butterfly 主題</h3><h3 id="部屬至-Github-Pages"><a href="#部屬至-Github-Pages" class="headerlink" title="部屬至 Github Pages"></a>部屬至 Github Pages</h3><h3 id="網域-使用-Namecheap"><a href="#網域-使用-Namecheap" class="headerlink" title="網域 使用 Namecheap"></a>網域 使用 Namecheap</h3><p>由於使用 GitHub Page 上展示一些靜態內容，並且不涉及使用者的敏感信息或網站交互，那麼購買 SSL 證書”好像”不是必需的。<br>其實我也在Namecheap上也買，但是沒有使用到。 拜託不要攻擊我QQ</p>
<hr>
<p><font size=1><em>有沒有人要委託我做部落格呢？</em></font></p>
]]></content>
      <tags>
        <tag>gossip</tag>
      </tags>
  </entry>
  <entry>
    <title>改變git推送人與信箱</title>
    <url>/posts/gossip/%E6%94%B9%E8%AE%8Agit%E6%8E%A8%E9%80%81%E4%BA%BA%E8%88%87%E4%BF%A1%E7%AE%B1/</url>
    <content><![CDATA[<p>當你需要更改 Git 中的使用者名稱和電子郵件地址時，可以按照以下步驟執行：</p>
<ol>
<li>使用以下命令檢視當前的 Git 設定：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --list</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>這將顯示當前的 Git 設定列表。</p>
<ol start="2">
<li>使用以下命令設定新的使用者名稱：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;Name&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<p>將 “Name” 替換為你要設定的新使用者名稱。</p>
<ol start="3">
<li>使用以下命令設定新的電子郵件地址：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">git config --global user.email <span class="string">&quot;email@example.com&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>gossip</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>時間複雜度</title>
    <url>/posts/gossip/%E6%99%82%E9%96%93%E8%A4%87%E9%9B%9C%E5%BA%A6/</url>
    <content><![CDATA[<h1 id="時間複雜度由小到大依次為"><a href="#時間複雜度由小到大依次為" class="headerlink" title="時間複雜度由小到大依次為:"></a>時間複雜度由小到大依次為:</h1><p>O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n^2) &lt; O(n^3) &lt; O(2^n) &lt; O(n!) &lt; O(n^n)</p>
<table>
<thead>
<tr>
<th>時間複雜度</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>O(1)</td>
<td>常數時間</td>
</tr>
<tr>
<td>O(logn)</td>
<td>對數時間</td>
</tr>
<tr>
<td>O(n)</td>
<td>線性時間</td>
</tr>
<tr>
<td>O(nlogn)</td>
<td>線性對數時間</td>
</tr>
<tr>
<td>O(n^2)</td>
<td>平方時間</td>
</tr>
<tr>
<td>O(n^3)</td>
<td>立方時間</td>
</tr>
<tr>
<td>O(2^n)</td>
<td>指數時間</td>
</tr>
<tr>
<td>O(n!)</td>
<td>階乘時間</td>
</tr>
<tr>
<td>O(n^n)</td>
<td>階乘時間</td>
</tr>
</tbody></table>
<h1 id="常見的時間複雜度"><a href="#常見的時間複雜度" class="headerlink" title="常見的時間複雜度"></a>常見的時間複雜度</h1><h2 id="O-1-：常數時間"><a href="#O-1-：常數時間" class="headerlink" title="O(1)：常數時間"></a>O(1)：常數時間</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">constant_algo</span>(<span class="params">items</span>):</span><br><span class="line">    result = items[<span class="number">0</span>] * items[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>

<h2 id="O-n-：線性時間"><a href="#O-n-：線性時間" class="headerlink" title="O(n)：線性時間"></a>O(n)：線性時間</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">linear_algo</span>(<span class="params">items</span>):</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure>

<h2 id="O-n-2-：平方時間"><a href="#O-n-2-：平方時間" class="headerlink" title="O(n^2)：平方時間"></a>O(n^2)：平方時間</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">quadratic_algo</span>(<span class="params">items</span>):</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        <span class="keyword">for</span> item2 <span class="keyword">in</span> items:</span><br><span class="line">            <span class="built_in">print</span>(item, <span class="string">&#x27; &#x27;</span>, item2)</span><br></pre></td></tr></table></figure>

<h2 id="O-logn-：對數時間"><a href="#O-logn-：對數時間" class="headerlink" title="O(logn)：對數時間"></a>O(logn)：對數時間</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">logarithmic_algo</span>(<span class="params">items</span>):</span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(items)):</span><br><span class="line">        position = index</span><br><span class="line">        current_value = items[index]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> position&gt;<span class="number">0</span> <span class="keyword">and</span> items[position-<span class="number">1</span>]&gt;current_value:</span><br><span class="line">            items[position]=items[position-<span class="number">1</span>]</span><br><span class="line">            position = position-<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        items[position]=current_value</span><br></pre></td></tr></table></figure>

<h2 id="O-nlogn-：線性對數時間"><a href="#O-nlogn-：線性對數時間" class="headerlink" title="O(nlogn)：線性對數時間"></a>O(nlogn)：線性對數時間</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">linearithmic_algo</span>(<span class="params">items</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(items) &gt; <span class="number">1</span>:</span><br><span class="line">        mid = <span class="built_in">len</span>(items) // <span class="number">2</span></span><br><span class="line">        left = items[:mid]</span><br><span class="line">        right = items[mid:]</span><br><span class="line"></span><br><span class="line">        linearithmic_algo(left)</span><br><span class="line">        linearithmic_algo(right)</span><br><span class="line"></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        k = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(left) <span class="keyword">and</span> j &lt; <span class="built_in">len</span>(right):</span><br><span class="line">            <span class="keyword">if</span> left[i] &lt; right[j]:</span><br><span class="line">              items[k] = left[i]</span><br><span class="line">              i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                items[k] = right[j]</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(left):</span><br><span class="line">            items[k] = left[i]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> j &lt; <span class="built_in">len</span>(right):</span><br><span class="line">            items[k]=right[j]</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">            k += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h2 id="O-2-n-：指數時間"><a href="#O-2-n-：指數時間" class="headerlink" title="O(2^n)：指數時間"></a>O(2^n)：指數時間</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">exponential_algo</span>(<span class="params">items</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(items)==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> [[]]</span><br><span class="line">    smaller = exponential_algo(items[:-<span class="number">1</span>])</span><br><span class="line">    extra = items[-<span class="number">1</span>:]</span><br><span class="line">    new = []</span><br><span class="line">    <span class="keyword">for</span> small <span class="keyword">in</span> smaller:</span><br><span class="line">        new.append(small+extra)</span><br><span class="line">    <span class="keyword">return</span> smaller+new</span><br></pre></td></tr></table></figure>

<h2 id="O-n-：階乘時間"><a href="#O-n-：階乘時間" class="headerlink" title="O(n!)：階乘時間"></a>O(n!)：階乘時間</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factorial_algo</span>(<span class="params">items</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(items)==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> [[]]</span><br><span class="line">    smaller = factorial_algo(items[:-<span class="number">1</span>])</span><br><span class="line">    new = []</span><br><span class="line">    <span class="keyword">for</span> small <span class="keyword">in</span> smaller:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(small)+<span class="number">1</span>):</span><br><span class="line">            new.append(small[:i]+items[-<span class="number">1</span>:]+small[i:])</span><br><span class="line">    <span class="keyword">return</span> smaller+new</span><br></pre></td></tr></table></figure>

<h2 id="O-n-n-：階乘時間"><a href="#O-n-n-：階乘時間" class="headerlink" title="O(n^n)：階乘時間"></a>O(n^n)：階乘時間</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">n_power_n_algo</span>(<span class="params">items</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(items)==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> [[]]</span><br><span class="line">    smaller = n_power_n_algo(items[:-<span class="number">1</span>])</span><br><span class="line">    new = []</span><br><span class="line">    <span class="keyword">for</span> small <span class="keyword">in</span> smaller:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(small)+<span class="number">1</span>):</span><br><span class="line">            new.append(small[:i]+items[-<span class="number">1</span>:]+small[i:])</span><br><span class="line">    <span class="keyword">return</span> smaller+new</span><br></pre></td></tr></table></figure>

<h2 id="O-n-3-：立方時間"><a href="#O-n-3-：立方時間" class="headerlink" title="O(n^3)：立方時間"></a>O(n^3)：立方時間</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cubic_algo</span>(<span class="params">items</span>):</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        <span class="keyword">for</span> item2 <span class="keyword">in</span> items:</span><br><span class="line">            <span class="keyword">for</span> item3 <span class="keyword">in</span> items:</span><br><span class="line">                <span class="built_in">print</span>(item, <span class="string">&#x27; &#x27;</span>, item2, <span class="string">&#x27; &#x27;</span>, item3)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>gossip</tag>
        <tag>施工中</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#105. Construct Binary Tree from Preorder and Inorder Traversal</title>
    <url>/posts/leetcode/Leetcode-105-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Given two integer arrays <code>preorder</code> and <code>inorder</code> where <code>preorder</code> is the preorder traversal of a binary tree and <code>inorder</code> is the inorder traversal of the same tree, construct and return <em>the binary tree</em>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/02/19/tree.jpg"></p>
<p>!<a href="https://assets.leetcode.com/uploads/2021/02/19/tree.jpg">https://assets.leetcode.com/uploads/2021/02/19/tree.jpg</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]</span><br><span class="line">Output: [3,9,20,null,null,15,7]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: preorder = [-1], inorder = [-1]</span><br><span class="line">Output: [-1]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= preorder.length &lt;= 3000</code></li>
<li><code>inorder.length == preorder.length</code></li>
<li><code>3000 &lt;= preorder[i], inorder[i] &lt;= 3000</code></li>
<li><code>preorder</code> and <code>inorder</code> consist of <strong>unique</strong> values.</li>
<li>Each value of <code>inorder</code> also appears in <code>preorder</code>.</li>
<li><code>preorder</code> is <strong>guaranteed</strong> to be the preorder traversal of the tree.</li>
<li><code>inorder</code> is <strong>guaranteed</strong> to be the inorder traversal of the tree.</li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><h2 id="法1"><a href="#法1" class="headerlink" title="法1"></a><code>法1</code></h2><h3 id="解"><a href="#解" class="headerlink" title="解"></a>解</h3><p>前序的第一點就是TreeNode的root</p>
<p>找到中序的root.val 對應值，左邊就是左子樹，右邊就是右子樹</p>
<p>遞迴下去即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">buildTree</span>(<span class="params">self, preorder: <span class="type">List</span>[<span class="built_in">int</span>], inorder: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">Optional</span>[TreeNode]:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">build</span>(<span class="params">preo,ino</span>):</span><br><span class="line">			<span class="comment"># 當preo 或 ino 為空時，返回None</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> preo <span class="keyword">or</span> <span class="keyword">not</span> ino :</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">      root = TreeNode(preo[<span class="number">0</span>])</span><br><span class="line">      root_index = <span class="number">0</span></span><br><span class="line">      </span><br><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ino)):</span><br><span class="line">        <span class="keyword">if</span> ino[i] == root.val:</span><br><span class="line">          root_index = i</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">      </span><br><span class="line">      root.left = build( preo[<span class="number">1</span>:root_index+<span class="number">1</span>] , ino[<span class="number">0</span>:root_index])</span><br><span class="line">      root.right = build( preo[root_index+<span class="number">1</span>:<span class="built_in">len</span>(preo)] , ino[root_index+<span class="number">1</span>:<span class="built_in">len</span>(ino)])</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span>(root)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> build(preorder,inorder)</span><br></pre></td></tr></table></figure>

<h3 id="整理過後"><a href="#整理過後" class="headerlink" title="整理過後"></a>整理過後</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">buildTree</span>(<span class="params">self, preorder: <span class="type">List</span>[<span class="built_in">int</span>], inorder: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">Optional</span>[TreeNode]:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> preorder <span class="keyword">or</span> <span class="keyword">not</span> inorder:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    root = TreeNode(preorder[<span class="number">0</span>])</span><br><span class="line">    root_index = inorder.index(preorder[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    root.left = self.buildTree(preorder[<span class="number">1</span>:root_index +<span class="number">1</span>], inorder[:root_index ])</span><br><span class="line">    root.right = self.buildTree(preorder[root_index +<span class="number">1</span>:], inorder[root_index +<span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>medium</tag>
        <tag>Tree</tag>
        <tag>Binary Tree</tag>
        <tag>💡</tag>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Divide and Conquer</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#34. Find First and Last Position of Element in Sorted Array</title>
    <url>/posts/leetcode/Leetcode-34-Find-First-and-Last-Position-of-Element-in-Sorted-Array/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Given an array of integers <code>nums</code> sorted in non-decreasing order, find the starting and ending position of a given <code>target</code> value.</p>
<p>If <code>target</code> is not found in the array, return <code>[-1, -1]</code>.</p>
<p>You must write an algorithm with <code>O(log n)</code> runtime complexity.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [5,7,7,8,8,10], target = 8</span><br><span class="line">Output: [3,4]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [5,7,7,8,8,10], target = 6</span><br><span class="line">Output: [-1,-1]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [], target = 0</span><br><span class="line">Output: [-1,-1]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>0 &lt;= nums.length &lt;= 10^5</code></li>
<li><code>10^9 &lt;= nums[i] &lt;= 10^9</code></li>
<li><code>nums</code> is a non-decreasing array.</li>
<li><code>10^9 &lt;= target &lt;= 10^9</code></li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><p>使用標準的Binary Search 來做這題</p>
<p>先用二分法找到target</p>
<p>因為target可能有重複，找到後，再前後延伸搜索</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">searchRange</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> [-<span class="number">1</span>, -<span class="number">1</span>]</span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            mid = (left + right) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[mid] == target:</span><br><span class="line">                left = mid</span><br><span class="line">                right = mid</span><br><span class="line">                <span class="keyword">while</span> left &gt; <span class="number">0</span> <span class="keyword">and</span> nums[left - <span class="number">1</span>] == target:</span><br><span class="line">                    left -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> right &lt; <span class="built_in">len</span>(nums) - <span class="number">1</span> <span class="keyword">and</span> nums[right + <span class="number">1</span>] == target:</span><br><span class="line">                    right += <span class="number">1</span></span><br><span class="line">                <span class="keyword">return</span> [left, right]</span><br><span class="line">            <span class="keyword">elif</span> nums[mid] &gt; target:</span><br><span class="line">                right = mid - <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> [-<span class="number">1</span>, -<span class="number">1</span>]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>medium</tag>
        <tag>💡</tag>
        <tag>Array</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#55. Jump Game</title>
    <url>/posts/leetcode/Leetcode-55-Jump-Game/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>You are given an integer array <code>nums</code>. You are initially positioned at the array’s <strong>first index</strong>, and each element in the array represents your maximum jump length at that position.</p>
<p>Return <code>true</code> <em>if you can reach the last index, or</em> <code>false</code> <em>otherwise</em>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [2,3,1,1,4]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [3,2,1,0,4]</span><br><span class="line">Output: false</span><br><span class="line">Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 10^4</code></li>
<li><code>0 &lt;= nums[i] &lt;= 10^5</code></li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><h2 id="法一"><a href="#法一" class="headerlink" title="法一"></a><code>法一</code></h2><p>想法做一個DP，紀錄節點可以往前走的步數</p>
<p>DP[i] &#x3D; max( DP[i-1] -1  , nums[i] ) 和前面一點比較誰可以走更遠，取大值</p>
<p>最後當 DP[i]可以往前的步數+ 當前位置，超出最後一點，<code>return True</code></p>
<p>當有一節點會往回走，或是沒有前進<code>return False</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 直接將想法刻出來，蠻醜的</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">canJump</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums) &lt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> nums[<span class="number">0</span>]&lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        dp = &#123;&#125;</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span> , <span class="built_in">len</span>(nums)):</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i-<span class="number">1</span>] -<span class="number">1</span>  , nums[i] )</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> dp[i] + i &gt;= <span class="built_in">len</span>(nums)-<span class="number">1</span> :</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">elif</span> dp[i] &lt;= <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h3 id="優化1"><a href="#優化1" class="headerlink" title="優化1"></a><code>優化1</code></h3><p>改變 <strong>往前走的步數</strong> → 最遠可達到的位置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">canJump</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums) &lt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> nums[<span class="number">0</span>]&lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        dp = &#123;&#125;</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(nums)):</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i-<span class="number">1</span>] , i + nums[i])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> dp[i] &gt;= <span class="built_in">len</span>(nums) - <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">elif</span> dp[i] &lt;= i:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h3 id="優化2"><a href="#優化2" class="headerlink" title="優化2"></a><code>優化2</code></h3><p><code>然後發現根本不需要DP記錄所有</code></p>
<p>所以 判斷變成</p>
<p>無法到達節點就 <code>return False</code></p>
<p>超過終點就 <code>return True</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">canJump</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums) &lt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        dp = nums[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> dp &lt; i:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">            dp = <span class="built_in">max</span>(dp, i + nums[i])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> dp &gt;= <span class="built_in">len</span>(nums) - <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>medium</tag>
        <tag>💡</tag>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#45. Jump Game II</title>
    <url>/posts/leetcode/Leetcode-45-Jump-Game-II/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>You are given a <strong>0-indexed</strong> array of integers <code>nums</code> of length <code>n</code>. You are initially positioned at <code>nums[0]</code>.</p>
<p>Each element <code>nums[i]</code> represents the maximum length of a forward jump from index <code>i</code>. In other words, if you are at <code>nums[i]</code>, you can jump to any <code>nums[i + j]</code> where:</p>
<ul>
<li><code>0 &lt;= j &lt;= nums[i]</code> and</li>
<li><code>i + j &lt; n</code></li>
</ul>
<p>Return <em>the minimum number of jumps to reach</em> <code>nums[n - 1]</code>. The test cases are generated such that you can reach <code>nums[n - 1]</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [2,3,1,1,4]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [2,3,0,1,4]</span><br><span class="line">Output: 2</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 10^4</code></li>
<li><code>0 &lt;= nums[i] &lt;= 1000</code></li>
<li>It’s guaranteed that you can reach <code>nums[n - 1]</code>.</li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><p>和<strong>Jump Game I 不同，沒有到不了的問題</strong></p>
<h3 id="法1"><a href="#法1" class="headerlink" title="法1"></a><code>法1</code></h3><p>想法蠻簡單的做一個DP，紀錄到達這個節點，最少步數</p>
<p>不需要回頭做</p>
<p>但題目要求要為Greedy algo</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">jump</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"></span><br><span class="line">        dp = &#123;&#125;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(nums) ):</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span> , nums[i]+<span class="number">1</span> ):</span><br><span class="line">                <span class="keyword">if</span> i+j <span class="keyword">in</span> dp:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                dp[i+j] = dp[i]+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[<span class="built_in">len</span>(nums)-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<h3 id="法3-Greedy-algo"><a href="#法3-Greedy-algo" class="headerlink" title="法3 Greedy algo"></a><code>法3 Greedy algo</code></h3><p>其實跟法1想法一樣，但更快且Space complexity 更少</p>
<p>不斷更新reach 最遠可以到達的，當到達紀錄的last點時，</p>
<p>再跳躍一次，更新最遠距離，並將count +&#x3D; 1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 網路的解</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">jump</span>(<span class="params">self, nums</span>):</span><br><span class="line">        <span class="comment"># Initialize reach (maximum reachable index), count (number of jumps), and last (rightmost index reached)</span></span><br><span class="line">        reach, count, last = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Loop through the array excluding the last element</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)-<span class="number">1</span>):    </span><br><span class="line">            <span class="comment"># Update reach to the maximum between reach and i + nums[i]</span></span><br><span class="line">            reach = <span class="built_in">max</span>(reach, i + nums[i])</span><br><span class="line">        </span><br><span class="line">            <span class="comment"># If i has reached the last index that can be reached with the current number of jumps</span></span><br><span class="line">            <span class="keyword">if</span> i == last:</span><br><span class="line">                <span class="comment"># Update last to the new maximum reachable index</span></span><br><span class="line">                last = reach</span><br><span class="line">                <span class="comment"># Increment the number of jumps made so far</span></span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Return the minimum number of jumps required</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>medium</tag>
        <tag>💡</tag>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>How to create a trie in Python</title>
    <url>/posts/tips/How-to-create-a-trie-in-Python/</url>
    <content><![CDATA[<h1 id="How-to-create-a-trie-in-Python"><a href="#How-to-create-a-trie-in-Python" class="headerlink" title="How to create a trie in Python"></a>How to create a trie in Python</h1><h2 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a>Trie</h2><p>Trie 像一顆特別的樹，每個節點都是一個字母，從根節點到葉節點的路徑上的字母連起來就是一個單詞。</p>
<p><code>用途</code>搜尋提示，比如輸入一個單詞，自動提示可能的後續單詞。</p>
<p><code>優點</code>搜尋效率高，不用像哈希表一樣，需要計算哈希值，直接根據單詞的每個字母，一層一層的往下搜尋即可。</p>
<p><code>缺點</code>空間消耗大，因為每個節點都需要存儲子節點的指針，當單詞數量很多時，需要的空間就很大。</p>
<h2 id="建立-Trie"><a href="#建立-Trie" class="headerlink" title="建立 Trie"></a>建立 Trie</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TrieNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.children = &#123;&#125;</span><br><span class="line">        self.is_word = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.root = TrieNode()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, word</span>):</span><br><span class="line">        node = self.root</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> word:</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> node.children:</span><br><span class="line">                node.children[char] = TrieNode()</span><br><span class="line">            node = node.children[char]</span><br><span class="line">        node.is_word = <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, word</span>):</span><br><span class="line">        node = self.root</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> word:</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> node.children:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            node = node.children[char]</span><br><span class="line">        <span class="keyword">return</span> node.is_word</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">startsWith</span>(<span class="params">self, prefix</span>):</span><br><span class="line">        node = self.root</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> prefix:</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> node.children:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            node = node.children[char]</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h2 id="加註解"><a href="#加註解" class="headerlink" title="加註解"></a>加註解</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 建構Trie節點的類</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TrieNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 用字典來存儲子節點</span></span><br><span class="line">        <span class="comment"># key: char, value: TrieNode</span></span><br><span class="line">        <span class="comment"># ex: &#123;&#x27;a&#x27;: TrieNode, &#x27;b&#x27;: TrieNode&#125;</span></span><br><span class="line">        self.children = &#123;&#125;</span><br><span class="line">        self.is_word = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 建構Trie的類</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span>:</span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 建立一個根節點</span></span><br><span class="line">        self.root = TrieNode()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 插入單詞</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, word</span>):</span><br><span class="line">        <span class="comment"># 從根節點開始</span></span><br><span class="line">        node = self.root</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 對於單詞中的每個字母</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> word:</span><br><span class="line">            <span class="comment"># 如果該字母不在當前節點的子節點中</span></span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> node.children:</span><br><span class="line">                <span class="comment"># 創建一個新的子節點</span></span><br><span class="line">                node.children[char] = TrieNode()</span><br><span class="line">            <span class="comment"># 將當前節點設置為子節點，進入下一層</span></span><br><span class="line">            node = node.children[char]</span><br><span class="line">        <span class="comment"># 將當前節點標記為單詞結尾</span></span><br><span class="line">        node.is_word = <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 查找單詞</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, word</span>):</span><br><span class="line">        <span class="comment"># 從根節點開始</span></span><br><span class="line">        node = self.root</span><br><span class="line">        <span class="comment"># 對於單詞中的每個字母</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> word:</span><br><span class="line">            <span class="comment"># 如果該字母不在當前節點的子節點中，返回False</span></span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> node.children:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="comment"># 如果該字母在當前節點的子節點中，則將當前節點設置為子節點，進入下一層</span></span><br><span class="line">            node = node.children[char]</span><br><span class="line">        <span class="comment"># 返回當前節點是否為單詞結尾</span></span><br><span class="line">        <span class="keyword">return</span> node.is_word</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查找前綴</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">startsWith</span>(<span class="params">self, prefix</span>):</span><br><span class="line">        <span class="comment"># 從根節點開始</span></span><br><span class="line">        node = self.root</span><br><span class="line">        <span class="comment"># 對於前綴中的每個字母</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> prefix:</span><br><span class="line">            <span class="comment"># 如果該字母不在當前節點的子節點中，返回False</span></span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> node.children:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="comment"># 如果該字母在當前節點的子節點中，則將當前節點設置為子節點，進入下一層</span></span><br><span class="line">            node = node.children[char]</span><br><span class="line">        <span class="comment"># 返回True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">insert</span></span><br><span class="line"><span class="string">root = TrieNode()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">+app</span></span><br><span class="line"><span class="string">root.children = &#123;&#x27;a&#x27;: TrieNode&#125;</span></span><br><span class="line"><span class="string">root.children[&#x27;a&#x27;].children = &#123;&#x27;p&#x27;: TrieNode&#125;</span></span><br><span class="line"><span class="string">root.children[&#x27;a&#x27;].children[&#x27;p&#x27;].children = &#123;&#x27;p&#x27;: TrieNode&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">+apple</span></span><br><span class="line"><span class="string">root.children = &#123;&#x27;a&#x27;: TrieNode&#125;</span></span><br><span class="line"><span class="string">root.children[&#x27;a&#x27;].children = &#123;&#x27;p&#x27;: TrieNode&#125;</span></span><br><span class="line"><span class="string">root.children[&#x27;a&#x27;].children[&#x27;p&#x27;].children = &#123;&#x27;p&#x27;: TrieNode&#125;</span></span><br><span class="line"><span class="string">root.children[&#x27;a&#x27;].children[&#x27;p&#x27;].children[&#x27;p&#x27;].children = &#123;&#x27;l&#x27;: TrieNode&#125;</span></span><br><span class="line"><span class="string">root.children[&#x27;a&#x27;].children[&#x27;p&#x27;].children[&#x27;p&#x27;].children[&#x27;l&#x27;].children = &#123;&#x27;e&#x27;: TrieNode&#125;</span></span><br><span class="line"><span class="string">root.children[&#x27;a&#x27;].children[&#x27;p&#x27;].children[&#x27;p&#x27;].children[&#x27;l&#x27;].children[&#x27;e&#x27;].children = &#123;&#x27;&#x27;: TrieNode&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">+bat</span></span><br><span class="line"><span class="string">root.children = &#123;&#x27;a&#x27;: TrieNode, &#x27;b&#x27;: TrieNode&#125;</span></span><br><span class="line"><span class="string">root.children[&#x27;a&#x27;].children = &#123;&#x27;p&#x27;: TrieNode&#125;</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">root.children[&#x27;b&#x27;].children[&#x27;a&#x27;].children = &#123;&#x27;t&#x27;: TrieNode&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">+banana</span></span><br><span class="line"><span class="string">root.children = &#123;&#x27;a&#x27;: TrieNode, &#x27;b&#x27;: TrieNode&#125;</span></span><br><span class="line"><span class="string">root.children[&#x27;a&#x27;].children = &#123;&#x27;p&#x27;: TrieNode&#125;</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">root.children[&#x27;b&#x27;].children[&#x27;a&#x27;].children = &#123;&#x27;t&#x27;: TrieNode , &#x27;n&#x27;: TrieNode&#125;</span></span><br><span class="line"><span class="string">root.children[&#x27;b&#x27;].children[&#x27;a&#x27;].children[&#x27;n&#x27;].children = &#123;&#x27;a&#x27;: TrieNode&#125;</span></span><br><span class="line"><span class="string">root.children[&#x27;b&#x27;].children[&#x27;a&#x27;].children[&#x27;n&#x27;].children[&#x27;a&#x27;].children = &#123;&#x27;n&#x27;: TrieNode&#125;</span></span><br><span class="line"><span class="string">root.children[&#x27;b&#x27;].children[&#x27;a&#x27;].children[&#x27;n&#x27;].children[&#x27;a&#x27;].children[&#x27;n&#x27;].children = &#123;&#x27;a&#x27;: TrieNode&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>~algo</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>💡</tag>
        <tag>Trie</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#139. Word Break</title>
    <url>/posts/Leetcode-139-Word-Break/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Given a string <code>s</code> and a dictionary of strings <code>wordDict</code>, return <code>true</code> if <code>s</code> can be segmented into a space-separated sequence of one or more dictionary words.</p>
<p><strong>Note</strong> that the same word in the dictionary may be reused multiple times in the segmentation.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;leetcode&quot;, wordDict = [&quot;leet&quot;,&quot;code&quot;]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: Return true because &quot;leetcode&quot; can be segmented as &quot;leet code&quot;.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;applepenapple&quot;, wordDict = [&quot;apple&quot;,&quot;pen&quot;]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: Return true because &quot;applepenapple&quot; can be segmented as &quot;apple pen apple&quot;.</span><br><span class="line">Note that you are allowed to reuse a dictionary word.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;catsandog&quot;, wordDict = [&quot;cats&quot;,&quot;dog&quot;,&quot;sand&quot;,&quot;and&quot;,&quot;cat&quot;]</span><br><span class="line">Output: false</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 300</code></li>
<li><code>1 &lt;= wordDict.length &lt;= 1000</code></li>
<li><code>1 &lt;= wordDict[i].length &lt;= 20</code></li>
<li><code>s</code> and <code>wordDict[i]</code> consist of only lowercase English letters.</li>
<li>All the strings of <code>wordDict</code> are <strong>unique</strong>.</li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><p>法n+1 有用到題目要的 Trie 、DP、memo</p>
<p>一開始沒想到用 memo!!!!!!!!!  導致Limit exceeded</p>
<p>法1 、 法n+1 ，兩個的想法其實都一樣，差在多用了一個Trie 來搜尋</p>
<h3 id="法1-DFS"><a href="#法1-DFS" class="headerlink" title="法1 DFS"></a><code>法1</code> DFS</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wordBreak</span>(<span class="params">self, s: <span class="built_in">str</span>, wordDict: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line"></span><br><span class="line">        memo = &#123;&#125;</span><br><span class="line">        Dicts = <span class="built_in">set</span>(wordDict)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">s, memo</span>):</span><br><span class="line">            <span class="keyword">if</span> s <span class="keyword">in</span> memo:</span><br><span class="line">                <span class="keyword">return</span> memo[s]</span><br><span class="line">            <span class="keyword">if</span> s <span class="keyword">in</span> Dicts:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>( <span class="number">1</span>, <span class="built_in">len</span>(s)+<span class="number">1</span> ):</span><br><span class="line">                <span class="keyword">if</span> s[:i] <span class="keyword">in</span> Dicts  <span class="keyword">and</span> dfs(s[i:] , memo):</span><br><span class="line">                    memo[s] = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            memo[s] = <span class="literal">False</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dfs(s, memo)</span><br></pre></td></tr></table></figure>

<p>N: 字串長度   K:字典長度(個數)</p>
<p>time complexity: </p>
<p>space complexity:</p>
<h3 id="法n-某次錯誤解-Time-Limit-Exceeded"><a href="#法n-某次錯誤解-Time-Limit-Exceeded" class="headerlink" title="法n 某次錯誤解 Time Limit Exceeded"></a><code>法n</code> 某次錯誤解 Time Limit Exceeded</h3><p>邏輯應該為正確，但某原因導致limit exceed</p>
<p>某原因為 有些重複太多次，加上memo會更快</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TrieNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.children = &#123;&#125;</span><br><span class="line">        self.is_word = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.root = TrieNode()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, word</span>):</span><br><span class="line">        node = self.root</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> word:</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> node.children:</span><br><span class="line">                node.children[c] = TrieNode()</span><br><span class="line">            node = node.children[c]</span><br><span class="line">        node.is_word = <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, word</span>):</span><br><span class="line">        node = self.root</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> word:</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> node.children:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            node = node.children[c]</span><br><span class="line">        <span class="keyword">return</span> node.is_word</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wordBreak</span>(<span class="params">self, s: <span class="built_in">str</span>, wordDict: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        dicts = Trie()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> wordDict:</span><br><span class="line">            dicts.insert(w)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">node, string</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> string:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(string) + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> dicts.search(string[:i]) <span class="keyword">and</span> dfs(dicts.root, string[i:]):</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dps(dicts.root, s)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Time Limit Exceeded</span><br><span class="line">35 / 46 testcases passed</span><br><span class="line">Last Executed Input</span><br><span class="line">Use Testcase</span><br><span class="line">s =</span><br><span class="line">&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab&quot;</span><br><span class="line">wordDict =</span><br><span class="line">[&quot;a&quot;,&quot;aa&quot;,&quot;aaa&quot;,&quot;aaaa&quot;,&quot;aaaaa&quot;,&quot;aaaaaa&quot;,&quot;aaaaaaa&quot;,&quot;aaaaaaaa&quot;,&quot;aaaaaaaaa&quot;,&quot;aaaaaaaaaa&quot;]</span><br></pre></td></tr></table></figure>

<h3 id="法n-1-修正"><a href="#法n-1-修正" class="headerlink" title="法n+1 修正"></a><code>法n+1</code> 修正</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TrieNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.children = &#123;&#125;</span><br><span class="line">        self.is_word = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.root = TrieNode()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, word</span>):</span><br><span class="line">        node = self.root</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> word:</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> node.children:</span><br><span class="line">                node.children[c] = TrieNode()</span><br><span class="line">            node = node.children[c]</span><br><span class="line">        node.is_word = <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, word</span>):</span><br><span class="line">        node = self.root</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> word:</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> node.children:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            node = node.children[c]</span><br><span class="line">        <span class="keyword">return</span> node.is_word</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wordBreak</span>(<span class="params">self, s: <span class="built_in">str</span>, wordDict: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        dicts = Trie()</span><br><span class="line">        memo = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> wordDict:</span><br><span class="line">            dicts.insert(w)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dps</span>(<span class="params">node, s</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> s <span class="keyword">in</span> memo:</span><br><span class="line">                <span class="keyword">return</span> memo[s]</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(s) + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> dicts.search(s[:i]) <span class="keyword">and</span> dps(dicts.root, s[i:]):</span><br><span class="line">                    memo[s] = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            memo[s] = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dps(dicts.root, s)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>N: 字串長度   K:字典長度(個數)</p>
<p>time complexity: </p>
<p>space complexity:</p>
<p><del>這題網路上沒找到用Trie解，真奇怪</del></p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>medium</tag>
        <tag>💡</tag>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
        <tag>Hash Table</tag>
        <tag>String</tag>
        <tag>Trie</tag>
        <tag>Memoization</tag>
        <tag>施工中</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#74. Search a 2D Matrix</title>
    <url>/posts/leetcode/Leetcode-74-Search-a-2D-Matrix/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>You are given an <code>m x n</code> integer matrix <code>matrix</code> with the following two properties:</p>
<ul>
<li>Each row is sorted in non-decreasing order.</li>
<li>The first integer of each row is greater than the last integer of the previous row.</li>
</ul>
<p>Given an integer <code>target</code>, return <code>true</code> <em>if</em> <code>target</code> <em>is in</em> <code>matrix</code> <em>or</em> <code>false</code> <em>otherwise</em>.</p>
<p>You must write a solution in <code>O(log(m * n))</code> time complexity.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/10/05/mat.jpg"></p>
<p>!<a href="https://assets.leetcode.com/uploads/2020/10/05/mat.jpg">https://assets.leetcode.com/uploads/2020/10/05/mat.jpg</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3</span><br><span class="line">Output: true</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/10/05/mat2.jpg"></p>
<p>!<a href="https://assets.leetcode.com/uploads/2020/10/05/mat2.jpg">https://assets.leetcode.com/uploads/2020/10/05/mat2.jpg</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13</span><br><span class="line">Output: false</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>m == matrix.length</code></li>
<li><code>n == matrix[i].length</code></li>
<li><code>1 &lt;= m, n &lt;= 100</code></li>
<li><code>10^4 &lt;= matrix[i][j], target &lt;= 10^4</code></li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><p>這題一樣就binary search</p>
<h3 id="法1"><a href="#法1" class="headerlink" title="法1"></a><code>法1</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">searchMatrix</span>(<span class="params">self, matrix: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line"></span><br><span class="line">        m , n = <span class="built_in">len</span>(matrix), <span class="built_in">len</span>(matrix[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = m*n -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right :</span><br><span class="line">            mid = (left + right) // <span class="number">2</span></span><br><span class="line">            mid_val = matrix[ mid // n][mid % n ]</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> mid_val == target:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">elif</span> mid_val &lt; target :</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span> :</span><br><span class="line">                right = mid  - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>Time Complexity: O(log(mn))</p>
<p>Space Complexity: O(1)</p>
<h3 id="法2"><a href="#法2" class="headerlink" title="法2"></a><code>法2</code></h3><p>比第一種還快些</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">searchMatrix</span>(<span class="params">self, matrix: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line"></span><br><span class="line">        m , n = <span class="built_in">len</span>(matrix), <span class="built_in">len</span>(matrix[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = m - <span class="number">1</span> </span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            mid = (left + right) // <span class="number">2</span></span><br><span class="line">            mid_val = matrix[mid][<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">if</span> target == mid_val:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> mid_val &lt; target :</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span> :</span><br><span class="line">                right = mid  - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># row 選擇的是比target小的最大值</span></span><br><span class="line">        row = right</span><br><span class="line"></span><br><span class="line">        left2 = <span class="number">0</span></span><br><span class="line">        right2 = n - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> left2 &lt;= right2:</span><br><span class="line">            mid2 = (left2 + right2) // <span class="number">2</span></span><br><span class="line">            mid_val2 = matrix[row][mid2]</span><br><span class="line">            <span class="keyword">if</span> target == mid_val2:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> mid_val2 &lt; target :</span><br><span class="line">                left2 = mid2 + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span> :</span><br><span class="line">                right2 = mid2  - <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>Time Complexity: O(log(m) + log(n))</p>
<p>Space Complexity: O(1)</p>
<p>O(log(m) + log(n)) &lt; O(log(mn))</p>
<p>所以第二種方法比較快</p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>medium</tag>
        <tag>💡</tag>
        <tag>Array</tag>
        <tag>Matrix</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#135. Candy</title>
    <url>/posts/leetcode/Leetcode-135-Candy/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>There are <code>n</code> children standing in a line. Each child is assigned a rating value given in the integer array <code>ratings</code>.</p>
<p>You are giving candies to these children subjected to the following requirements:</p>
<ul>
<li>Each child must have at least one candy.</li>
<li>Children with a higher rating get more candies than their neighbors.</li>
</ul>
<p>Return <em>the minimum number of candies you need to have to distribute the candies to the children</em>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: ratings = [1,0,2]</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: ratings = [1,2,2]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.</span><br><span class="line">The third child gets 1 candy because it satisfies the above two conditions.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>n == ratings.length</code></li>
<li><code>1 &lt;= n &lt;= 2 * 10^4</code></li>
<li><code>0 &lt;= ratings[i] &lt;= 2 * 10^4</code></li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><p>這題看似簡單，但意外讓我卡很久</p>
<h3 id="法1"><a href="#法1" class="headerlink" title="法1"></a><code>法1</code></h3><p>直接遍歷方式解法，(這解法不確定算不算用到greedy了)</p>
<p>1.每個同學都先發放一顆</p>
<p>2.接下來兩兩比較當下一個較大就多發一顆</p>
<p>3.從後面看回來，同樣的方式，比下一個大的就多發一顆，但多一個加條件，當下一個已經多發就不用改變</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">candy</span>(<span class="params">self, ratings: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        L = <span class="built_in">len</span>(ratings)</span><br><span class="line">        ans = [<span class="number">1</span>]*L</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,L):</span><br><span class="line">            <span class="keyword">if</span> ratings[i-<span class="number">1</span>] &lt; ratings[i]:</span><br><span class="line">                ans[i] = ans[i-<span class="number">1</span>]+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(L-<span class="number">1</span>, <span class="number">0</span>  ,-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> ratings[i-<span class="number">1</span>] &gt; ratings[i] <span class="keyword">and</span> ans[i-<span class="number">1</span>] &lt;= ans[i]:</span><br><span class="line">                ans[i-<span class="number">1</span>] = ans[i]+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(ans)</span><br></pre></td></tr></table></figure>

<p>Time Complexity : O(n)</p>
<p>Space Complexity : O(n)</p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>💡</tag>
        <tag>Array</tag>
        <tag>hard</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#172. Factorial Trailing Zeroes</title>
    <url>/posts/leetcode/Leetcode-172-Factorial-Trailing-Zeroes/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Given an integer <code>n</code>, return <em>the number of trailing zeroes in</em> <code>n!</code>.</p>
<p>Note that <code>n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 3</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: 3! = 6, no trailing zero.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 5</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: 5! = 120, one trailing zero.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 0</span><br><span class="line">Output: 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>0 &lt;= n &lt;= 10^4</code></li>
</ul>
<p><strong>Follow up:</strong> Could you write a solution that works in logarithmic time complexity?</p>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><p>這題先搞懂 <em>trailing zeroes，</em>是指尾巴的0</p>
<p>要計算尾巴有幾個0很簡單就是算其中乘了幾次(5*2)</p>
<p>由於每次乘到5前，一定有2，所以找5有幾個就好</p>
<h3 id="法1"><a href="#法1" class="headerlink" title="法1"></a><code>法1</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">trailingZeroes</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        output = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">while</span> i % <span class="number">5</span> == <span class="number">0</span>:</span><br><span class="line">                output += <span class="number">1</span></span><br><span class="line">                i //= <span class="number">5</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure>

<p>Time Complexity : O(n)</p>
<p><strong>當然這題不需要這麼麻煩</strong></p>
<h3 id="法2-用數學的方式"><a href="#法2-用數學的方式" class="headerlink" title="法2 用數學的方式"></a><code>法2</code> 用數學的方式</h3><p>其實這題數學的思考方法沒這麼麻煩，直接計算幾個5就好</p>
<p>只需要注意當超過5的指數項，會增多</p>
<p>所以也不用O(n)</p>
<p>ex: </p>
<p>n &#x3D; 10 2個5</p>
<p>n &#x3D; 25 6個5</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">trailingZeroes</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        output = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> n&gt;=<span class="number">5</span>:</span><br><span class="line">            output += n//<span class="number">5</span></span><br><span class="line">            n = n//<span class="number">5</span></span><br><span class="line">        <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>medium</tag>
        <tag>💡</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#202. Happy Number</title>
    <url>/posts/leetcode/Leetcode-202-Happy-Number/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Write an algorithm to determine if a number <code>n</code> is happy.</p>
<p>A <strong>happy number</strong> is a number defined by the following process:</p>
<ul>
<li>Starting with any positive integer, replace the number by the sum of the squares of its digits.</li>
<li>Repeat the process until the number equals 1 (where it will stay), or it <strong>loops endlessly in a cycle</strong> which does not include 1.</li>
<li>Those numbers for which this process <strong>ends in 1</strong> are happy.</li>
</ul>
<p>Return <code>true</code> <em>if</em> <code>n</code> <em>is a happy number, and</em> <code>false</code> <em>if not</em>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 19</span><br><span class="line">Output: true</span><br><span class="line">Explanation:</span><br><span class="line">12 + 92 = 82</span><br><span class="line">82 + 22 = 68</span><br><span class="line">62 + 82 = 100</span><br><span class="line">12 + 02 + 02 = 1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 2</span><br><span class="line">Output: false</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 2^31 - 1</code></li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><p>沒甚麼難度的一題</p>
<p>要想辦法將非happy number的挑出來，所以做了一個memo，當經過迴圈運算後，數字又變成memo裏頭數字時，代表不可能是happy number</p>
<h3 id="法1"><a href="#法1" class="headerlink" title="法1"></a><code>法1</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isHappy</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        memo = &#123;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> n &gt; <span class="number">0</span> <span class="keyword">and</span> n <span class="keyword">not</span> <span class="keyword">in</span> memo:</span><br><span class="line">            n2 = <span class="number">0</span></span><br><span class="line">            n_s = <span class="built_in">str</span>(n)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(n_s)):</span><br><span class="line">                n2 += <span class="built_in">int</span>(n_s[i])*<span class="built_in">int</span>(n_s[i])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> n2 == <span class="number">1</span> :</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            memo[n] = <span class="literal">False</span></span><br><span class="line">            </span><br><span class="line">            n = n2</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>memo 可以改成 set()，不用用dict</p>
<p>運算其實可以不用轉變字串</p>
<p>用除於10的餘數來做也是可以</p>
<p>但這邊就不寫了</p>
<h3 id="法2-Two-pointer"><a href="#法2-Two-pointer" class="headerlink" title="法2 Two pointer!!"></a><code>法2</code> Two pointer!!</h3><p>一開始想不到可以用這樣的方法</p>
<p>two pointer 這邊建立兩個pointer 一個快 一個慢</p>
<p>當兩個pointer 同樣時停止</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isHappy</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        p1,p2 = n,n</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">f_sqr</span>(<span class="params">n</span>):</span><br><span class="line">            total = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">                total += (n%<span class="number">10</span>) * (n%<span class="number">10</span>)</span><br><span class="line">                n //= <span class="number">10</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            p1 = f_sqr(p1)</span><br><span class="line">            p2 = f_sqr(f_sqr(p2))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> p1 == p2:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> p1 == <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>easy</tag>
        <tag>Hash Table</tag>
        <tag>Two Pointers</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>shioaji 永豐API</title>
    <url>/posts/shioaji-%E6%B0%B8%E8%B1%90API/</url>
    <content><![CDATA[<h1 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">!pip install shioaji</span><br><span class="line">!pip install -U shioaji</span><br><span class="line"><span class="comment"># docker run -it sinotrade/shioaji:latest</span></span><br><span class="line"><span class="comment"># docker run -p 8888:8888 sinotrade/shioaji:jupyter</span></span><br></pre></td></tr></table></figure>

<h1 id="Login"><a href="#Login" class="headerlink" title="Login"></a>Login</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> shioaji <span class="keyword">as</span> sj</span><br><span class="line"><span class="built_in">print</span>(sj.__version__)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模擬模式</span></span><br><span class="line">api = sj.Shioaji(simulation = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需到官方網站申請API</span></span><br><span class="line">accounts =  api.login(<span class="string">&quot;YOUR_API_KEY&quot;</span>, </span><br><span class="line">											<span class="string">&quot;YOUR_SECRET_KEY&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(accounts)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 憑證需要先下載永豐windows App ，OS X 就沒有研究了</span></span><br><span class="line">api.activate_ca(</span><br><span class="line">    ca_path=<span class="string">&quot;/c/your/ca/path/Sinopac.pfx&quot;</span>,</span><br><span class="line">    ca_passwd=<span class="string">&quot;YOUR_CA_PASSWORD&quot;</span>,</span><br><span class="line">    person_id=<span class="string">&quot;Person of this Ca&quot;</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="Logout"><a href="#Logout" class="headerlink" title="Logout"></a>Logout</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">api.logout()</span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure>

<h1 id="下單"><a href="#下單" class="headerlink" title="下單"></a>下單</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># contract - 合同</span></span><br><span class="line">contract = api.Contracts.Stocks.TSE[<span class="string">&quot;2890&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># order - 單</span></span><br><span class="line">order = api.Order(</span><br><span class="line">    price = <span class="number">18</span>, </span><br><span class="line">    quantity = <span class="number">1</span>, </span><br><span class="line">    action = sj.constant.Action.Buy, </span><br><span class="line">    price_type = sj.constant.StockPriceType.LMT, </span><br><span class="line">    order_type = sj.constant.OrderType.ROD, </span><br><span class="line">    account = api.stock_account</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># place order</span></span><br><span class="line">trade = api.place_order(contract, order)</span><br><span class="line">trade</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;trade</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Trade(</span></span><br><span class="line"><span class="string">    contract=Stock(</span></span><br><span class="line"><span class="string">        exchange=&lt;Exchange.TSE: &#x27;TSE&#x27;&gt;,</span></span><br><span class="line"><span class="string">        code=&#x27;2890&#x27;,</span></span><br><span class="line"><span class="string">        symbol=&#x27;TSE2890&#x27;,</span></span><br><span class="line"><span class="string">        name=&#x27;永豐金&#x27;,</span></span><br><span class="line"><span class="string">        category=&#x27;17&#x27;,</span></span><br><span class="line"><span class="string">        unit=1000,</span></span><br><span class="line"><span class="string">        limit_up=19.05,</span></span><br><span class="line"><span class="string">        limit_down=15.65,</span></span><br><span class="line"><span class="string">        reference=17.35,</span></span><br><span class="line"><span class="string">        update_date=&#x27;2023/09/11&#x27;,</span></span><br><span class="line"><span class="string">        day_trade=&lt;DayTrade.Yes: &#x27;Yes&#x27;&gt;</span></span><br><span class="line"><span class="string">    ),</span></span><br><span class="line"><span class="string">    order=Order(</span></span><br><span class="line"><span class="string">        action=&lt;Action.Buy: &#x27;Buy&#x27;&gt;,</span></span><br><span class="line"><span class="string">        price=18,</span></span><br><span class="line"><span class="string">        quantity=1,</span></span><br><span class="line"><span class="string">        id=&#x27;fa0bc4c8&#x27;,</span></span><br><span class="line"><span class="string">        seqno=&#x27;000108&#x27;,</span></span><br><span class="line"><span class="string">        ordno=&#x27;000003&#x27;,</span></span><br><span class="line"><span class="string">        account=Account(</span></span><br><span class="line"><span class="string">            account_type=&lt;AccountType.Stock: &#x27;S&#x27;&gt;,</span></span><br><span class="line"><span class="string">            person_id=&#x27;F129760296&#x27;,</span></span><br><span class="line"><span class="string">            broker_id=&#x27;9A9K&#x27;,</span></span><br><span class="line"><span class="string">            account_id=&#x27;0264271&#x27;</span></span><br><span class="line"><span class="string">        ),</span></span><br><span class="line"><span class="string">        price_type=&lt;StockPriceType.LMT: &#x27;LMT&#x27;&gt;,</span></span><br><span class="line"><span class="string">        order_type=&lt;OrderType.ROD: &#x27;ROD&#x27;&gt;</span></span><br><span class="line"><span class="string">    ),</span></span><br><span class="line"><span class="string">    status=OrderStatus(</span></span><br><span class="line"><span class="string">        id=&#x27;fa0bc4c8&#x27;,</span></span><br><span class="line"><span class="string">        status=&lt;Status.PendingSubmit: &#x27;PendingSubmit&#x27;&gt;,</span></span><br><span class="line"><span class="string">        status_code=&#x27;00&#x27;,</span></span><br><span class="line"><span class="string">        order_datetime=datetime.datetime(2023, 9, 11, 8, 1, 23, 168095),</span></span><br><span class="line"><span class="string">        deals=[]</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="contract"><a href="#contract" class="headerlink" title="contract"></a>contract</h3><h3 id="Order-Attributes"><a href="#Order-Attributes" class="headerlink" title="Order Attributes"></a><strong>Order Attributes</strong></h3><ul>
<li><code>price</code> (<code>float</code> or <code>int</code>): the price of order</li>
<li><code>quantity</code> (<code>int</code>): the quantity of order</li>
<li><code>action</code> (<code>str</code>): order action to buy or sell<ul>
<li>{Buy, Sell}</li>
</ul>
</li>
<li><code>price_type</code> (<code>str</code>): pricing type of order<ul>
<li>{LMT, MKT, MKP} (限價、市價、範圍市價)</li>
</ul>
</li>
<li><code>order_type</code> (<code>str</code>): the type of order<ul>
<li>{ROD, IOC, FOK} (掛單到收盤，允許部分成交，全部成交否則取消)</li>
</ul>
</li>
<li><code>order_cond</code> (<code>str</code>): order condition stock only<ul>
<li>{Cash, MarginTrading, ShortSelling} (現股、融資、融券)</li>
</ul>
</li>
<li><code>order_lot</code> (<code>str</code>): the type of order<ul>
<li>{Common, Fixing, Odd, IntradayOdd} (整股、定盤、盤後零股、盤中零股)</li>
</ul>
</li>
</ul>
<blockquote>
<p><code>daytrade_short</code> {<code>bool</code>}: the type of first sell<br>{True, False}</p>
<p><code>custom_field</code> {<code>str</code>}: memo field, only letters and numbers are allowed, and the maximum length is 6.<br><code>account</code> (:<code>obj</code>:Account): which account to place this order<br><code>ca</code> (<code>binary</code>): the ca of this order</p>
</blockquote>
]]></content>
      <tags>
        <tag>api</tag>
        <tag>python</tag>
        <tag>shioaji</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#53. Maximum Subarray</title>
    <url>/posts/leetcode/Leetcode-53-Maximum-Subarray/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Given an integer array <code>nums</code>, find the</p>
<p>subarray</p>
<p>with the largest sum, and return</p>
<p><em>its sum</em></p>
<p>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [-2,1,-3,4,-1,2,1,-5,4]</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: The subarray [4,-1,2,1] has the largest sum 6.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [1]</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: The subarray [1] has the largest sum 1.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [5,4,-1,7,8]</span><br><span class="line">Output: 23</span><br><span class="line">Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 10^5</code></li>
<li><code>10^4 &lt;= nums[i] &lt;= 10^4</code></li>
</ul>
<p><strong>Follow up:</strong> If you have figured out the <code>O(n)</code> solution, try coding another solution using the <strong>divide and conquer</strong> approach, which is more subtle.</p>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><h2 id="法1"><a href="#法1" class="headerlink" title="法1"></a><code>法1</code></h2><p>原理就是每次作判別，計算當前最大的，和nums[ i ]比較原因是，代表nums[ i ]，比前面都大</p>
<p>e.g.</p>
<p>nums &#x3D;[1,-1,0,-1,1]</p>
<p>⇒dp &#x3D;[1, 0, 0, -1, 1]</p>
<hr>
<p>nums &#x3D;[-1 ,-2 ,0]</p>
<p>⇒dp &#x3D;[-1, -2, 0]</p>
<hr>
<p>nums &#x3D;[5,4,-1,7,8]</p>
<p>⇒dp &#x3D;[5, 9, 8, 15, 23]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxSubArray</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        dp = [<span class="number">0</span>]*<span class="built_in">len</span>(nums)</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(nums)):</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i-<span class="number">1</span>]+nums[i],nums[i])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(dp)</span><br></pre></td></tr></table></figure>

<p>Time Complexity: O(N)</p>
<p>Space Complexity:O(N)</p>
<hr>
<p>這邊可以改成兩個變數，currMax、sumMax，這樣Space Complexity 可降為O(1)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxSubArray</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        currMax = <span class="number">0</span></span><br><span class="line">        sumMax= <span class="built_in">float</span>(<span class="string">&#x27;-inf&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            currMax = <span class="built_in">max</span>(num, num + currMax)</span><br><span class="line">            sumMax= <span class="built_in">max</span>(currMax, sumMax)</span><br><span class="line">        <span class="keyword">return</span> sumMax</span><br></pre></td></tr></table></figure>

<p>Time Complexity: O(N)</p>
<p>Space Complexity:O(1)</p>
<h2 id="法2"><a href="#法2" class="headerlink" title="法2"></a><code>法2</code></h2><p>題目說除了O(n) 還有利用<strong>divide and conquer 的解，關鍵就是<code>拆分→計算→合併</code></strong></p>
<p>在遞迴時，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">                    [整串數列]</span><br><span class="line">          /             |           \</span><br><span class="line">     [左半部分]      [中間部分]     [右半部分]</span><br><span class="line">     /   |   \       /   |   \     /   |   \</span><br><span class="line">[左]   [中] [右]  [左] [中] [右]  [左] [中] [右]</span><br><span class="line">  ...           ...             ...</span><br></pre></td></tr></table></figure>

<p><code>拆成</code>三部分 左 中 右</p>
<p><code>計算</code> 左右遍歷，中的最大值</p>
<p><code>合併</code> Max(左 ,中 ,右)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxSubArray</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># 中間往左右計算，找最大</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">maxCrossingSum</span>(<span class="params">nums, low, mid, high</span>):</span><br><span class="line">            left_sum = <span class="built_in">float</span>(<span class="string">&#x27;-inf&#x27;</span>)</span><br><span class="line">            right_sum = <span class="built_in">float</span>(<span class="string">&#x27;-inf&#x27;</span>)</span><br><span class="line">            max_left = <span class="number">0</span></span><br><span class="line">            max_right = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 往左邊慢慢加</span></span><br><span class="line">            <span class="comment"># 計算左半部分的最大子list和</span></span><br><span class="line">            <span class="comment"># 包含mid</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(mid, low - <span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">                max_left += nums[i]</span><br><span class="line">                <span class="keyword">if</span> max_left &gt; left_sum:</span><br><span class="line">                    left_sum = max_left</span><br><span class="line">            <span class="comment"># 往右邊慢慢加</span></span><br><span class="line">            <span class="comment"># 計算右半部分的最大子list和</span></span><br><span class="line">            <span class="comment"># 不包含mid</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(mid + <span class="number">1</span>, high + <span class="number">1</span>):</span><br><span class="line">                max_right += nums[i]</span><br><span class="line">                <span class="keyword">if</span> max_right &gt; right_sum:</span><br><span class="line">                    right_sum = max_right</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 返回跨越中點的最大子list和</span></span><br><span class="line">            <span class="keyword">return</span> left_sum + right_sum</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 遞迴函数</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">findMaxSubArray</span>(<span class="params">nums, low, high</span>):</span><br><span class="line">            <span class="comment"># 最下層：只有一個元素</span></span><br><span class="line">            <span class="keyword">if</span> low == high:</span><br><span class="line">                <span class="keyword">return</span> nums[low]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 找到中點</span></span><br><span class="line">            mid = (low + high) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 遞迴地找到左半部分和右半部分的最大子list和</span></span><br><span class="line">            left_max = findMaxSubArray(nums, low, mid)</span><br><span class="line">            right_max = findMaxSubArray(nums, mid + <span class="number">1</span>, high)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 找到跨越中點的最大子list和</span></span><br><span class="line">            cross_max = maxCrossingSum(nums, low, mid, high)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 返回三者中的最大值</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">max</span>(left_max, right_max, cross_max)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> findMaxSubArray(nums, <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>Time Complexity: O(nlogn)</p>
<p>Space Complexity:O(logn) #主要來自 遞迴的</p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>medium</tag>
        <tag>💡</tag>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
        <tag>Divide and Conquer</tag>
      </tags>
  </entry>
  <entry>
    <title>visual studio ctrl+z delete whole cell(Solve)</title>
    <url>/posts/gossip/visual-studio-ctrl-z-delete-whole-cell(Solve)/</url>
    <content><![CDATA[<h2 id="目前找到兩個方法"><a href="#目前找到兩個方法" class="headerlink" title="目前找到兩個方法"></a>目前找到兩個方法</h2><p><code>Ctrl + Z</code> 會把Cell刪除，真的是惡夢</p>
<p>可以先試試<code>Ctrl + Y</code> or <code>ESC + Z</code></p>
<p>左邊 Timeline 也可以找到過去的時間線</p>
<p><img src="https://file.notion.so/f/f/aa7d30ee-c6ed-4ce4-91c8-c79bede1cbaf/9ae092de-942f-4088-86fc-ac3a7f03c092/Untitled.png?id=516418d1-581d-41a0-9137-b9b1bc9ea977&table=block&spaceId=aa7d30ee-c6ed-4ce4-91c8-c79bede1cbaf&expirationTimestamp=1695182400000&signature=zYLrzk0XP9isfsTMP-mlpl-YZgNsHERxx7DcOIQd6xA&downloadName=Untitled.png" alt="Untitled"></p>
]]></content>
      <tags>
        <tag>gossip</tag>
        <tag>python</tag>
        <tag>visual studio</tag>
      </tags>
  </entry>
  <entry>
    <title>Conda 指令</title>
    <url>/posts/gossip/Conda-%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="配置Conda環境"><a href="#配置Conda環境" class="headerlink" title="配置Conda環境"></a>配置Conda環境</h1><p><code>以下都是在Anaconda prompt下執行</code></p>
<h2 id="conda版本"><a href="#conda版本" class="headerlink" title="conda版本"></a>conda版本</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conda update conda</span><br></pre></td></tr></table></figure>

<h2 id="列出和刪除環境、package"><a href="#列出和刪除環境、package" class="headerlink" title="列出和刪除環境、package"></a><strong>列出和刪除環境、package</strong></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看已建置環境</span></span><br><span class="line">conda env <span class="built_in">list</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 刪除整個envName的環境</span></span><br><span class="line">conda env remove --name envName</span><br><span class="line"></span><br><span class="line"><span class="comment"># 刪除envName中pandas 的package</span></span><br><span class="line">conda remove --name envName pandas </span><br></pre></td></tr></table></figure>

<h2 id="創建新環境"><a href="#創建新環境" class="headerlink" title="創建新環境"></a><strong>創建新環境</strong></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 建置名為envName的環境</span></span><br><span class="line">conda create --name envName python=<span class="number">3.10</span></span><br></pre></td></tr></table></figure>

<h2 id="激活和退出環境"><a href="#激活和退出環境" class="headerlink" title="激活和退出環境"></a><strong>激活和退出環境</strong></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 激活環境</span></span><br><span class="line">conda activate  envName</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出環境</span></span><br><span class="line">conda deactivate  envName</span><br></pre></td></tr></table></figure>

<h2 id="安裝、升級package"><a href="#安裝、升級package" class="headerlink" title="安裝、升級package"></a>安裝、升級package</h2><p>假定已經在(envName)想要設定的環境底下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安裝 matplotlib numpy tensorflow pandas opencv-python </span></span><br><span class="line">conda install matplotlib numpy tensorflow pandas opencv-python </span><br><span class="line"></span><br><span class="line"><span class="comment"># update</span></span><br><span class="line">conda update numpy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出已安裝的軟體包</span></span><br><span class="line">conda <span class="built_in">list</span></span><br></pre></td></tr></table></figure>

<h2 id="一些雜七雜八"><a href="#一些雜七雜八" class="headerlink" title="一些雜七雜八"></a>一些雜七雜八</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看軟體包之間的依賴關係樹</span></span><br><span class="line">conda <span class="built_in">list</span> --tree   </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找可用軟體包</span></span><br><span class="line">conda search</span><br><span class="line"></span><br><span class="line"><span class="comment"># 當前環境配置導出到YAML文件</span></span><br><span class="line">conda env export &gt; environment.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># clone</span></span><br><span class="line">conda create --name newEnv --clone envName</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>gossip</tag>
        <tag>python</tag>
        <tag>conda</tag>
      </tags>
  </entry>
  <entry>
    <title>python 螢幕、鏡頭錄製</title>
    <url>/posts/tips/python-%E8%9E%A2%E5%B9%95%E3%80%81%E9%8F%A1%E9%A0%AD%E9%8C%84%E8%A3%BD/</url>
    <content><![CDATA[<h1 id="使用pyautogui-、-openCV"><a href="#使用pyautogui-、-openCV" class="headerlink" title="使用pyautogui 、 openCV"></a>使用pyautogui 、 openCV</h1><p>pyautogui 用來抓螢幕寬高，及螢幕截圖</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 螢幕寬高</span></span><br><span class="line">screen_width, screen_height = pyautogui.size()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 設定視頻文件參數</span></span><br><span class="line">fourcc = cv2.VideoWriter_fourcc(*<span class="string">&#x27;XVID&#x27;</span>)</span><br><span class="line">out = cv2.VideoWriter(<span class="string">&#x27;screen_recording.avi&#x27;</span>, fourcc, <span class="number">20.0</span>, (screen_width, screen_height))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 錄製時間（秒）</span></span><br><span class="line">duration = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 開始錄製</span></span><br><span class="line">start_time = time.time()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (time.time() - start_time) &lt; duration:</span><br><span class="line">    <span class="comment"># 截取當前螢幕畫面</span></span><br><span class="line">    screenshot = pyautogui.screenshot()</span><br><span class="line">    frame = np.array(screenshot)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 轉換BGR到RGB</span></span><br><span class="line">    frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 寫入視頻文件</span></span><br><span class="line">    out.write(frame)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 顯示錄製的畫面</span></span><br><span class="line">    <span class="comment"># cv2.imshow(&#x27;Recording&#x27;, frame)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 釋放資源</span></span><br><span class="line">out.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>

<h2 id="改為設定指定目錄"><a href="#改為設定指定目錄" class="headerlink" title="改為設定指定目錄"></a>改為設定指定目錄</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 螢幕寬高</span></span><br><span class="line">screen_width, screen_height = pyautogui.size()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下載文件夾路徑</span></span><br><span class="line">download_folder = os.path.expanduser(<span class="string">&quot;~/Downloads&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 設定視頻文件參數</span></span><br><span class="line">output_file = os.path.join(download_folder, <span class="string">&#x27;screen_recording.avi&#x27;</span>)</span><br><span class="line">fourcc = cv2.VideoWriter_fourcc(*<span class="string">&#x27;XVID&#x27;</span>)</span><br><span class="line">out = cv2.VideoWriter(output_file, fourcc, <span class="number">20.0</span>, (screen_width, screen_height))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 錄製時間（秒）</span></span><br><span class="line">duration = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 開始錄製</span></span><br><span class="line">start_time = time.time()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (time.time() - start_time) &lt; duration:</span><br><span class="line">    <span class="comment"># 截取當前螢幕畫面</span></span><br><span class="line">    screenshot = pyautogui.screenshot()</span><br><span class="line">    frame = np.array(screenshot)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 轉換BGR到RGB</span></span><br><span class="line">    frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 寫入視頻文件</span></span><br><span class="line">    out.write(frame)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 顯示錄製的畫面</span></span><br><span class="line">    <span class="comment"># cv2.imshow(&#x27;Recording&#x27;, frame)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 釋放資源</span></span><br><span class="line">out.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 顯示保存的文件路徑</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;視頻文件已保存到：<span class="subst">&#123;output_file&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="儲存GIF"><a href="#儲存GIF" class="headerlink" title="儲存GIF"></a>儲存GIF</h1><p>openCV 沒有內建的GIF 格式</p>
<p>改為放進一般List 進行 save</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">frame[<span class="number">0</span>].save(<span class="string">&quot;test.gif&quot;</span>, save_all=<span class="literal">True</span>, append_images=output[<span class="number">1</span>:], duration=<span class="number">150</span>, loop=<span class="number">0</span>, disposal=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># frame[0]：gif 動畫第一個影格</span></span><br><span class="line"><span class="comment"># 第一欄：儲存路徑</span></span><br><span class="line"><span class="comment"># save_all：設定 True 表示儲存所有影格，預設 False ，將會只儲存第一個影格</span></span><br><span class="line"><span class="comment"># append_images：要添加到 frame 影格的其他影格，串列格式，使用 frame[1:] 往後添加</span></span><br><span class="line"><span class="comment"># duration：影格間隔時間，預設 100</span></span><br><span class="line"><span class="comment"># loop：循環次數，預設 0，0 表示無限迴圈</span></span><br><span class="line"><span class="comment"># disposal：影格處理方式，預設 0，0 表示不處理，2 表示移除背景</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image,ImageSequence</span><br><span class="line"></span><br><span class="line"><span class="comment"># 螢幕寬高</span></span><br><span class="line">screen_width, screen_height = pyautogui.size()</span><br><span class="line"></span><br><span class="line">output = []                       <span class="comment"># 建立輸出的空串列</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 錄製時間（秒）</span></span><br><span class="line">duration = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 開始錄製</span></span><br><span class="line">start_time = time.time()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (time.time() - start_time) &lt; duration:</span><br><span class="line">    <span class="comment"># 截取當前螢幕畫面</span></span><br><span class="line">    screenshot = pyautogui.screenshot()</span><br><span class="line">    frame = np.array(screenshot)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 轉換BGR到RGB</span></span><br><span class="line">    frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 由於np.array無法儲存，這邊轉換成PIL格式</span></span><br><span class="line">    f = cv2.cvtColor(frame, cv2.COLOR_BGRA2RGBA)  <span class="comment"># 轉換顏色</span></span><br><span class="line">    f = Image.fromarray(frame)                    <span class="comment"># 轉換成 PIL 格式</span></span><br><span class="line">    f = f.convert(<span class="string">&#x27;RGB&#x27;</span>)                      <span class="comment"># 轉換顏色</span></span><br><span class="line">    output.append(f)                            <span class="comment"># 添加到 output</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 顯示錄製的畫面</span></span><br><span class="line">    <span class="comment"># cv2.imshow(&#x27;Recording&#x27;, frame)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 儲存 GIF</span></span><br><span class="line">output[<span class="number">0</span>].save(<span class="string">&quot;test.gif&quot;</span>, save_all=<span class="literal">True</span>, append_images=output[<span class="number">1</span>:], duration=<span class="number">150</span>, loop=<span class="number">0</span>, disposal=<span class="number">2</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>

<h1 id="使用-VideoCapture錄製"><a href="#使用-VideoCapture錄製" class="headerlink" title="使用 VideoCapture錄製"></a>使用 VideoCapture錄製</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">cap = cv2.VideoCapture(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># Define the codec and create VideoWriter object</span></span><br><span class="line">fourcc = cv2.VideoWriter_fourcc(*<span class="string">&#x27;XVID&#x27;</span>)</span><br><span class="line">out = cv2.VideoWriter(<span class="string">&#x27;output.avi&#x27;</span>, fourcc, <span class="number">20.0</span>, (<span class="number">640</span>,  <span class="number">480</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> cap.isOpened():</span><br><span class="line">    ret, frame = cap.read()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Can&#x27;t receive frame (stream end?). Exiting ...&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 水平上下翻轉影像</span></span><br><span class="line">    <span class="comment">#frame = cv2.flip(frame, 0)</span></span><br><span class="line">    <span class="comment"># write the flipped frame</span></span><br><span class="line">    out.write(frame)</span><br><span class="line">    cv2.imshow(<span class="string">&#x27;frame&#x27;</span>, frame)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>) <span class="keyword">or</span> cv2.waitKey(<span class="number">1</span>) == <span class="number">27</span> <span class="keyword">or</span>  cv2.getWindowProperty(<span class="string">&#x27;frame&#x27;</span>, cv2.WND_PROP_VISIBLE) &lt; <span class="number">1.0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment"># Release everything if job is finished</span></span><br><span class="line">cap.release()</span><br><span class="line">out.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>python</tag>
        <tag>opencv</tag>
        <tag>pyautogui</tag>
        <tag>tips</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World，Hexo</title>
    <url>/posts/gossip/hello-world%EF%BC%8CHexo/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <tags>
        <tag>gossip</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>(Bug)C# System.IO.IOException:</title>
    <url>/posts/BugRecord/Bug-C-System-IO-IOException/</url>
    <content><![CDATA[<p>System.IO.IOException: ‘由於另一個處理序正在使用檔案 ‘C:....’，所以無法存取該檔案。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原先我用一個</span></span><br><span class="line">path = <span class="string">@&quot;C:\..\..&quot;</span></span><br><span class="line"></span><br><span class="line">System.Windows.Controls.Image image = <span class="keyword">new</span> System.Windows.Controls.Image();</span><br><span class="line">image.Source = path</span><br><span class="line"></span><br><span class="line"><span class="comment">//後面我要刪除這個檔案時</span></span><br><span class="line">File.Delete(path)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">region</span> 錯誤訊息</span></span><br><span class="line">System.IO.IOException: <span class="string">&#x27;由於另一個處理序正在使用檔案 &#x27;</span>C:\..\.<span class="number">.&#x27;</span>，所以無法存取該檔案。</span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span></span></span><br></pre></td></tr></table></figure>

<h2 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a>Solve</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">path = <span class="string">@&quot;C:\..\..&quot;</span></span><br><span class="line"></span><br><span class="line">System.Windows.Controls.Image image = <span class="keyword">new</span> System.Windows.Controls.Image();</span><br><span class="line">System.Drawing.Image img = System.Drawing.Image.FromFile(ImagePath);</span><br><span class="line">image.Source = System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap(</span><br><span class="line">                                          ((Bitmap)img).GetHbitmap(),</span><br><span class="line">                                            IntPtr.Zero,</span><br><span class="line">                                            Int32Rect.Empty,</span><br><span class="line">                                          BitmapSizeOptions.FromEmptyOptions());</span><br><span class="line"></span><br><span class="line">img.Dispose();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 順帶用try catch</span></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    File.Delete(fullPath);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    MessageBox.Show(<span class="string">&quot;檔案正在使用中，無法刪除。&quot;</span>, <span class="string">&quot;刪除失敗&quot;</span>, MessageBoxButton.OK, MessageBoxImage.Error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>這樣程序就不會綁定這圖片</p>
]]></content>
      <tags>
        <tag>C#</tag>
        <tag>Bug</tag>
      </tags>
  </entry>
  <entry>
    <title>.Net 上的圖像類型(Bitmap、Image、Mat、UMat)</title>
    <url>/posts/tips/Net-%E4%B8%8A%E7%9A%84%E5%9C%96%E5%83%8F%E9%A1%9E%E5%9E%8B-Bitmap%E3%80%81Image%E3%80%81Mat%E3%80%81UMat/</url>
    <content><![CDATA[<ol>
<li><p><code>Bitmap:</code></p>
<ul>
<li>Bitmap 是一個在 C# 中常用的圖像類型，它屬於 System.Drawing 命名空間。它用於表示和處理點陣圖圖像。</li>
<li>Bitmap 是一個基於像素的圖像，每個像素都包含顏色信息。您可以輕鬆地創建、讀取、繪製和處理 Bitmap 圖像。</li>
<li>這是一個簡單且易於使用的圖像類型，適用於大多數基本圖像處理需求，但在某些情況下可能會有性能問題。</li>
</ul>
</li>
<li><p><code>Image&lt;TColor, TColor&gt;:</code></p>
<ul>
<li>Image&lt;TColor, TColor&gt; 通常是指一種泛型圖像類型，通常用於 .NET Core 和 .NET 5+ 中的圖像處理庫，如 SixLabors.ImageSharp。</li>
<li>這是一種較新的圖像類型，支援更多的圖像處理功能，例如縮放、旋轉、濾鏡等。</li>
<li>Image&lt;TColor, TColor&gt; 使用泛型，因此您可以指定圖像的顏色類型（例如 RGB、灰度等），這使得它更具彈性和可擴展性。</li>
</ul>
</li>
<li><p><code>Mat:</code></p>
<ul>
<li>Mat 是一個常見於 OpenCV（Open Source Computer Vision Library）中的圖像類型，用於 C# 中的 OpenCVSharp 或 Emgu.CV 等圖像處理庫。</li>
<li>Mat 是一種多維數組（通常是2D或3D）表示方式，可以表示圖像、視頻幀或其他數據。</li>
<li>它具有豐富的圖像處理和計算能力，包括運算子重載，可以輕鬆進行像素級操作和高級圖像處理。</li>
</ul>
</li>
<li><p><code>UMat:</code></p>
<ul>
<li>UMat（Unified Memory）是一種 Mat 的變種，用於支援 OpenCV 中的 GPU 加速處理。</li>
<li>它允許在 CPU 和 GPU 之間共享圖像數據，以實現更快的圖像處理。</li>
<li>UMat 可以使用與 Mat 類似的方式進行操作，但能夠充分利用現代圖形硬件加速計算。</li>
</ul>
<h1 id="轉換"><a href="#轉換" class="headerlink" title="轉換"></a>轉換</h1> <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> SixLabors.ImageSharp;</span><br><span class="line"><span class="keyword">using</span> SixLabors.ImageSharp.PixelFormats;</span><br><span class="line"><span class="keyword">using</span> Emgu.CV;</span><br><span class="line"><span class="keyword">using</span> Emgu.CV.CvEnum;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ImageConverter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Bitmap 轉換為 Image&lt;TColor, TColor&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Image&lt;Rgba32&gt; <span class="title">BitmapToImage</span>(<span class="params">Bitmap bitmap</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (MemoryStream stream = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 將 Bitmap 轉換為 byte 數組</span></span><br><span class="line">            bitmap.Save(stream, ImageFormat.Png);</span><br><span class="line">            <span class="built_in">byte</span>[] imageBytes = stream.ToArray();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用 ImageSharp 加載圖像</span></span><br><span class="line">            Image&lt;Rgba32&gt; image = Image.Load&lt;Rgba32&gt;(imageBytes);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> image;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Image&lt;TColor, TColor&gt; 轉換為 Bitmap</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">ImageToBitmap</span>(<span class="params">Image&lt;Rgba32&gt; image</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (MemoryStream stream = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 將 ImageSharp 圖像保存為 Bitmap 格式</span></span><br><span class="line">            image.Save(stream, ImageFormat.Png);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 創建並返回 Bitmap</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Bitmap(stream);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Mat 轉換為 Bitmap</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">MatToBitmap</span>(<span class="params">Mat mat</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 使用 Emgu.CV 將 Mat 轉換為 Bitmap</span></span><br><span class="line">        <span class="keyword">return</span> mat.ToImage&lt;Bgr, <span class="built_in">byte</span>&gt;().Bitmap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Bitmap 轉換為 Mat</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mat <span class="title">BitmapToMat</span>(<span class="params">Bitmap bitmap</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 使用 Emgu.CV 將 Bitmap 轉換為 Mat</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Mat(bitmap, DepthType.Cv8U, <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Mat 轉換為 UMat</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UMat <span class="title">MatToUMat</span>(<span class="params">Mat mat</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 使用 Emgu.CV 將 Mat 轉換為 UMat</span></span><br><span class="line">        UMat umat = <span class="keyword">new</span> UMat();</span><br><span class="line">        mat.CopyTo(umat);</span><br><span class="line">        <span class="keyword">return</span> umat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// UMat 轉換為 Mat</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mat <span class="title">UMatToMat</span>(<span class="params">UMat umat</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 使用 Emgu.CV 將 UMat 轉換為 Mat</span></span><br><span class="line">        Mat mat = <span class="keyword">new</span> Mat();</span><br><span class="line">        umat.CopyTo(mat);</span><br><span class="line">        <span class="keyword">return</span> mat;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>tips</tag>
        <tag>C#</tag>
        <tag>OpenCV</tag>
        <tag>Bitmap</tag>
        <tag>Image</tag>
      </tags>
  </entry>
  <entry>
    <title>紀錄Amazon從購買到送達時間</title>
    <url>/posts/gossip/%E7%B4%80%E9%8C%84Amazon%E5%BE%9E%E8%B3%BC%E8%B2%B7%E5%88%B0%E9%80%81%E9%81%94%E6%99%82%E9%96%93/</url>
    <content><![CDATA[<p>發貨地點在美國</p>
<p>D <code>2023/9/25下單</code></p>
<p>D+4 <code>2023/9/29 中秋節</code></p>
<p>D+7 <code>2023/10/2 發貨</code></p>
<p>D+9 <code>2023/10/4 ezway 預先委任</code></p>
<p>D+11 <code>2023/10/6 入港口 清關</code></p>
<p>D+12 <code>2023/10/7 送至派送商倉庫</code></p>
<p>D+15 、D+16 <strong><code>2023/10/9 202310/10 國慶放假</code></strong></p>
<p>D+17 <code>2023/10/12 12:03 出貨</code></p>
<p>D+18 <code>2023/10/12 10:00 再次顯示 開始送貨並預計今天抵達</code></p>
<p>D+18 <code>2023/10/12 15:40 寄Email，很抱歉，ECMS Express 嘗試遞送給您時遇到問題。 他們會再試一次。</code></p>
<p>D+19 <code>2023/10/13 11:29 收到貨</code></p>
<p>經歷15天工作天 、4天周末日(共19天)</p>
<p>工作天2天受到假期影響(雙十國慶，國外沒有過中秋所以沒有影響)</p>
<p>D+18 問客服有何問題，說是電話沒接，去看通訊錄，都電話響2、3秒就掛掉，根本接不到，還以為是詐騙</p>
<p>比原先amzn說D+26(2023&#x2F;10&#x2F;20)到貨，早了7天</p>
]]></content>
      <tags>
        <tag>gossip</tag>
        <tag>life</tag>
      </tags>
  </entry>
</search>
