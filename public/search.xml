<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/posts/gossip/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <tags>
        <tag>gossip</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>完成的網站了，聊一下</title>
    <url>/posts/gossip/%E5%AE%8C%E6%88%90%E7%9A%84%E7%B6%B2%E7%AB%99%E4%BA%86%EF%BC%8C%E8%81%8A%E4%B8%80%E4%B8%8B/</url>
    <content><![CDATA[<p>post 測試 123</p>
<p>介紹一下這個網站使用的技術</p>
<h2 id="網站製作"><a href="#網站製作" class="headerlink" title="網站製作"></a>網站製作</h2><h3 id="使用-Hexo"><a href="#使用-Hexo" class="headerlink" title="使用 Hexo"></a>使用 Hexo</h3><h3 id="使用-Butterfly-主題"><a href="#使用-Butterfly-主題" class="headerlink" title="使用 Butterfly 主題"></a>使用 Butterfly 主題</h3><h3 id="部屬至-Github-Pages"><a href="#部屬至-Github-Pages" class="headerlink" title="部屬至 Github Pages"></a>部屬至 Github Pages</h3><h3 id="網域-使用-Namecheap"><a href="#網域-使用-Namecheap" class="headerlink" title="網域 使用 Namecheap"></a>網域 使用 Namecheap</h3><p>由於使用 GitHub Page 上展示一些靜態內容，並且不涉及使用者的敏感信息或網站交互，那麼購買 SSL 證書”好像”不是必需的。<br>其實我也在Namecheap上也買，但是沒有使用到。 拜託不要攻擊我QQ</p>
<hr>
<p><font size=1><em>有沒有人要委託我做部落格呢？</em></font></p>
]]></content>
      <tags>
        <tag>gossip</tag>
      </tags>
  </entry>
  <entry>
    <title>ReactWeb-deploy-command</title>
    <url>/posts/gossip/resume-page-command/</url>
    <content><![CDATA[<p>我Resume 是使用React (在codesandbox)，紀錄上傳至github的步驟</p>
<h2 id="set-up"><a href="#set-up" class="headerlink" title="set up"></a>set up</h2><h3 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h3><h4 id="安裝gh-pages"><a href="#安裝gh-pages" class="headerlink" title="安裝gh-pages"></a>安裝gh-pages</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install gh-pages --save-dev</span><br></pre></td></tr></table></figure>
<p>可以看 dependencies 中有沒有，沒有的話再安裝一次，因為我有遇過安裝後沒有出現在 dependencies 中，若確定安裝成功，則可在<br>package.json 中看到</p>
<figure class="highlight json"><figcaption><span>/ dependencies</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;gh-pages&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.0.0&quot;</span></span><br></pre></td></tr></table></figure>
<p>不然就手動加入…</p>
<h4 id="加入deploy指令"><a href="#加入deploy指令" class="headerlink" title="加入deploy指令"></a>加入deploy指令</h4><p>package.json</p>
<figure class="highlight json"><figcaption><span>/ scripts</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;predeploy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run build&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;deploy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gh-pages -d build&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="設定deploy的分支"><a href="#設定deploy的分支" class="headerlink" title="設定deploy的分支"></a>設定deploy的分支</h4><p>package.json</p>
<figure class="highlight json"><figcaption><span>/</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;homepage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://&#123;username&#125;.github.io/&#123;repro-name&#125;/&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<h4 id="執行deploy"><a href="#執行deploy" class="headerlink" title="執行deploy"></a>執行deploy</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm run deploy</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>gossip</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Post Front-matter</title>
    <url>/posts/gossip/Post%20Front-matter/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>寫法,</th>
<th>解釋</th>
</tr>
</thead>
<tbody><tr>
<td>title</td>
<td>【必需】文章標題</td>
</tr>
<tr>
<td>date</td>
<td>【必需】文章創建日期</td>
</tr>
<tr>
<td>updated</td>
<td>【可選】文章更新日期</td>
</tr>
<tr>
<td>tags</td>
<td>【可選】文章標籤</td>
</tr>
<tr>
<td>categories</td>
<td>【可選】文章分類</td>
</tr>
<tr>
<td>keywords</td>
<td>【可選】文章關鍵字</td>
</tr>
<tr>
<td>description</td>
<td>【可選】文章描述</td>
</tr>
<tr>
<td>top_img</td>
<td>【可選】文章頂部圖片</td>
</tr>
<tr>
<td>cover</td>
<td>【可選】文章縮略圖(如果沒有設置top_img,文章頁頂部將顯示縮略圖，可設為false&#x2F;圖片地址&#x2F;留空)</td>
</tr>
<tr>
<td>comments</td>
<td>【可選】顯示文章評論模塊(默認 true)</td>
</tr>
<tr>
<td>toc</td>
<td>【可選】顯示文章TOC(默認為設置中toc的enable配置)</td>
</tr>
<tr>
<td>toc_number</td>
<td>【可選】顯示toc_number(默認為設置中toc的number配置)</td>
</tr>
<tr>
<td>toc_style_simple</td>
<td>【可選】顯示 toc 簡潔模式</td>
</tr>
<tr>
<td>copyright</td>
<td>【可選】顯示文章版權模塊(默認為設置中post_copyright的enable配置)</td>
</tr>
<tr>
<td>copyright_author</td>
<td>【可選】文章版權模塊的文章作者</td>
</tr>
<tr>
<td>copyright_author_href</td>
<td>【可選】文章版權模塊的文章作者鏈接</td>
</tr>
<tr>
<td>copyright_url</td>
<td>【可選】文章版權模塊的文章連結鏈接</td>
</tr>
<tr>
<td>copyright_info</td>
<td>【可選】文章版權模塊的版權聲明文字</td>
</tr>
<tr>
<td>mathjax</td>
<td>【可選】顯示mathjax(當設置 mathjax 的 per_page: false 時，才需要配置，默認 false )</td>
</tr>
<tr>
<td>katex</td>
<td>【可選】顯示 katex (當設置 katex 的 per_page: false 時，才需要配置，默認 false )</td>
</tr>
<tr>
<td>aplayer</td>
<td>【可選】在需要的頁面加載 aplayer 的 js 和 css,請參考文章下面的音樂 配置</td>
</tr>
<tr>
<td>highlight_shrink</td>
<td>【可選】配置代碼框是否展開(true&#x2F;false)(默認為設置中 highlight_shrink 的配置)</td>
</tr>
<tr>
<td>aside</td>
<td>【可選】顯示側邊欄 (默認 true)</td>
</tr>
<tr>
<td>abcjs</td>
<td>【可選】加載 abcjs (當設置 abcjs 的 per_page: false 時，才需要配置，默認 false )</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>gossip</tag>
      </tags>
  </entry>
  <entry>
    <title>other bash command</title>
    <url>/posts/gossip/other-bash-command/</url>
    <content><![CDATA[<p>紀錄一些指令</p>
<h2 id="set-up"><a href="#set-up" class="headerlink" title="set up"></a>set up</h2><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm inatall --force</span><br></pre></td></tr></table></figure>

<p>由於上傳未包含node_modules，因此下載後需要重新安裝</p>
<h3 id="上傳至github"><a href="#上傳至github" class="headerlink" title="上傳至github"></a>上傳至github</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pythone PushGit.py</span><br></pre></td></tr></table></figure>

<p>自己寫的上傳程式，包括:<code>hexo generate</code> 、 <code>hexo deploy</code> 、 整包上傳repro&#x2F;{填寫的分支}</p>
<p><code>2023/7/18</code> 新增 _config.yml 的github_deploy，節省輸入的時間</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _config.yml</span></span><br><span class="line">github_deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/ImitatedSky/ImitatedSky.github.io</span><br><span class="line">  branch: main</span><br><span class="line">  message: <span class="string">&#x27;deploy&#x27;</span></span><br><span class="line">  <span class="built_in">test</span>: <span class="string">&quot;test message&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pip install pyyaml</span></span><br><span class="line"><span class="comment"># PushGit.py</span></span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 讀取設定檔</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;_config.yml&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    config = yaml.load(f, Loader=yaml.FullLoader)</span><br><span class="line"></span><br><span class="line">github_url = config[<span class="string">&quot;github_deploy&quot;</span>][<span class="string">&quot;repo&quot;</span>]</span><br><span class="line">github_branch = config[<span class="string">&quot;github_deploy&quot;</span>][<span class="string">&quot;branch&quot;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="題外話-hexo-deploy"><a href="#題外話-hexo-deploy" class="headerlink" title="題外話-hexo deploy"></a>題外話-hexo deploy</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _config.yml</span></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/ImitatedSky/ImitatedSky.github.io <span class="comment"># https://github.com/[你的 GitHub 帳號]/[你的 GitHub 帳號].github.io.git</span></span><br><span class="line">  branch: gh-page <span class="comment"># 在這邊我是使用 gp-page 當作主要分支</span></span><br><span class="line">  message: <span class="string">&#x27;deploy&#x27;</span></span><br></pre></td></tr></table></figure>

<p>這邊我是上傳至 .io 的gh-pages分支，設定在 _config.yml</p>
]]></content>
      <tags>
        <tag>gossip</tag>
        <tag>bash</tag>
      </tags>
  </entry>
  <entry>
    <title>改變git推送人與信箱</title>
    <url>/posts/gossip/%E6%94%B9%E8%AE%8Agit%E6%8E%A8%E9%80%81%E4%BA%BA%E8%88%87%E4%BF%A1%E7%AE%B1/</url>
    <content><![CDATA[<p>當你需要更改 Git 中的使用者名稱和電子郵件地址時，可以按照以下步驟執行：</p>
<ol>
<li>使用以下命令檢視當前的 Git 設定：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --list</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>這將顯示當前的 Git 設定列表。</p>
<ol start="2">
<li>使用以下命令設定新的使用者名稱：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;Name&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<p>將 “Name” 替換為你要設定的新使用者名稱。</p>
<ol start="3">
<li>使用以下命令設定新的電子郵件地址：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">git config --global user.email <span class="string">&quot;email@example.com&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>gossip</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#116. Populating Next Right Pointers in Each Node</title>
    <url>/posts/leetcode/Leetcode-116-Populating-Next-Right-Pointers-in-Each-Node/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>You are given a <strong>perfect binary tree</strong> where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct Node &#123;</span><br><span class="line">  int val;</span><br><span class="line">  Node *left;</span><br><span class="line">  Node *right;</span><br><span class="line">  Node *next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to <code>NULL</code>.</p>
<p>Initially, all next pointers are set to <code>NULL</code>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2019/02/14/116_sample.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,3,4,5,6,7]</span><br><span class="line">Output: [1,#,2,3,#,4,5,6,7,#]</span><br><span class="line">Explanation:Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with &#x27;#&#x27; signifying the end of each level.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = []</span><br><span class="line">Output: []</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[0, 212 - 1]</code>.</li>
<li><code>1000 &lt;= Node.val &lt;= 1000</code></li>
</ul>
<p><strong>Follow-up:</strong></p>
<ul>
<li>You may only use constant extra space.</li>
<li>The recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.</li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><p>top-down  recursive</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">connect</span>(<span class="params">self, root: <span class="string">&#x27;Optional[Node]&#x27;</span></span>) -&gt; <span class="string">&#x27;Optional[Node]&#x27;</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">set_node</span>(<span class="params">root</span>):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">if</span> root.left:</span><br><span class="line">                root.left.<span class="built_in">next</span> = root.right</span><br><span class="line">            <span class="keyword">if</span> root.right <span class="keyword">and</span> root.<span class="built_in">next</span>:</span><br><span class="line">                root.right.<span class="built_in">next</span> = root.<span class="built_in">next</span>.left</span><br><span class="line">            </span><br><span class="line">            <span class="comment">#兩個順序可以調換</span></span><br><span class="line">            set_node(root.left) </span><br><span class="line">            set_node(root.right)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> set_node(root)</span><br></pre></td></tr></table></figure>

<p>簡化一點</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">connect</span>(<span class="params">self, root: <span class="string">&#x27;Optional[Node]&#x27;</span></span>) -&gt; <span class="string">&#x27;Optional[Node]&#x27;</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> root.left:</span><br><span class="line">            root.left.<span class="built_in">next</span> = root.right</span><br><span class="line">        <span class="keyword">if</span> root.right <span class="keyword">and</span> root.<span class="built_in">next</span>:</span><br><span class="line">            root.right.<span class="built_in">next</span> = root.<span class="built_in">next</span>.left</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#兩個順序可以調換</span></span><br><span class="line">        self.connect(root.left)</span><br><span class="line">        self.connect(root.right)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>medium</tag>
        <tag>💡</tag>
        <tag>Linked List</tag>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#120. Triangle</title>
    <url>/posts/leetcode/Leetcode-120-Triangle/</url>
    <content><![CDATA[<p>[leetcode62]</p>
<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Given a <code>triangle</code> array, return <em>the minimum path sum from top to bottom</em>.</p>
<p>For each step, you may move to an adjacent number of the row below. More formally, if you are on index <code>i</code> on the current row, you may move to either index <code>i</code> or index <code>i + 1</code> on the next row.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]</span><br><span class="line">Output: 11</span><br><span class="line">Explanation: The triangle looks like:</span><br><span class="line">   2</span><br><span class="line">  3 4</span><br><span class="line"> 6 5 7</span><br><span class="line">4 1 8 3</span><br><span class="line">The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: triangle = [[-10]]</span><br><span class="line">Output: -10</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= triangle.length &lt;= 200</code></li>
<li><code>triangle[0].length == 1</code></li>
<li><code>triangle[i].length == triangle[i - 1].length + 1</code></li>
<li><code>-10^4 &lt;= triangle[i][j] &lt;= 10^4</code></li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><h2 id="use-recursion"><a href="#use-recursion" class="headerlink" title="use recursion"></a><code>use recursion</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Time Limit Exceeded</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minimumTotal</span>(<span class="params">self, triangle: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dp</span>(<span class="params">i,j</span>):</span><br><span class="line">            <span class="keyword">if</span> i == <span class="built_in">len</span>(triangle)-<span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> triangle[i][j]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> triangle[i][j] + <span class="built_in">min</span>(dp(i+<span class="number">1</span>,j),dp(i+<span class="number">1</span>,j+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># dp(0,0) return triangle[0][0] + min(dp(1,0),dp(1,1))</span></span><br><span class="line"><span class="comment"># dp(1,0) return triangle[1][0]</span></span><br><span class="line"><span class="comment"># dp(1,1) return triangle[1][1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dp(i,j) return triangle[i][j] + min(dp(i+1,j),dp(i+1,j+1))</span></span><br><span class="line"><span class="comment"># dp(i+1,j) return triangle[i+1][j]</span></span><br><span class="line"><span class="comment"># dp(i+1,j+1) return triangle[i+1][j+1]</span></span><br></pre></td></tr></table></figure>

<p>O(2^n) time, O(n) space</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># add meno</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minimumTotal</span>(<span class="params">self, triangle: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        memo = &#123;&#125;</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dp</span>(<span class="params">i, j</span>):</span><br><span class="line">            <span class="keyword">if</span> i == <span class="built_in">len</span>(triangle) - <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> triangle[i][j]</span><br><span class="line">            <span class="keyword">if</span> (i, j) <span class="keyword">in</span> memo:</span><br><span class="line">                <span class="keyword">return</span> memo[(i, j)]</span><br><span class="line">            memo[(i, j)] = triangle[i][j] + <span class="built_in">min</span>(dp(i+<span class="number">1</span>, j), dp(i+<span class="number">1</span>, j+<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">return</span> memo[(i, j)]</span><br><span class="line">        <span class="keyword">return</span> dp(<span class="number">0</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>O(n^2) time, O(n^2) space</p>
<h2 id="use-dp-與-recursion-不同-，recursion-是從上往下推，dp-是從下往上推"><a href="#use-dp-與-recursion-不同-，recursion-是從上往下推，dp-是從下往上推" class="headerlink" title="use dp(# 與 recursion 不同 ，recursion 是從上往下推，dp 是從下往上推)"></a><code>use dp</code>(# 與 recursion 不同 ，recursion 是從上往下推，dp 是從下往上推)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minimumTotal</span>(<span class="params">self, triangle: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(triangle)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 建立一個二維陣列，用來儲存每個點的最小值</span></span><br><span class="line">        <span class="comment"># n 行 n 列</span></span><br><span class="line">        dp = [[<span class="number">0</span>]*n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 最後一列的值，最後一個 triangle[n-1][n-1]</span></span><br><span class="line">        <span class="comment"># 將最後一列的值，都加入到 dp 中</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            dp[n-<span class="number">1</span>][j]=triangle[n-<span class="number">1</span>][j]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 從倒數第二列開始，往上推</span></span><br><span class="line">        <span class="comment"># (n-2, n-2) -&gt; (0, 0)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">            <span class="comment"># 從左到右推，長度為 i+1</span></span><br><span class="line">            <span class="comment"># (i, 0) -&gt; (i, i)</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>):</span><br><span class="line">                dp[i][j] = <span class="built_in">min</span>(dp[i+<span class="number">1</span>][j], dp[i+<span class="number">1</span>][j+<span class="number">1</span>]) + triangle[i][j]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<p>O(n^2) time<br>O(n^2) space</p>
<h2 id="看到最簡便的"><a href="#看到最簡便的" class="headerlink" title="看到最簡便的"></a><code>看到最簡便的</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minimumTotal</span>(<span class="params">self, triangle: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(triangle)-<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(triangle[i])):</span><br><span class="line">                triangle[i][j]+=<span class="built_in">min</span>(triangle[i+<span class="number">1</span>][j+<span class="number">1</span>],triangle[i+<span class="number">1</span>][j])</span><br><span class="line">        <span class="keyword">return</span> triangle[<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<p>O(n^2) time</p>
<p>O(1) space</p>
<p>直接不用儲存</p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>medium</tag>
        <tag>💡</tag>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>時間複雜度</title>
    <url>/posts/gossip/%E6%99%82%E9%96%93%E8%A4%87%E9%9B%9C%E5%BA%A6/</url>
    <content><![CDATA[<h1 id="時間複雜度由小到大依次為"><a href="#時間複雜度由小到大依次為" class="headerlink" title="時間複雜度由小到大依次為:"></a>時間複雜度由小到大依次為:</h1><p>O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n^2) &lt; O(n^3) &lt; O(2^n) &lt; O(n!) &lt; O(n^n)</p>
<table>
<thead>
<tr>
<th>時間複雜度</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>O(1)</td>
<td>常數時間</td>
</tr>
<tr>
<td>O(logn)</td>
<td>對數時間</td>
</tr>
<tr>
<td>O(n)</td>
<td>線性時間</td>
</tr>
<tr>
<td>O(nlogn)</td>
<td>線性對數時間</td>
</tr>
<tr>
<td>O(n^2)</td>
<td>平方時間</td>
</tr>
<tr>
<td>O(n^3)</td>
<td>立方時間</td>
</tr>
<tr>
<td>O(2^n)</td>
<td>指數時間</td>
</tr>
<tr>
<td>O(n!)</td>
<td>階乘時間</td>
</tr>
<tr>
<td>O(n^n)</td>
<td>階乘時間</td>
</tr>
</tbody></table>
<h1 id="常見的時間複雜度"><a href="#常見的時間複雜度" class="headerlink" title="常見的時間複雜度"></a>常見的時間複雜度</h1><h2 id="O-1-：常數時間"><a href="#O-1-：常數時間" class="headerlink" title="O(1)：常數時間"></a>O(1)：常數時間</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">constant_algo</span>(<span class="params">items</span>):</span><br><span class="line">    result = items[<span class="number">0</span>] * items[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>

<h2 id="O-n-：線性時間"><a href="#O-n-：線性時間" class="headerlink" title="O(n)：線性時間"></a>O(n)：線性時間</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">linear_algo</span>(<span class="params">items</span>):</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure>

<h2 id="O-n-2-：平方時間"><a href="#O-n-2-：平方時間" class="headerlink" title="O(n^2)：平方時間"></a>O(n^2)：平方時間</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">quadratic_algo</span>(<span class="params">items</span>):</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        <span class="keyword">for</span> item2 <span class="keyword">in</span> items:</span><br><span class="line">            <span class="built_in">print</span>(item, <span class="string">&#x27; &#x27;</span>, item2)</span><br></pre></td></tr></table></figure>

<h2 id="O-logn-：對數時間"><a href="#O-logn-：對數時間" class="headerlink" title="O(logn)：對數時間"></a>O(logn)：對數時間</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">logarithmic_algo</span>(<span class="params">items</span>):</span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(items)):</span><br><span class="line">        position = index</span><br><span class="line">        current_value = items[index]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> position&gt;<span class="number">0</span> <span class="keyword">and</span> items[position-<span class="number">1</span>]&gt;current_value:</span><br><span class="line">            items[position]=items[position-<span class="number">1</span>]</span><br><span class="line">            position = position-<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        items[position]=current_value</span><br></pre></td></tr></table></figure>

<h2 id="O-nlogn-：線性對數時間"><a href="#O-nlogn-：線性對數時間" class="headerlink" title="O(nlogn)：線性對數時間"></a>O(nlogn)：線性對數時間</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">linearithmic_algo</span>(<span class="params">items</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(items) &gt; <span class="number">1</span>:</span><br><span class="line">        mid = <span class="built_in">len</span>(items) // <span class="number">2</span></span><br><span class="line">        left = items[:mid]</span><br><span class="line">        right = items[mid:]</span><br><span class="line"></span><br><span class="line">        linearithmic_algo(left)</span><br><span class="line">        linearithmic_algo(right)</span><br><span class="line"></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        k = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(left) <span class="keyword">and</span> j &lt; <span class="built_in">len</span>(right):</span><br><span class="line">            <span class="keyword">if</span> left[i] &lt; right[j]:</span><br><span class="line">              items[k] = left[i]</span><br><span class="line">              i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                items[k] = right[j]</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(left):</span><br><span class="line">            items[k] = left[i]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> j &lt; <span class="built_in">len</span>(right):</span><br><span class="line">            items[k]=right[j]</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">            k += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h2 id="O-2-n-：指數時間"><a href="#O-2-n-：指數時間" class="headerlink" title="O(2^n)：指數時間"></a>O(2^n)：指數時間</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">exponential_algo</span>(<span class="params">items</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(items)==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> [[]]</span><br><span class="line">    smaller = exponential_algo(items[:-<span class="number">1</span>])</span><br><span class="line">    extra = items[-<span class="number">1</span>:]</span><br><span class="line">    new = []</span><br><span class="line">    <span class="keyword">for</span> small <span class="keyword">in</span> smaller:</span><br><span class="line">        new.append(small+extra)</span><br><span class="line">    <span class="keyword">return</span> smaller+new</span><br></pre></td></tr></table></figure>

<h2 id="O-n-：階乘時間"><a href="#O-n-：階乘時間" class="headerlink" title="O(n!)：階乘時間"></a>O(n!)：階乘時間</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factorial_algo</span>(<span class="params">items</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(items)==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> [[]]</span><br><span class="line">    smaller = factorial_algo(items[:-<span class="number">1</span>])</span><br><span class="line">    new = []</span><br><span class="line">    <span class="keyword">for</span> small <span class="keyword">in</span> smaller:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(small)+<span class="number">1</span>):</span><br><span class="line">            new.append(small[:i]+items[-<span class="number">1</span>:]+small[i:])</span><br><span class="line">    <span class="keyword">return</span> smaller+new</span><br></pre></td></tr></table></figure>

<h2 id="O-n-n-：階乘時間"><a href="#O-n-n-：階乘時間" class="headerlink" title="O(n^n)：階乘時間"></a>O(n^n)：階乘時間</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">n_power_n_algo</span>(<span class="params">items</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(items)==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> [[]]</span><br><span class="line">    smaller = n_power_n_algo(items[:-<span class="number">1</span>])</span><br><span class="line">    new = []</span><br><span class="line">    <span class="keyword">for</span> small <span class="keyword">in</span> smaller:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(small)+<span class="number">1</span>):</span><br><span class="line">            new.append(small[:i]+items[-<span class="number">1</span>:]+small[i:])</span><br><span class="line">    <span class="keyword">return</span> smaller+new</span><br></pre></td></tr></table></figure>

<h2 id="O-n-3-：立方時間"><a href="#O-n-3-：立方時間" class="headerlink" title="O(n^3)：立方時間"></a>O(n^3)：立方時間</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cubic_algo</span>(<span class="params">items</span>):</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        <span class="keyword">for</span> item2 <span class="keyword">in</span> items:</span><br><span class="line">            <span class="keyword">for</span> item3 <span class="keyword">in</span> items:</span><br><span class="line">                <span class="built_in">print</span>(item, <span class="string">&#x27; &#x27;</span>, item2, <span class="string">&#x27; &#x27;</span>, item3)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>gossip</tag>
        <tag>施工中</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#117. Populating Next Right Pointers in Each Node II</title>
    <url>/posts/leetcode/Leetcode-117-Populating-Next-Right-Pointers-in-Each-Node-II/</url>
    <content><![CDATA[<p><a href="../Leetcode-116-Populating-Next-Right-Pointers-in-Each-Node">leetcode116</a></p>
<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Given a binary tree</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct Node &#123;</span><br><span class="line">  int val;</span><br><span class="line">  Node *left;</span><br><span class="line">  Node *right;</span><br><span class="line">  Node *next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to <code>NULL</code>.</p>
<p>Initially, all next pointers are set to <code>NULL</code>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2019/02/15/117_sample.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = [1,2,3,4,5,null,7]</span><br><span class="line">Output: [1,#,2,3,#,4,5,7,#]</span><br><span class="line">Explanation:Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with &#x27;#&#x27; signifying the end of each level.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = []</span><br><span class="line">Output: []</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[0, 6000]</code>.</li>
<li><code>100 &lt;= Node.val &lt;= 100</code></li>
</ul>
<p><strong>Follow-up:</strong></p>
<ul>
<li>You may only use constant extra space.</li>
<li>The recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.</li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><p>可以先去看看116</p>
<p>這邊就是多一 <code>指針</code> <code>curr</code>，協助找子節點 next</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 左子節點和右子節點的 next 指針連接</span></span><br><span class="line">        <span class="keyword">if</span> root.left:</span><br><span class="line">            <span class="keyword">if</span> root.right:</span><br><span class="line">                root.left.<span class="built_in">next</span> = root.right  <span class="comment"># 左子節點 next 指向右子節點</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 找右側存在的節點</span></span><br><span class="line">                curr = root.<span class="built_in">next</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 重複尋找右側存在的子節點</span></span><br><span class="line">                <span class="keyword">while</span> curr:</span><br><span class="line">                    <span class="keyword">if</span> curr.left:</span><br><span class="line">                        root.left.<span class="built_in">next</span> = curr.left <span class="comment"># 左子節點 next</span></span><br><span class="line">                        <span class="keyword">break</span> <span class="comment"># 找到後就跳出</span></span><br><span class="line">                    <span class="keyword">elif</span> curr.right:</span><br><span class="line">                        root.left.<span class="built_in">next</span> = curr.right</span><br><span class="line">                        <span class="keyword">break</span> <span class="comment"># 找到後就跳出</span></span><br><span class="line">                    curr = curr.<span class="built_in">next</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 右子節點和右子節點的 next 指針連接</span></span><br><span class="line">        <span class="keyword">if</span> root.right:</span><br><span class="line">            <span class="comment"># 找右側存在的節點</span></span><br><span class="line">            curr = root.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 重複尋找右側存在的子節點</span></span><br><span class="line">            <span class="keyword">while</span> curr:</span><br><span class="line">                <span class="keyword">if</span> curr.left:</span><br><span class="line">                    root.right.<span class="built_in">next</span> = curr.left</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">elif</span> curr.right:</span><br><span class="line">                    root.right.<span class="built_in">next</span> = curr.right</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                curr = curr.<span class="built_in">next</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 遞迴處理右子樹和左子樹</span></span><br><span class="line">        <span class="comment"># 先處理右子樹，因為左子樹的 next 指針可能會用到右子樹的 next 指針</span></span><br><span class="line">        self.connect(root.right)</span><br><span class="line">        self.connect(root.left)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>medium</tag>
        <tag>💡</tag>
        <tag>Linked List</tag>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#121. Best Time to Buy and Sell Stock</title>
    <url>/posts/leetcode/Leetcode-121-Best-Time-to-Buy-and-Sell-Stock/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>ith</code> day.</p>
<p>You want to maximize your profit by choosing a <strong>single day</strong> to buy one stock and choosing a <strong>different day in the future</strong> to sell that stock.</p>
<p>Return <em>the maximum profit you can achieve from this transaction</em>. If you cannot achieve any profit, return <code>0</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: prices = [7,1,5,3,6,4]</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.</span><br><span class="line">Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: prices = [7,6,4,3,1]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: In this case, no transactions are done and the max profit = 0.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= prices.length &lt;= 10^5</code></li>
<li><code>0 &lt;= prices[i] &lt;= 10^4</code></li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxProfit</span>(<span class="params">self, prices: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        min_price = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>) <span class="comment">#正無窮大</span></span><br><span class="line">        max_profit = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> price <span class="keyword">in</span> prices:</span><br><span class="line">            min_price = <span class="built_in">min</span>(min_price, price)</span><br><span class="line">            max_profit = <span class="built_in">max</span>(max_profit, price - min_price)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> max_profit</span><br></pre></td></tr></table></figure>

<p>O (n) time and O(1) space</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxProfit</span>(<span class="params">self, prices: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">      min_p = prices[<span class="number">0</span>]</span><br><span class="line">      profit = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(prices)):</span><br><span class="line">          min_p = <span class="built_in">min</span>(min_p , prices[i])</span><br><span class="line">          profit = <span class="built_in">max</span>(profit , prices[i] - min_p)</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> profit</span><br></pre></td></tr></table></figure>

<p>O (n) time and O(1) space</p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
        <tag>easy</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#148. Sort Listk</title>
    <url>/posts/leetcode/Leetcode-148-Sort-Listk/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Given the <code>head</code> of a linked list, return <em>the list after sorting it in <strong>ascending order</strong></em>.</p>
<p><strong>Example 1:</strong><br><img src="https://assets.leetcode.com/uploads/2020/09/14/sort_list_1.jpg"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: head = [4,2,1,3]</span><br><span class="line">Output: [1,2,3,4]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong><br><img src="/invert1-tree.jpg" alt="Alt text"><br><img src="https://assets.leetcode.com/uploads/2020/09/14/sort_list_2.jpg"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: head = [-1,5,3,4,0]</span><br><span class="line">Output: [-1,0,3,4,5]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: head = []</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure>

<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sortList</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 沒有 或只只有一個 代表已經排好了</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.<span class="built_in">next</span>:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 用快慢指針找到中間點</span></span><br><span class="line">        slow = head</span><br><span class="line">        fast = head.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> fast <span class="keyword">and</span> fast.<span class="built_in">next</span>:</span><br><span class="line">            slow = slow.<span class="built_in">next</span></span><br><span class="line">            fast = fast.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        mid= slow.<span class="built_in">next</span></span><br><span class="line">        slow.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 遞迴調用 sortList 函式 排序左右兩邊</span></span><br><span class="line">        left = self.sortList(head)</span><br><span class="line">        right = self.sortList(mid)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 創建兩個指針，指向相同的 ListNode(0) </span></span><br><span class="line">        h = res = ListNode(<span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 將兩個已排序鏈表的合併</span></span><br><span class="line">        <span class="keyword">while</span> left <span class="keyword">and</span> right:</span><br><span class="line">            <span class="keyword">if</span> left.val &lt; right.val:</span><br><span class="line">                h.<span class="built_in">next</span>= left</span><br><span class="line">                left = left.<span class="built_in">next</span></span><br><span class="line">                <span class="comment"># 如果左半部分鏈表的節點值小於右半部分鏈表的節點值，</span></span><br><span class="line">                <span class="comment"># 將 h 的下一個節點指向 left，同時更新 left 指針到下一個節點。</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                h.<span class="built_in">next</span> = right</span><br><span class="line">                right = right.<span class="built_in">next</span></span><br><span class="line">                <span class="comment"># 如果右半部分鏈表的節點值小於等於左半部分鏈表的節點值，</span></span><br><span class="line">                <span class="comment"># 將 h 的下一個節點指向 right，同時更新 right 指針到下一個節點</span></span><br><span class="line">            h = h.<span class="built_in">next</span></span><br><span class="line">            <span class="comment"># 更新 h 指針到下一個節點</span></span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">        <span class="comment"># 連接剩下的</span></span><br><span class="line">        h.<span class="built_in">next</span> = left <span class="keyword">if</span> left <span class="keyword">else</span> right</span><br><span class="line">        <span class="keyword">return</span> res.<span class="built_in">next</span></span><br></pre></td></tr></table></figure>

<h3 id="拆分為三個函式"><a href="#拆分為三個函式" class="headerlink" title="拆分為三個函式"></a>拆分為三個函式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sortList</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        <span class="comment"># 如果鏈表為空或只有一個節點，則無需排序，直接返回鏈表</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.<span class="built_in">next</span>:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 獲取鏈表的中間節點</span></span><br><span class="line">        mid = self.getMiddle(head)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 遞迴排序左半部分鏈表和右半部分鏈表</span></span><br><span class="line">        left = self.sortList(head)</span><br><span class="line">        right = self.sortList(mid)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 合併排序後的左半部分鏈表和右半部分鏈表</span></span><br><span class="line">        <span class="keyword">return</span> self.merge(left, right)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getMiddle</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        <span class="comment"># 使用快慢指針法找到鏈表的中間節點</span></span><br><span class="line">        slow, fast = head, head.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">while</span> fast <span class="keyword">and</span> fast.<span class="built_in">next</span>:</span><br><span class="line">            slow = slow.<span class="built_in">next</span></span><br><span class="line">            fast = fast.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 將鏈表切分成兩半，並返回中間節點</span></span><br><span class="line">        mid = slow.<span class="built_in">next</span></span><br><span class="line">        slow.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> mid</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">self, left: <span class="type">Optional</span>[ListNode], right: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        合併兩個已排序的鏈表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            left: 第一個已排序的鏈表的頭節點</span></span><br><span class="line"><span class="string">            right: 第二個已排序的鏈表的頭節點</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            合併後的已排序鏈表的頭節點</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果其中一個鏈表為空，則直接返回另一個鏈表</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> left:</span><br><span class="line">            <span class="keyword">return</span> right</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> right:</span><br><span class="line">            <span class="keyword">return</span> left</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 比較兩個鏈表頭節點的值</span></span><br><span class="line">        <span class="keyword">if</span> left.val &lt; right.val:</span><br><span class="line">            <span class="comment"># 如果左鏈表的頭節點值較小，則將其連接到合併後的鏈表，</span></span><br><span class="line">            <span class="comment"># 同時遞迴地將左鏈表的下一個節點和右鏈表傳入 merge 函式進行合併</span></span><br><span class="line">            left.<span class="built_in">next</span> = self.merge(left.<span class="built_in">next</span>, right)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 返回合併後的鏈表的頭節點</span></span><br><span class="line">            <span class="keyword">return</span> left</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 如果右鏈表的頭節點值較小或相等，則將其連接到合併後的鏈表，</span></span><br><span class="line">            <span class="comment"># 同時遞迴地將左鏈表和右鏈表的下一個節點傳入 merge 函式進行合併</span></span><br><span class="line">            right.<span class="built_in">next</span> = self.merge(left, right.<span class="built_in">next</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 返回合併後的鏈表的頭節點</span></span><br><span class="line">            <span class="keyword">return</span> right</span><br></pre></td></tr></table></figure>

<p>程式碼將原先的 <strong><code>sortList</code></strong> 函式拆分為三個函式：**<code>sortList</code><strong>、</strong><code>getMiddle</code>** 和 <strong><code>merge</code><strong>。</strong><code>sortList</code></strong> 函式仍然是入口點，用於遞迴調用和合併兩部分鏈表，**<code>getMiddle</code>** 函式用於獲取鏈表的中間節點並切斷鏈表，**<code>merge</code>** 函式用於合併兩個已排序的鏈表。</p>
<p>在 <strong><code>merge</code></strong> 函式中，通過比較兩個鏈表的頭節點的值，每次選擇較小的節點，並將其 <strong><code>next</code></strong> 指針指向遞迴調用的結果，最後返回合併後的鏈表。</p>
<p>這樣的實現方式可以使用合併排序的思想對鏈表進行排序，達到相同的效果。</p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>medium</tag>
        <tag>💡</tag>
        <tag>Linked List</tag>
        <tag>Two Pointers</tag>
        <tag>Divide and Conquer</tag>
        <tag>Sorting</tag>
        <tag>Merge Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#14. Longest Common Prefix</title>
    <url>/posts/leetcode/Leetcode-14-Longest-Common-Prefix/</url>
    <content><![CDATA[<p>#<code>Problem</code><br>Write a function to find the longest common prefix string amongst an array of strings.</p>
<p>If there is no common prefix, return an empty string <code>&quot;&quot;</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: strs = [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">Output: &quot;fl&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: strs = [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line">Output: &quot;&quot;</span><br><span class="line">Explanation: There is no common prefix among the input strings.</span><br></pre></td></tr></table></figure>

<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">longestCommonPrefix</span>(<span class="params">self, strs: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        pref = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        </span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        minWord = <span class="built_in">min</span>(strs, key=<span class="built_in">len</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(minWord):</span><br><span class="line">            <span class="keyword">for</span> word <span class="keyword">in</span> strs:</span><br><span class="line">                <span class="keyword">if</span> word[i] != minWord[i]:</span><br><span class="line">                    <span class="keyword">return</span> pref</span><br><span class="line">            pref += minWord[i]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> pref</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>easy</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#146. LRU Cache</title>
    <url>/posts/leetcode/Leetcode-146-LRU-Cache/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Design a data structure that follows the constraints of a <strong><a href="https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU">Least Recently Used (LRU) cache</a></strong>.</p>
<p>Implement the <code>LRUCache</code> class:</p>
<ul>
<li><code>LRUCache(int capacity)</code> Initialize the LRU cache with <strong>positive</strong> size <code>capacity</code>.</li>
<li><code>int get(int key)</code> Return the value of the <code>key</code> if the key exists, otherwise return <code>1</code>.</li>
<li><code>void put(int key, int value)</code> Update the value of the <code>key</code> if the <code>key</code> exists. Otherwise, add the <code>key-value</code> pair to the cache. If the number of keys exceeds the <code>capacity</code> from this operation, <strong>evict</strong> the least recently used key.</li>
</ul>
<p>The functions <code>get</code> and <code>put</code> must each run in <code>O(1)</code> average time complexity.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line">[&quot;LRUCache&quot;, &quot;put&quot;, &quot;put&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;get&quot;, &quot;get&quot;]</span><br><span class="line">[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]</span><br><span class="line">Output</span><br><span class="line">[null, null, null, 1, null, -1, null, -1, 3, 4]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">LRUCache lRUCache = new LRUCache(2);</span><br><span class="line">lRUCache.put(1, 1); // cache is &#123;1=1&#125;</span><br><span class="line">lRUCache.put(2, 2); // cache is &#123;1=1, 2=2&#125;</span><br><span class="line">lRUCache.get(1);    // return 1</span><br><span class="line">lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is &#123;1=1, 3=3&#125;</span><br><span class="line">lRUCache.get(2);    // returns -1 (not found)</span><br><span class="line">lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is &#123;4=4, 3=3&#125;</span><br><span class="line">lRUCache.get(1);    // return -1 (not found)</span><br><span class="line">lRUCache.get(3);    // return 3</span><br><span class="line">lRUCache.get(4);    // return 4</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= capacity &lt;= 3000</code></li>
<li><code>0 &lt;= key &lt;= 10^4</code></li>
<li><code>0 &lt;= value &lt;= 10^5</code></li>
<li>At most <code>2 * 10^5</code> calls will be made to <code>get</code> and <code>put</code>.</li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><p>題目給的 LRU 是一個儲存器(緩存器)</p>
<p>有放入 拿出功能</p>
<p>放入時，如果超過容量，就要把最久沒有被使用的資料移除</p>
<p>我這邊表示 cache 前後 關係為 舊資料，後面為新資料</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ex:</span><br><span class="line"><span class="comment"># 初始化一個 LRU Cache 容量為 3，並且放入 1:1 2:5 3:7</span></span><br><span class="line"><span class="comment"># cache is &#123;1=1, 2=5, 3=7&#125;</span></span><br><span class="line">LRUCache lRUCache = new LRUCache(<span class="number">3</span>);  </span><br><span class="line">lRUCache.put(<span class="number">1</span>, <span class="number">1</span>); </span><br><span class="line">lRUCache.put(<span class="number">2</span>, <span class="number">5</span>); </span><br><span class="line">lRUCache.put(<span class="number">3</span>, <span class="number">7</span>); </span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 1:1 2:5 3:7 位置關係是 1:1 在最前面，3:7 在最後面</span></span><br><span class="line"><span class="string"># 前面的資料是最舊的資料，後面的資料是最新的資料</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 這邊get像是調用資料，但是不會移除資料</span></span><br><span class="line">lRUCache.get(<span class="number">1</span>);    // <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 這邊put 4:9 會把 2:5 移除，因為 2:5 是最舊的資料</span></span><br><span class="line"><span class="comment"># 順序變成 3:7 1:1 4:9 ，3=7 是最舊的資料，4:9 是最新的資料</span></span><br><span class="line">lRUCache.put(<span class="number">4</span>, <span class="number">9</span>); // LRU key was <span class="number">2</span>, evicts key <span class="number">2</span>, cache <span class="keyword">is</span> &#123;<span class="number">3</span>=<span class="number">7</span>, <span class="number">1</span>=<span class="number">1</span>, <span class="number">4</span>=<span class="number">9</span>&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化一個 LRU Cache 容量為 2</span></span><br><span class="line">LRUCache lRUCache = new LRUCache(<span class="number">2</span>);  </span><br><span class="line"></span><br><span class="line">lRUCache.put(<span class="number">1</span>, <span class="number">1</span>); // cache <span class="keyword">is</span> &#123;<span class="number">1</span>=<span class="number">1</span>&#125; <span class="comment"># 放入 1:1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 放入 2:2 ，位置在 1:1 後面，因為 1:1 是最舊的資料</span></span><br><span class="line">lRUCache.put(<span class="number">2</span>, <span class="number">2</span>); // cache <span class="keyword">is</span> &#123;<span class="number">1</span>=<span class="number">1</span>, <span class="number">2</span>=<span class="number">2</span>&#125; <span class="comment"># 放入 2:2</span></span><br><span class="line"></span><br><span class="line">lRUCache.get(<span class="number">1</span>);    // <span class="keyword">return</span> <span class="number">1</span> <span class="comment"># 拿出 1:1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 做完 get 之後 cache 為 &#123;2=2, 1=1&#125; </span></span><br><span class="line"><span class="string"># 這時候 2:2 是最舊的資料，所以下次如果要放入新的資料時，就是把 2:2 移除，並且把新的資料放入</span></span><br><span class="line"><span class="string"># 所以下次如果要放入新的資料時，就要把 2:2 移除，並且把新的資料放入</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">lRUCache.put(<span class="number">3</span>, <span class="number">3</span>); // LRU key was <span class="number">2</span>, evicts key <span class="number">2</span>, cache <span class="keyword">is</span> &#123;<span class="number">1</span>=<span class="number">1</span>, <span class="number">3</span>=<span class="number">3</span>&#125; </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># LRU key 用途就是用來記錄最舊的資料，當要放入新的資料時，就可以把最舊的資料移除(evicts)</span></span><br><span class="line"><span class="string"># 這樣就可以達到 LRU 的效果</span></span><br><span class="line"><span class="string"># 放入 3:3 並且把 2:2 移除</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2:2 已經被移除了，所以拿不到資料</span></span><br><span class="line">lRUCache.get(<span class="number">2</span>);    // returns -<span class="number">1</span> (<span class="keyword">not</span> found)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 放入 4:4 並且把 1:1 移除，4:4 是最新的資料，所以放在最後面</span></span><br><span class="line">lRUCache.put(<span class="number">4</span>, <span class="number">4</span>); // LRU key was <span class="number">1</span>, evicts key <span class="number">1</span>, cache <span class="keyword">is</span> &#123;<span class="number">3</span>=<span class="number">3</span>, <span class="number">4</span>=<span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1:1 已經被移除了，所以拿不到資料</span></span><br><span class="line">lRUCache.get(<span class="number">1</span>);    // <span class="keyword">return</span> -<span class="number">1</span> (<span class="keyword">not</span> found)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3:3 4:4 還在 cache 裡面</span></span><br><span class="line">lRUCache.get(<span class="number">3</span>);    // <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">lRUCache.get(<span class="number">4</span>);    // <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="題目要求的-Hash-Table-Doubly-Linked-List"><a href="#題目要求的-Hash-Table-Doubly-Linked-List" class="headerlink" title="題目要求的 Hash Table Doubly-Linked List"></a><code>題目要求的 Hash Table Doubly-Linked List</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, key, val</span>):</span><br><span class="line">        self.key = key  <span class="comment"># 節點的鍵（對比  LRU Cache 中的 key）</span></span><br><span class="line">        self.val = val  <span class="comment"># 節點的值（對比  LRU Cache 中的 value）</span></span><br><span class="line">        self.prev = <span class="literal">None</span>  <span class="comment"># 上一個節點的指針</span></span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span>  <span class="comment"># 下一個節點的指針</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, capacity</span>):</span><br><span class="line">        self.capacity = capacity  <span class="comment"># LRU Cache 的容量</span></span><br><span class="line">        self.<span class="built_in">dict</span> = <span class="built_in">dict</span>()  <span class="comment"># 哈希表用於快速查找節點</span></span><br><span class="line">        self.head = Node(<span class="number">0</span>, <span class="number">0</span>)  <span class="comment"># 鏈表的頭節點</span></span><br><span class="line">        self.tail = Node(<span class="number">0</span>, <span class="number">0</span>)  <span class="comment"># 鏈表的尾節點</span></span><br><span class="line">        self.head.<span class="built_in">next</span> = self.tail  <span class="comment"># 頭節點的下一個指向尾節點</span></span><br><span class="line">        self.tail.prev = self.head  <span class="comment"># 尾節點的上一個指向頭節點</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, key</span>):</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.<span class="built_in">dict</span>:  <span class="comment"># 如果 key 存在於哈希表中</span></span><br><span class="line">            n = self.<span class="built_in">dict</span>[key]  <span class="comment"># 獲得對應的節點</span></span><br><span class="line">            self._remove(n)  <span class="comment"># 從鏈表中移除節點</span></span><br><span class="line">            self._add(n)  <span class="comment"># 將節點添加到鏈表尾部，表示最近訪問</span></span><br><span class="line">            <span class="keyword">return</span> n.val  <span class="comment"># 返回節點的值</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>  <span class="comment"># 如果 key 不存在，返回 -1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, key, value</span>):</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.<span class="built_in">dict</span>:  <span class="comment"># 如果 key 已經存在於哈希表中</span></span><br><span class="line">            self._remove(self.<span class="built_in">dict</span>[key])  <span class="comment"># 從鏈表中移除對應節點</span></span><br><span class="line">        n = Node(key, value)  <span class="comment"># 創建新的節點</span></span><br><span class="line">        self._add(n)  <span class="comment"># 將節點添加到鏈表尾部，表示最近訪問</span></span><br><span class="line">        self.<span class="built_in">dict</span>[key] = n  <span class="comment"># 在哈希表中添加鍵值對的引用</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.<span class="built_in">dict</span>) &gt; self.capacity:  <span class="comment"># 如果超過容量上限</span></span><br><span class="line">            n = self.head.<span class="built_in">next</span>  <span class="comment"># 獲得鏈表中第一個節點（即最久未使用的節點）</span></span><br><span class="line">            self._remove(n)  <span class="comment"># 從鏈表中移除節點</span></span><br><span class="line">            <span class="keyword">del</span> self.<span class="built_in">dict</span>[n.key]  <span class="comment"># 從哈希表中刪除鍵值對的引用</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_remove</span>(<span class="params">self, node</span>):</span><br><span class="line">        <span class="comment"># 將節點從鏈表中移除</span></span><br><span class="line">        p = node.prev</span><br><span class="line">        n = node.<span class="built_in">next</span></span><br><span class="line">        p.<span class="built_in">next</span> = n</span><br><span class="line">        n.prev = p</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_add</span>(<span class="params">self, node</span>):</span><br><span class="line">        <span class="comment"># 將節點添加到鏈表尾部，表示最近訪問</span></span><br><span class="line">        p = self.tail.prev</span><br><span class="line">        p.<span class="built_in">next</span> = node</span><br><span class="line">        self.tail.prev = node</span><br><span class="line">        node.prev = p</span><br><span class="line">        node.<span class="built_in">next</span> = self.tail</span><br></pre></td></tr></table></figure>

<h2 id="但python-dict-可以變有序"><a href="#但python-dict-可以變有序" class="headerlink" title="但python dict 可以變有序 !!!"></a><code>但python dict 可以變有序 !!!</code></h2><p>可以像 list 這樣做</p>
<p>但list 搜尋是用 for</p>
<p>時間複雜為O(n)，所以失敗</p>
<h2 id="用list-for迴圈，但效能上有問題-O-n-失敗"><a href="#用list-for迴圈，但效能上有問題-O-n-失敗" class="headerlink" title="用list for迴圈，但效能上有問題 O(n) (失敗)"></a><code>用list for迴圈，但效能上有問題 O(n) (失敗)</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, capacity: <span class="built_in">int</span></span>):</span><br><span class="line">        self.<span class="built_in">list</span> = []</span><br><span class="line">        self.capacity = capacity</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, key: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(self.<span class="built_in">list</span>)):</span><br><span class="line">            <span class="keyword">if</span> self.<span class="built_in">list</span>[i][<span class="number">0</span>] == key:</span><br><span class="line">                <span class="comment"># self.list.pop(i)</span></span><br><span class="line">                <span class="comment"># self.list.append((key, value))</span></span><br><span class="line">                self.<span class="built_in">list</span>.append(self.<span class="built_in">list</span>.pop(i))</span><br><span class="line">                <span class="keyword">return</span> self.<span class="built_in">list</span>[-<span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, key: <span class="built_in">int</span>, value: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(self.<span class="built_in">list</span>)):</span><br><span class="line">            <span class="keyword">if</span> self.<span class="built_in">list</span>[i][<span class="number">0</span>] == key:</span><br><span class="line">                self.<span class="built_in">list</span>.pop(i)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.<span class="built_in">list</span>) == self.capacity:</span><br><span class="line">            self.<span class="built_in">list</span>.pop(<span class="number">0</span>)</span><br><span class="line">        self.<span class="built_in">list</span>.append((key, value))</span><br></pre></td></tr></table></figure>

<p><code>時間複雜度: O(n)</code></p>
<p>邏輯沒錯 但是 時間跑太久</p>
<h2 id="利用iter-dict-為有序的-python-3-7"><a href="#利用iter-dict-為有序的-python-3-7" class="headerlink" title="利用iter(dict) 為有序的(python 3.7~)"></a><code>利用iter(dict) 為有序的</code>(python 3.7~)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, capacity: <span class="built_in">int</span></span>):</span><br><span class="line">        self.<span class="built_in">dict</span> = &#123;&#125;</span><br><span class="line">        self.capacity = capacity</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, key: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> self.<span class="built_in">dict</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        val = self.<span class="built_in">dict</span>.pop(key)  <span class="comment">#Remove it first before inserting it at the end again</span></span><br><span class="line">        self.<span class="built_in">dict</span>[key] = val</span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, key: <span class="built_in">int</span>, value: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.<span class="built_in">dict</span>:</span><br><span class="line">            self.<span class="built_in">dict</span>.pop(key)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(self.<span class="built_in">dict</span>) == self.capacity:</span><br><span class="line">                <span class="keyword">del</span> self.<span class="built_in">dict</span>[<span class="built_in">next</span>(<span class="built_in">iter</span>(self.<span class="built_in">dict</span>))]</span><br><span class="line">        self.<span class="built_in">dict</span>[key] = value</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">iter(self.dict)：iter() 函數將字典轉換成一個迭代器（iterator）</span></span><br><span class="line"><span class="string">next(iter(self.dict)) 取得第一個鍵</span></span><br><span class="line"><span class="string">del self.dict[next(iter(self.dict))]  將取得的第一個鍵刪除</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>在 Python 3.7 之後，**<code>dict</code>** 在保留插入順序方面是有序的。因此，**<code>iter(self.dict)</code>** 返回的迭代器將按照鍵（key）插入的順序來迭代字典中的鍵。</p>
<p><code>時間複雜度:O(1)</code></p>
<ul>
<li>iterator : 迭代器是 Python 中一種特殊的物件，它允許遍歷（迭代）容器中的元素，而不需要事先知道容器的結構。字典、列表、元組等可迭代的容器都可以通過 <strong><code>iter()</code></strong> 函數轉換成迭代器。</li>
<li><strong><code>iter()</code></strong> 函數：用於將可迭代的容器（如字典、列表、元組等）轉換成迭代器當使用迭代器時，我們可以使用 <strong><code>next()</code></strong> 函數依次取得容器中的元素。</li>
</ul>
<ol>
<li>**<code>iter(self.dict)</code>**：這一部分將字典 <strong><code>self.dict</code></strong> 轉換為一個迭代器。這是因為字典本身並不是一個迭代器，但我們希望能夠逐一訪問其中的鍵。</li>
<li>**<code>next(iter(self.dict))</code>**：這一部分使用 <strong><code>next()</code></strong> 函數取得迭代器 <strong><code>iter(self.dict)</code></strong> 中的下一個元素（這裡是字典中的第一個鍵）。換句話說，它返回字典中的第一個鍵。</li>
</ol>
<h2 id="偷吃步、直接載入有序的dict"><a href="#偷吃步、直接載入有序的dict" class="headerlink" title="偷吃步、直接載入有序的dict"></a><code>偷吃步、直接載入有序的dict</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, capacity: <span class="built_in">int</span></span>):</span><br><span class="line">        self.<span class="built_in">dict</span> = OrderedDict()  <span class="comment"># 使用OrderedDict來保持插入順序</span></span><br><span class="line">        self.capacity = capacity</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, key: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.<span class="built_in">dict</span>:</span><br><span class="line">            <span class="comment"># 移動查詢到的鍵值對到字典的末尾，表示最近使用</span></span><br><span class="line">            self.<span class="built_in">dict</span>.move_to_end(key)</span><br><span class="line">            <span class="keyword">return</span> self.<span class="built_in">dict</span>[key]</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, key: <span class="built_in">int</span>, value: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.<span class="built_in">dict</span>:</span><br><span class="line">            self.<span class="built_in">dict</span>.move_to_end(key)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(self.<span class="built_in">dict</span>) == self.capacity:</span><br><span class="line">                <span class="comment"># 如果容量已滿，刪除字典的第一個元素（最久未使用）</span></span><br><span class="line">                self.<span class="built_in">dict</span>.popitem(last=<span class="literal">False</span>)</span><br><span class="line">        self.<span class="built_in">dict</span>[key] = value</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>medium</tag>
        <tag>💡</tag>
        <tag>Linked List</tag>
        <tag>Hash Table</tag>
        <tag>Design</tag>
        <tag>Doubly-Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#201. Bitwise AND of Numbers Range</title>
    <url>/posts/leetcode/Leetcode-201-Bitwise-AND-of-Numbers-Range/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Given two integers <code>left</code> and <code>right</code> that represent the range <code>[left, right]</code>, return <em>the bitwise(位元運算) AND of all numbers in this range, inclusive</em>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: left = 5, right = 7</span><br><span class="line">Output: 4</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: left = 0, right = 0</span><br><span class="line">Output: 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: left = 1, right = 2147483647</span><br><span class="line">Output: 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>0 &lt;= left &lt;= right &lt;= 2^31 - 1</code></li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><p>對區間的數字進行位元運算</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">根據位元的值（0或1）進行邏輯運算</span><br><span class="line"></span><br><span class="line">位元 AND（&amp;）：對兩個二進制數進行對應位元的 AND 運算。當兩個對應位元都為1時，結果的對應位元為1，否則為0。</span><br><span class="line">10101010   (170)</span><br><span class="line">&amp; </span><br><span class="line">11001100   (204)</span><br><span class="line">----------</span><br><span class="line">10001000   (136)</span><br></pre></td></tr></table></figure>

<p><code>不過題目要連續</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">101</span>   (<span class="number">5</span>)</span><br><span class="line">&amp; </span><br><span class="line"><span class="number">110</span>   (<span class="number">6</span>)</span><br><span class="line">&amp;</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">&amp;</span><br><span class="line"><span class="number">1100</span>   (<span class="number">12</span>)</span><br><span class="line">----------</span><br><span class="line"><span class="number">0000</span>   (<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">10101010</span>   (<span class="number">170</span>)</span><br><span class="line">&amp; </span><br><span class="line"><span class="number">10101010</span>   (<span class="number">171</span>)</span><br><span class="line">&amp;</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">&amp;</span><br><span class="line"><span class="number">11001100</span>   (<span class="number">204</span>)</span><br><span class="line">----------</span><br><span class="line"><span class="number">10000000</span>   (<span class="number">128</span>)</span><br></pre></td></tr></table></figure>

<h2 id="先說結論、實際看-就是看位元數有沒有一樣"><a href="#先說結論、實際看-就是看位元數有沒有一樣" class="headerlink" title="先說結論、實際看 就是看位元數有沒有一樣"></a>先說<code>結論、實際看 就是看位元數有沒有一樣</code></h2><p>因為連續區間 位元 AND 的結果該位元會是 0。</p>
<p>所以只有長度一樣時，才有</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rangeBitwiseAnd</span>(<span class="params">self, left: <span class="built_in">int</span>, right: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        shift = <span class="number">0</span>  <span class="comment">#紀錄往右的次數</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right: <span class="comment">#當長短不一時會持續進行，最終可能為0  0</span></span><br><span class="line">            left &gt;&gt;= <span class="number">1</span>   <span class="comment">#位元往右 1</span></span><br><span class="line">            right &gt;&gt;= <span class="number">1</span>  <span class="comment">#位元往右 1</span></span><br><span class="line">            shift += <span class="number">1</span>  <span class="comment">#往右次數+1</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> left &lt;&lt; shift  <span class="comment">#位元往左 shift 次</span></span><br></pre></td></tr></table></figure>

<h3 id="範例一"><a href="#範例一" class="headerlink" title="範例一"></a>範例一</h3><p>當 <strong><code>left = 5</code><strong>、</strong><code>right = 7</code></strong> 時</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scssCopy code</span><br><span class="line">left = 5   (二進制: 101)</span><br><span class="line">right = 7  (二進制: 111)</span><br><span class="line">shift = 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>迴圈開始，每次右移 <strong><code>left</code></strong> 和 <strong><code>right</code></strong> 一位，同時增加 <strong><code>shift</code></strong> 的值。</p>
<p>第一次迴圈：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scssCopy code</span><br><span class="line">left = 2   (二進制: 10)</span><br><span class="line">right = 3  (二進制: 11)</span><br><span class="line">shift = 1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第二次迴圈：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scssCopy code</span><br><span class="line">left = 1   (二進制: 1)</span><br><span class="line">right = 1  (二進制: 1)</span><br><span class="line">shift = 2</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>迴圈結束，因為此時 <strong><code>left</code></strong> 等於 **<code>right</code>**。</p>
<p>最後，將 <strong><code>left</code></strong> 左移 <strong><code>shift</code></strong> 位：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scssCopy code</span><br><span class="line">result = 1 &lt;&lt; 2</span><br><span class="line">       = 100  (二進制)</span><br><span class="line">       = 4    (十進制)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>所以，在區間 <strong><code>[5, 7]</code></strong> 內的所有數字的位元 AND 運算結果為 **<code>4</code>**。</p>
<p>這個方法通過右移邊界來逐漸縮小區間的範圍，同時使用 <strong><code>shift</code></strong> 變數跟踪右移的位元數。最後，將左邊界左移回來，得到位元 AND 運算的結果。</p>
<h3 id="範例二"><a href="#範例二" class="headerlink" title="範例二"></a>範例二</h3><p>假設 **<code>left = 3</code><strong>、</strong><code>right = 8</code>**。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scssCopy code</span><br><span class="line">left = 3   (二進制: 11)</span><br><span class="line">right = 8  (二進制: 1000)</span><br><span class="line">shift = 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>迴圈開始，每次右移 <strong><code>left</code></strong> 和 <strong><code>right</code></strong> 一位，同時增加 <strong><code>shift</code></strong> 的值。</p>
<p>第一次迴圈：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scssCopy code</span><br><span class="line">left = 1   (二進制: 1)</span><br><span class="line">right = 4  (二進制: 100)</span><br><span class="line">shift = 1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第二次迴圈：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scssCopy code</span><br><span class="line">left = 0   (二進制: 0)</span><br><span class="line">right = 2  (二進制: 10)</span><br><span class="line">shift = 2</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>迴圈結束，因為此時 <strong><code>left</code></strong> 等於 **<code>right</code>**。</p>
<p>最後，將 <strong><code>left</code></strong> 左移 <strong><code>shift</code></strong> 位：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scssCopy code</span><br><span class="line">result = 0 &lt;&lt; 2</span><br><span class="line">       = 00  (二進制)</span><br><span class="line">       = 0   (十進制)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>所以，在區間 <strong><code>[3, 8]</code></strong> 內的所有數字的位元 AND 運算結果為 **<code>0</code>**。</p>
<p>這個方法通過右移邊界來逐漸縮小區間的範圍，同時使用 <strong><code>shift</code></strong> 變數跟踪右移的位元數。最後，將左邊界左移回來，得到位元 AND 運算的結果。</p>
<p>注意：該程式碼的目的是求解區間內所有數字的位元 AND 運算結果，而不是計算 <strong><code>left</code></strong> 和 <strong><code>right</code></strong> 的位元 AND 運算結果。因此，當區間內的數字差異較大時，位元 AND 運算的結果可能為 0。</p>
<h3 id="範例三"><a href="#範例三" class="headerlink" title="範例三"></a>範例三</h3><p>假設 **<code>left = 3</code><strong>、</strong><code>right = 9</code>**。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scssCopy code</span><br><span class="line">left = 3   (二進制: 11)</span><br><span class="line">right = 9  (二進制: 1001)</span><br><span class="line">shift = 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>迴圈開始，每次右移 <strong><code>left</code></strong> 和 <strong><code>right</code></strong> 一位，同時增加 <strong><code>shift</code></strong> 的值。</p>
<p>第一次迴圈：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scssCopy code</span><br><span class="line">left = 1   (二進制: 1)</span><br><span class="line">right = 4  (二進制: 100)</span><br><span class="line">shift = 1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第二次迴圈：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scssCopy code</span><br><span class="line">left = 0   (二進制: 0)</span><br><span class="line">right = 2  (二進制: 10)</span><br><span class="line">shift = 2</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>迴圈結束，因為此時 <strong><code>left</code></strong> 等於 **<code>right</code>**。</p>
<p>最後，將 <strong><code>left</code></strong> 左移 <strong><code>shift</code></strong> 位：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scssCopy code</span><br><span class="line">result = 0 &lt;&lt; 2</span><br><span class="line">       = 00  (二進制)</span><br><span class="line">       = 0   (十進制)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>所以，在區間 <strong><code>[3, 9]</code></strong> 內的所有數字的位元 AND 運算結果為 **<code>0</code>**。</p>
<p>這個方法通過右移邊界來逐漸縮小區間的範圍，同時使用 <strong><code>shift</code></strong> 變數跟踪右移的位元數。最後，將左邊界左移回來，得到位元 AND 運算的結果。</p>
<p>注意：該程式碼的目的是求解區間內所有數字的位元 AND 運算結果，而不是計算 <strong><code>left</code></strong> 和 <strong><code>right</code></strong> 的位元 AND 運算結果。因此，當區間內的數字差異較大時，位元 AND 運算的結果可能為 0。</p>
<h2 id="偷吃步"><a href="#偷吃步" class="headerlink" title="偷吃步"></a>偷吃步</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1. right - 1 會將 right 的最右邊的 1 位元轉為 0</span></span><br><span class="line"><span class="string">2. right &amp;= right - 1 則是將 right 的值和 right - 1 的值進行位元 AND 運算，這一步的目的是將 right 的最右邊的 1 位元消除，因為在 left 和 right 之間的區間內，</span></span><br><span class="line"><span class="string">必定會有某個數字的該位元為 0。</span></span><br><span class="line"><span class="string">3. 重複執行以上兩步，直到 left 不再小於 right，即 left 和 right 相等或 left 大於 right。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">也就是窮舉法</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rangeBitwiseAnd</span>(<span class="params">self, left: <span class="built_in">int</span>, right: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            right &amp;= right - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> right</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>medium</tag>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#198. House Robber</title>
    <url>/posts/leetcode/Leetcode-198-House-Robber/</url>
    <content><![CDATA[<p>可以先看看<br><a href="../Leetcode-70-Climbing-Stairs">leetcode70</a></p>
<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and <strong>it will automatically contact the police if two adjacent houses were broken into on the same night</strong>.</p>
<p>Given an integer array <code>nums</code> representing the amount of money of each house, return <em>the maximum amount of money you can rob tonight <strong>without alerting the police</strong></em>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,3,1]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).</span><br><span class="line">Total amount you can rob = 1 + 3 = 4.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [2,7,9,3,1]</span><br><span class="line">Output: 12</span><br><span class="line">Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).</span><br><span class="line">Total amount you can rob = 2 + 9 + 1 = 12.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 100</code></li>
<li><code>0 &lt;= nums[i] &lt;= 400</code></li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><h2 id="遞迴"><a href="#遞迴" class="headerlink" title="遞迴"></a><code>遞迴</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Time Limit Exceeded</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rob</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dp</span>(<span class="params">nums</span>):</span><br><span class="line">            n = <span class="built_in">len</span>(nums)</span><br><span class="line">            <span class="keyword">if</span> n == <span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> n == <span class="number">1</span>: <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">if</span> n == <span class="number">2</span>: <span class="keyword">return</span> <span class="built_in">max</span>(nums[<span class="number">0</span>], nums[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">max</span>(dp(nums[:-<span class="number">2</span>]) + nums[-<span class="number">1</span>], dp(nums[:-<span class="number">1</span>]))</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> dp(nums)</span><br></pre></td></tr></table></figure>

<p>加上 menory</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rob</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        meno = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dp</span>(<span class="params">nums</span>):</span><br><span class="line">            n = <span class="built_in">len</span>(nums)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> n <span class="keyword">in</span> meno: <span class="keyword">return</span> meno[n]</span><br><span class="line">            <span class="keyword">if</span> n == <span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> n == <span class="number">1</span>: <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">if</span> n == <span class="number">2</span>: <span class="keyword">return</span> <span class="built_in">max</span>(nums[<span class="number">0</span>], nums[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">            meno[n] = <span class="built_in">max</span>(dp(nums[:-<span class="number">2</span>]) + nums[-<span class="number">1</span>], dp(nums[:-<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> meno[n]</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> dp(nums)</span><br></pre></td></tr></table></figure>

<h2 id="dp"><a href="#dp" class="headerlink" title="dp"></a><code>dp</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rob</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">1</span>: <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">2</span>: <span class="keyword">return</span> <span class="built_in">max</span>(nums)</span><br><span class="line"></span><br><span class="line">        dp = [<span class="number">0</span>]*<span class="built_in">len</span>(nums)</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>]</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="built_in">max</span>(nums[<span class="number">0</span>], nums[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="built_in">len</span>(nums)):</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i-<span class="number">2</span>] + nums[i], dp[i-<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> dp[-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>medium</tag>
        <tag>💡</tag>
        <tag>Array</tag>
        <tag>Dynamic Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#226. Invert Binary Tree</title>
    <url>/posts/leetcode/Leetcode-226-Invert-Binary-Tree/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Given the <code>root</code> of a binary tree, invert the tree, and return <em>its root</em>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/03/14/invert1-tree.jpg"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = [4,2,7,1,3,6,9]</span><br><span class="line">Output: [4,7,2,9,6,3,1]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/03/14/invert2-tree.jpg"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = [2,1,3]</span><br><span class="line">Output: [2,3,1]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = []</span><br><span class="line">Output: []</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range <code>[0, 100]</code>.</li>
<li><code>100 &lt;= Node.val &lt;= 100</code></li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">invertTree</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="type">Optional</span>[TreeNode]:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">invert</span>(<span class="params">node</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            node.left , node.right = node.right , node.left  <span class="comment">#交換</span></span><br><span class="line">						<span class="comment">#如果還有就繼續做</span></span><br><span class="line">            <span class="keyword">if</span> node.left:</span><br><span class="line">                invert(node.left)</span><br><span class="line">            <span class="keyword">if</span> node.right:</span><br><span class="line">                invert(node.right)</span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> invert(root)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>💡</tag>
        <tag>Tree</tag>
        <tag>Depth-First Search</tag>
        <tag>Breadth-First Search</tag>
        <tag>Binary Tree</tag>
        <tag>easy</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#23. Merge k Sorted Lists</title>
    <url>/posts/leetcode/Leetcode-23-Merge-k-Sorted-Lists/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>You are given an array of <code>k</code> linked-lists <code>lists</code>, each linked-list is sorted in ascending order.</p>
<p><em>Merge all the linked-lists into one sorted linked-list and return it.</em></p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: lists = [[1,4,5],[1,3,4],[2,6]]</span><br><span class="line">Output: [1,1,2,3,4,4,5,6]</span><br><span class="line">Explanation: The linked-lists are:</span><br><span class="line">[</span><br><span class="line">  1-&gt;4-&gt;5,</span><br><span class="line">  1-&gt;3-&gt;4,</span><br><span class="line">  2-&gt;6</span><br><span class="line">]</span><br><span class="line">merging them into one sorted list:</span><br><span class="line">1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: lists = []</span><br><span class="line">Output: []</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: lists = [[]]</span><br><span class="line">Output: []</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>k == lists.length</code></li>
<li><code>0 &lt;= k &lt;= 104</code></li>
<li><code>0 &lt;= lists[i].length &lt;= 500</code></li>
<li><code>104 &lt;= lists[i][j] &lt;= 104</code></li>
<li><code>lists[i]</code> is sorted in <strong>ascending order</strong>.</li>
<li>The sum of <code>lists[i].length</code> will not exceed <code>104</code>.</li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><p>Leetcode#<strong>148</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mergeKLists</span>(<span class="params">self, lists: <span class="type">List</span>[<span class="type">Optional</span>[ListNode]]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># if lists is empty, return None</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> lists:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># if lists has only one element, return that element</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(lists) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> lists[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># if lists has more than one element, merge them</span></span><br><span class="line">        <span class="comment"># merge the first two lists, and then merge the result with the third list, and so on</span></span><br><span class="line">        <span class="comment"># until all lists are merged</span></span><br><span class="line">        merged_list = lists[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(lists)):</span><br><span class="line">            merged_list = self.mergeTwoLists(merged_list, lists[i])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> merged_list</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mergeTwoLists</span>(<span class="params">self, l1: <span class="type">Optional</span>[ListNode], l2: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        <span class="comment"># if l1 is empty, return l2</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l1:</span><br><span class="line">            <span class="keyword">return</span> l2</span><br><span class="line"></span><br><span class="line">        <span class="comment"># if l2 is empty, return l1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l2:</span><br><span class="line">            <span class="keyword">return</span> l1</span><br><span class="line"></span><br><span class="line">        <span class="comment"># if l1 and l2 are not empty, merge them</span></span><br><span class="line">        <span class="comment"># create a new list to store the merged list</span></span><br><span class="line">        merged_list = ListNode()</span><br><span class="line">        <span class="comment"># create a pointer to traverse the merged list</span></span><br><span class="line">        pointer = merged_list</span><br><span class="line"></span><br><span class="line">        <span class="comment"># while l1 and l2 are not empty, compare the first elements of l1 and l2</span></span><br><span class="line">        <span class="comment"># add the smaller one to the merged list</span></span><br><span class="line">        <span class="comment"># move the pointer to the next element of the merged list</span></span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">and</span> l2:</span><br><span class="line">            <span class="keyword">if</span> l1.val &lt;= l2.val:</span><br><span class="line">                pointer.<span class="built_in">next</span> = l1</span><br><span class="line">                l1 = l1.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pointer.<span class="built_in">next</span> = l2</span><br><span class="line">                l2 = l2.<span class="built_in">next</span></span><br><span class="line">            pointer = pointer.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># if l1 is empty, add the rest of l2 to the merged list</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l1:</span><br><span class="line">            pointer.<span class="built_in">next</span> = l2</span><br><span class="line"></span><br><span class="line">        <span class="comment"># if l2 is empty, add the rest of l1 to the merged list</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l2:</span><br><span class="line">            pointer.<span class="built_in">next</span> = l1</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> merged_list.<span class="built_in">next</span></span><br></pre></td></tr></table></figure>

<p>O(n log k) </p>
<ul>
<li>n 是所有list的長度總和</li>
<li>k 是lists的長度</li>
</ul>
<h2 id="可以過-但速度太慢"><a href="#可以過-但速度太慢" class="headerlink" title="可以過 但速度太慢"></a>可以過 但速度太慢</h2><p><del>原先寫得，但時間複雜度太慘</del></p>
<ul>
<li>這邊的時間複雜度：O(n log k) ???</li>
</ul>
<p>想法是:</p>
<p>將每一個對比合併，但思考後 應該可以用(Leetcode#<strong>148</strong>)的方法<br>先將全部合併，在merge sort 排序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mergeKLists</span>(<span class="params">self, lists: <span class="type">List</span>[<span class="type">Optional</span>[ListNode]]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line"></span><br><span class="line">        min_val = -<span class="number">10</span>**<span class="number">4</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> lists :</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(lists) == <span class="number">1</span> :</span><br><span class="line">            <span class="keyword">return</span> lists[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        h = res = ListNode(min_val)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>( <span class="built_in">len</span>(lists)):</span><br><span class="line">            h = self.merge(h,lists[i])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">self,l1: <span class="type">List</span>[<span class="type">Optional</span>[ListNode]],l2: <span class="type">List</span>[<span class="type">Optional</span>[ListNode]]</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l1:</span><br><span class="line">            <span class="keyword">return</span> l2</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l2:</span><br><span class="line">            <span class="keyword">return</span> l1</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">and</span> l2:</span><br><span class="line">            <span class="keyword">if</span> l1.val &lt; l2.val:</span><br><span class="line">                l1.<span class="built_in">next</span> = self.merge(l1.<span class="built_in">next</span> , l2)</span><br><span class="line">                <span class="keyword">return</span> l1</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                l2.<span class="built_in">next</span> = self.merge(l1 , l2.<span class="built_in">next</span>)</span><br><span class="line">                <span class="keyword">return</span> l2</span><br></pre></td></tr></table></figure>

<p>O(n log k)</p>
<ul>
<li>n 是所有list的長度總和</li>
<li>k 是lists的長度</li>
</ul>
<h2 id="偷吃步O-n-log-n"><a href="#偷吃步O-n-log-n" class="headerlink" title="偷吃步O(n log n)"></a>偷吃步O(n log n)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mergeKLists</span>(<span class="params">self, lists: <span class="type">List</span>[<span class="type">Optional</span>[ListNode]]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># merge all lists into one list</span></span><br><span class="line">        merged_list = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> lists:</span><br><span class="line">            <span class="keyword">while</span> i:</span><br><span class="line">                merged_list.append(i.val)</span><br><span class="line">                i = i.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">           </span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">        <span class="comment"># sort the merged list</span></span><br><span class="line">        a = <span class="built_in">sorted</span>(merged_list,reverse=<span class="literal">True</span>)</span><br><span class="line">        </span><br><span class="line">        final=<span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">            final=ListNode(i,final)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> final</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># merge all lists into one list</span></span><br><span class="line">        merged_list = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> lists:</span><br><span class="line">            <span class="keyword">while</span> i:</span><br><span class="line">                merged_list.append(i.val)</span><br><span class="line">                i = i.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">           </span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">        <span class="comment"># sort the merged list</span></span><br><span class="line">        merged_list.sort()</span><br><span class="line">        <span class="comment"># reverse the merged list</span></span><br><span class="line">        merged_list.reverse()</span><br><span class="line">        </span><br><span class="line">        final=<span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> merged_list:</span><br><span class="line">            final=ListNode(i,final)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> final</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>💡</tag>
        <tag>Linked List</tag>
        <tag>Divide and Conquer</tag>
        <tag>Merge Sort</tag>
        <tag>hard</tag>
        <tag>Heap (Priority Queue)</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#427. Construct Quad Tree</title>
    <url>/posts/leetcode/Leetcode-427-Construct-Quad-Tree/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>Given a <code>n * n</code> matrix <code>grid</code> of <code>0&#39;s</code> and <code>1&#39;s</code> only. We want to represent <code>grid</code> with a Quad-Tree.</p>
<p>Return <em>the root of the Quad-Tree representing</em> <code>grid</code>.</p>
<p>A Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:</p>
<ul>
<li><code>val</code>: True if the node represents a grid of 1’s or False if the node represents a grid of 0’s. Notice that you can assign the <code>val</code> to True or False when <code>isLeaf</code> is False, and both are accepted in the answer.</li>
<li><code>isLeaf</code>: True if the node is a leaf node on the tree or False if the node has four children.</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Node &#123;</span><br><span class="line">    public boolean val;</span><br><span class="line">    public boolean isLeaf;</span><br><span class="line">    public Node topLeft;</span><br><span class="line">    public Node topRight;</span><br><span class="line">    public Node bottomLeft;</span><br><span class="line">    public Node bottomRight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>We can construct a Quad-Tree from a two-dimensional area using the following steps:</p>
<ol>
<li>If the current grid has the same value (i.e all <code>1&#39;s</code> or all <code>0&#39;s</code>) set <code>isLeaf</code> True and set <code>val</code> to the value of the grid and set the four children to Null and stop.</li>
<li>If the current grid has different values, set <code>isLeaf</code> to False and set <code>val</code> to any value and divide the current grid into four sub-grids as shown in the photo.</li>
<li>Recurse for each of the children with the proper sub-grid.</li>
</ol>
<p><img src="https://assets.leetcode.com/uploads/2020/02/11/new_top.png"></p>
<p>If you want to know more about the Quad-Tree, you can refer to the <a href="https://en.wikipedia.org/wiki/Quadtree">wiki</a>.</p>
<p><strong>Quad-Tree format:</strong></p>
<p>You don’t need to read this section for solving the problem. This is only if you want to understand the output format here. The output represents the serialized format of a Quad-Tree using level order traversal, where <code>null</code> signifies a path terminator where no node exists below.</p>
<p>It is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list <code>[isLeaf, val]</code>.</p>
<p>If the value of <code>isLeaf</code> or <code>val</code> is True we represent it as <strong>1</strong> in the list <code>[isLeaf, val]</code> and if the value of <code>isLeaf</code> or <code>val</code> is False we represent it as <strong>0</strong>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/02/11/grid1.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: grid = [[0,1],[1,0]]</span><br><span class="line">Output: [[0,1],[1,0],[1,1],[1,1],[1,0]]</span><br><span class="line">Explanation: The explanation of this example is shown below:</span><br><span class="line">Notice that 0 represnts False and 1 represents True in the photo representing the Quad-Tree.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://assets.leetcode.com/uploads/2020/02/12/e1tree.png"></p>
<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/02/12/e2mat.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: grid = [[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0]]</span><br><span class="line">Output: [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]</span><br><span class="line">Explanation: All values in the grid are not the same. We divide the grid into four sub-grids.</span><br><span class="line">The topLeft, bottomLeft and bottomRight each has the same value.</span><br><span class="line">The topRight have different values so we divide it into 4 sub-grids where each has the same value.</span><br><span class="line">Explanation is shown in the photo below:</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Input: grid = </span><br><span class="line">[[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]]</span><br></pre></td></tr></table></figure>

<p><img src="https://assets.leetcode.com/uploads/2020/02/12/e2tree.png"></p>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># Definition for a QuadTree node.</span></span><br><span class="line"><span class="string">class Node:</span></span><br><span class="line"><span class="string">    def __init__(self, val, isLeaf, topLeft, topRight, bottomLeft, bottomRight):</span></span><br><span class="line"><span class="string">        self.val = val</span></span><br><span class="line"><span class="string">        self.isLeaf = isLeaf</span></span><br><span class="line"><span class="string">        self.topLeft = topLeft</span></span><br><span class="line"><span class="string">        self.topRight = topRight</span></span><br><span class="line"><span class="string">        self.bottomLeft = bottomLeft</span></span><br><span class="line"><span class="string">        self.bottomRight = bottomRight</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">construct</span>(<span class="params">self, grid: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="string">&#x27;Node&#x27;</span>:</span><br><span class="line">		<span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">x, y, l</span>):</span><br><span class="line">            <span class="keyword">if</span> l == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> Node(grid[x][y] == <span class="number">1</span>, <span class="literal">True</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line">            l = l // <span class="number">2</span></span><br><span class="line">            topLeft = dfs(x, y, l)</span><br><span class="line">            topRight = dfs(x, y + l, l)</span><br><span class="line">            bottomLeft = dfs(x + l, y, l)</span><br><span class="line">            bottomRight = dfs(x + l, y + l, l)</span><br><span class="line">            <span class="keyword">if</span> topLeft.isLeaf <span class="keyword">and</span> topRight.isLeaf <span class="keyword">and</span> bottomLeft.isLeaf <span class="keyword">and</span> bottomRight.isLeaf <span class="keyword">and</span> topLeft.val == topRight.val == bottomLeft.val == bottomRight.val:</span><br><span class="line">                <span class="keyword">return</span> Node(topLeft.val, <span class="literal">True</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> Node(<span class="literal">True</span>, <span class="literal">False</span>, topLeft, topRight, bottomLeft, bottomRight)</span><br><span class="line">        <span class="keyword">return</span> dfs(<span class="number">0</span>, <span class="number">0</span>, <span class="built_in">len</span>(grid))</span><br></pre></td></tr></table></figure>

<h3 id="分解"><a href="#分解" class="headerlink" title="分解"></a>分解</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Input: grid = </span><br><span class="line">[[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line"><span class="built_in">len</span>(grid)    <span class="comment"># is the number of rows ， List[List[int]] 有多少個list</span></span><br><span class="line"><span class="comment"># [1,1,1,1,0,0,0,0] 1</span></span><br><span class="line"><span class="comment"># [1,1,1,1,0,0,0,0] 2</span></span><br><span class="line"><span class="comment"># .</span></span><br><span class="line"><span class="comment"># .</span></span><br><span class="line"><span class="comment"># .</span></span><br><span class="line"><span class="comment"># [1,1,1,1,0,0,0,0] 8</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">len</span>(grid[<span class="number">0</span>]) <span class="comment"># is the number of columns ， List[List[int]] 每個list有多少個元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [1,1,1,1,0,0,0,0] 8</span></span><br><span class="line"></span><br><span class="line">node.topLeft = constructTree([row[:n//<span class="number">2</span>] <span class="keyword">for</span> row <span class="keyword">in</span> grid[:n//<span class="number">2</span>]])</span><br><span class="line"><span class="comment"># [row[:n//2] for row in grid[:n//2]]  # 0-3行，0-3列</span></span><br><span class="line"></span><br><span class="line">node.bottomLeft = constructTree([row[:n//<span class="number">2</span>] <span class="keyword">for</span> row <span class="keyword">in</span> grid[n//<span class="number">2</span>:]])</span><br><span class="line"><span class="comment"># [row[:n//2] for row in grid[n//2:]]  # 4-7行，0-3列</span></span><br><span class="line"></span><br><span class="line">node.topRight = constructTree([row[n//<span class="number">2</span>:] <span class="keyword">for</span> row <span class="keyword">in</span> grid[:n//<span class="number">2</span>]])</span><br><span class="line"><span class="comment"># [row[n//2:] for row in grid[:n//2]]  # 0-3行，4-7列</span></span><br><span class="line"></span><br><span class="line">node.bottomRight = constructTree([row[n//<span class="number">2</span>:] <span class="keyword">for</span> row <span class="keyword">in</span> grid[n//<span class="number">2</span>:]])</span><br><span class="line"><span class="comment"># [row[n//2:] for row in grid[n//2:]]  # 4-7行，4-7列</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">grid[:n//<span class="number">2</span>] 是一個切片操作，它取出 grid 列表的前半部分。</span><br><span class="line">row[n//<span class="number">2</span>:]  是一個切片操作，它取出grid 每一 row 列表的後半部分。</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">construct</span>(<span class="params">self, grid: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="string">&#x27;Node&#x27;</span>:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1. check if the grid is leaf ，all same</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">isLeaf</span>(<span class="params">grid</span>):</span><br><span class="line">            val = grid[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(grid)):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(grid[<span class="number">0</span>])):</span><br><span class="line">                    <span class="keyword">if</span> grid[i][j] != val:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 2. construct the node</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">constructNode</span>(<span class="params">grid</span>):</span><br><span class="line">            node = Node()</span><br><span class="line">            node.isLeaf = isLeaf(grid)</span><br><span class="line">            node.val = grid[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">            node.topLeft = <span class="literal">None</span></span><br><span class="line">            node.topRight = <span class="literal">None</span></span><br><span class="line">            node.bottomLeft = <span class="literal">None</span></span><br><span class="line">            node.bottomRight = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 3. construct the tree</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">constructTree</span>(<span class="params">grid</span>):</span><br><span class="line">            node = constructNode(grid)</span><br><span class="line">            <span class="keyword">if</span> node.isLeaf:</span><br><span class="line">                <span class="keyword">return</span> node</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                n = <span class="built_in">len</span>(grid)</span><br><span class="line">                node.topLeft = constructTree([row[:n//<span class="number">2</span>] <span class="keyword">for</span> row <span class="keyword">in</span> grid[:n//<span class="number">2</span>]]) <span class="comment">#記得要加中括弧</span></span><br><span class="line">                node.topRight = constructTree([row[n//<span class="number">2</span>:] <span class="keyword">for</span> row <span class="keyword">in</span> grid[:n//<span class="number">2</span>]])</span><br><span class="line">                node.bottomLeft = constructTree([row[:n//<span class="number">2</span>] <span class="keyword">for</span> row <span class="keyword">in</span> grid[n//<span class="number">2</span>:]])</span><br><span class="line">                node.bottomRight = constructTree([row[n//<span class="number">2</span>:] <span class="keyword">for</span> row <span class="keyword">in</span> grid[n//<span class="number">2</span>:]])</span><br><span class="line">                <span class="keyword">return</span> node</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> constructTree(grid)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>medium</tag>
        <tag>💡</tag>
        <tag>Tree</tag>
        <tag>Array</tag>
        <tag>Divide and Conquer</tag>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#27. Remove Element</title>
    <url>/posts/leetcode/Leetcode-27-Remove-Element/</url>
    <content><![CDATA[<p>#<code>Problem</code><br>Given an integer array <code>nums</code> and an integer <code>val</code>, remove all occurrences of <code>val</code> in <code>nums</code> <strong><a href="https://en.wikipedia.org/wiki/In-place_algorithm">in-place</a></strong>. The order of the elements may be changed. Then return <em>the number of elements in</em> <code>nums</code> <em>which are not equal to</em> <code>val</code>.</p>
<p>Consider the number of elements in <code>nums</code> which are not equal to <code>val</code> be <code>k</code>, to get accepted, you need to do the following things:</p>
<ul>
<li>Change the array <code>nums</code> such that the first <code>k</code> elements of <code>nums</code> contain the elements which are not equal to <code>val</code>. The remaining elements of <code>nums</code> are not important as well as the size of <code>nums</code>.</li>
<li>Return <code>k</code>.</li>
</ul>
<p><strong>Custom Judge:</strong></p>
<p>The judge will test your solution with the following code:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int[] nums = [...]; // Input array</span><br><span class="line">int val = ...; // Value to remove</span><br><span class="line">int[] expectedNums = [...]; // The expected answer with correct length.</span><br><span class="line">                            // It is sorted with no values equaling val.</span><br><span class="line"></span><br><span class="line">int k = removeElement(nums, val); // Calls your implementation</span><br><span class="line"></span><br><span class="line">assert k == expectedNums.length;</span><br><span class="line">sort(nums, 0, k); // Sort the first k elements of nums</span><br><span class="line">for (int i = 0; i &lt; actualLength; i++) &#123;</span><br><span class="line">    assert nums[i] == expectedNums[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>If all assertions pass, then your solution will be <strong>accepted</strong>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [3,2,2,3], val = 3</span><br><span class="line">Output: 2, nums = [2,2,_,_]</span><br><span class="line">Explanation: Your function should return k = 2, with the first two elements of nums being 2.</span><br><span class="line">It does not matter what you leave beyond the returned k (hence they are underscores).</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [0,1,2,2,3,0,4,2], val = 2</span><br><span class="line">Output: 5, nums = [0,1,4,0,3,_,_,_]</span><br><span class="line">Explanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.</span><br><span class="line">Note that the five elements can be returned in any order.</span><br><span class="line">It does not matter what you leave beyond the returned k (hence they are underscores).</span><br></pre></td></tr></table></figure>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeElement</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], val: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> num != val:</span><br><span class="line">                nums[i] = num</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> i</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeElement</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], val: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">while</span> val <span class="keyword">in</span> nums:</span><br><span class="line">            nums.remove(val)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(nums)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>Array</tag>
        <tag>easy</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#70. Climbing Stairs</title>
    <url>/posts/leetcode/Leetcode-70-Climbing-Stairs/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>You are climbing a staircase. It takes <code>n</code> steps to reach the top.</p>
<p>Each time you can either climb <code>1</code> or <code>2</code> steps. In how many distinct ways can you climb to the top?</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 2</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: There are two ways to climb to the top.</span><br><span class="line">1. 1 step + 1 step</span><br><span class="line">2. 2 steps</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 3</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: There are three ways to climb to the top.</span><br><span class="line">1. 1 step + 1 step + 1 step</span><br><span class="line">2. 1 step + 2 steps</span><br><span class="line">3. 2 steps + 1 step</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 45</code></li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><h2 id="用一般的-fibonacci-但時間上無法，所以加一個memory紀錄"><a href="#用一般的-fibonacci-但時間上無法，所以加一個memory紀錄" class="headerlink" title="用一般的**fibonacci 但時間上無法，所以加一個memory紀錄**"></a><code>用一般的**fibonacci 但時間上無法，所以加一個memory紀錄**</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Result time-exced limit</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">climbStairs</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">climb</span>(<span class="params">n</span>):</span><br><span class="line">            <span class="keyword">if</span>  n == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> n == <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> climb(n-<span class="number">1</span>) + climb(n-<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> climb(n)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">climbStairs</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        memo = &#123;&#125;</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">climb</span>(<span class="params">n</span>):</span><br><span class="line">            <span class="keyword">if</span>  n == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> n == <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> n <span class="keyword">in</span> memo:</span><br><span class="line">                <span class="keyword">return</span> memo[n]</span><br><span class="line">            memo[n] = climb(n-<span class="number">1</span>) + climb(n-<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> climb(n-<span class="number">1</span>) + climb(n-<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> climb(n)</span><br></pre></td></tr></table></figure>

<h2 id="用DP-可減少遞迴帶來的記憶體開銷"><a href="#用DP-可減少遞迴帶來的記憶體開銷" class="headerlink" title="用DP(可減少遞迴帶來的記憶體開銷)"></a><code>用DP(可減少遞迴帶來的記憶體開銷)</code></h2><p>用迭代計算所有項目</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">climbStairs</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span>  n</span><br><span class="line"></span><br><span class="line">        dp = &#123;&#125;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">2</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, n+<span class="number">1</span>):</span><br><span class="line">            dp[i] = dp[i-<span class="number">1</span>] + dp[i-<span class="number">2</span>]</span><br><span class="line">        <span class="comment"># print(f)</span></span><br><span class="line">        <span class="keyword">return</span> dp[n]</span><br></pre></td></tr></table></figure>

<p>通常情況下，使用動態規劃（DP）相對於純遞迴方法可以減少記憶體開銷。</p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>在嚴格的定義下，動態規劃是一種將複雜問題分解成簡單子問題的優化技術，並使用迭代的方式計算所有子問題的解，並且通常有一個明確的「狀態轉移方程」來描述子問題之間的關係。這樣的實現方式通常不依賴遞迴，而是使用循環來進行計算。</p>
<p>雖然<code>(Solve1)</code>確實使用了 memoization 技術來優化遞迴計算，但在 DP 的嚴格定義下，它仍然被視為是遞迴解法（recursive solution），而不是 DP 解法。遞迴解法仍然有一定的遞迴調用開銷，而真正的 DP 解法則完全避免了遞迴，只使用迭代計算。</p>
<p>總結來說，<code>(Solve1)</code>確實使用了 memoization 技術，它在時間和空間上優於純遞迴解法，但嚴格來說不屬於真正的動態規劃（DP）方法。</p>
<hr>
<h2 id="費式數列"><a href="#費式數列" class="headerlink" title="費式數列"></a>費式數列</h2><p>當爬梯子</p>
<p>可以爬 1 2 3 三種時</p>
<p>n &#x3D; 4時，有7組解</p>
<ol>
<li>1 + 1 + 1 + 1</li>
<li>1 + 2 + 1</li>
<li>2 + 1 + 1</li>
<li>1 + 1 + 2</li>
<li>2 + 2</li>
<li>3 + 1</li>
<li>1 + 3</li>
</ol>
<p>先回到原始的圖解</p>
<div class="mermaid-wrap"><pre class="mermaid-src" hidden>
  flowchart TD

start[4]
treenode1[1]
treenode2[2]
treenode3[3]
	treenode3.1[1]
	treenode3.2[1]
	treenode3.3[2]

start --&gt;|4-3|treenode1
start --&gt;|4-2|treenode2
start --&gt;|4-1|treenode3

treenode3 --&gt;|3-3|treenode3.1
treenode3 --&gt;|3-2|treenode3.2
treenode3 --&gt;|3-1|treenode3.3

  </pre></div>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">climbStairs</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        dp = [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, n + <span class="number">1</span>):</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>] + dp[i - <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[n]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以爬 1 2 3 4 四種時</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">climbStairs</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        dp = [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span> <span class="comment">#這邊是把4當作一種</span></span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">2</span></span><br><span class="line">        dp[<span class="number">3</span>] = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>, n + <span class="number">1</span>): <span class="comment"># 4開始，所以階梯4時也會跑</span></span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>] + dp[i - <span class="number">3</span>] + dp[i-<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[n]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>💡</tag>
        <tag>Dynamic Programming</tag>
        <tag>easy</tag>
        <tag>Math</tag>
        <tag>Memoization</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#88. Merge Sorted Array</title>
    <url>/posts/leetcode/Leetcode-88-Merge-Sorted-Array/</url>
    <content><![CDATA[<p>#<code>Problem</code><br>You are given two integer arrays <code>nums1</code> and <code>nums2</code>, sorted in <strong>non-decreasing order</strong>, and two integers <code>m</code> and <code>n</code>, representing the number of elements in <code>nums1</code> and <code>nums2</code> respectively.</p>
<p><strong>Merge</strong> <code>nums1</code> and <code>nums2</code> into a single array sorted in <strong>non-decreasing order</strong>.</p>
<p>The final sorted array should not be returned by the function, but instead be <em>stored inside the array</em> <code>nums1</code>. To accommodate this, <code>nums1</code> has a length of <code>m + n</code>, where the first <code>m</code> elements denote the elements that should be merged, and the last <code>n</code> elements are set to <code>0</code> and should be ignored. <code>nums2</code> has a length of <code>n</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3</span><br><span class="line">Output: [1,2,2,3,5,6]</span><br><span class="line">Explanation: The arrays we are merging are [1,2,3] and [2,5,6].</span><br><span class="line">The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [1], m = 1, nums2 = [], n = 0</span><br><span class="line">Output: [1]</span><br><span class="line">Explanation: The arrays we are merging are [1] and [].</span><br><span class="line">The result of the merge is [1].</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [0], m = 0, nums2 = [1], n = 1</span><br><span class="line">Output: [1]</span><br><span class="line">Explanation: The arrays we are merging are [] and [1].</span><br><span class="line">The result of the merge is [1].</span><br><span class="line">Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.</span><br></pre></td></tr></table></figure>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">self, nums1, m, nums2, n</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums1: List[int]</span></span><br><span class="line"><span class="string">        :type m: int</span></span><br><span class="line"><span class="string">        :type nums2: List[int]</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: None Do not return anything, modify nums1 in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        nums1[m:m+n] = nums2</span><br><span class="line">        nums1.sort()</span><br></pre></td></tr></table></figure>

<p>不用函式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">self, nums1: <span class="type">List</span>[<span class="built_in">int</span>], m: <span class="built_in">int</span>, nums2: <span class="type">List</span>[<span class="built_in">int</span>], n: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Do not return anything, modify nums1 in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        i = m - <span class="number">1</span></span><br><span class="line">        j = n - <span class="number">1</span></span><br><span class="line">        k = m + n - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>  j &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span>  i&gt;=<span class="number">0</span> <span class="keyword">and</span> nums1[i] &gt;= nums2[j]:</span><br><span class="line">                nums1[k] = nums1[i]</span><br><span class="line">                i -=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                nums1[k] = nums2[j]</span><br><span class="line">                j -=<span class="number">1</span></span><br><span class="line">            k -=<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>Array</tag>
        <tag>easy</tag>
        <tag>Two Pointers</tag>
        <tag>Sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#87. Scramble String</title>
    <url>/posts/leetcode/Leetcode-87-Scramble-String/</url>
    <content><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>We can scramble a string s to get a string t using the following algorithm:</p>
<ol>
<li>If the length of the string is 1, stop.</li>
<li>If the length of the string is &gt; 1, do the following:<ul>
<li>Split the string into two non-empty substrings at a random index, i.e., if the string is <code>s</code>, divide it to <code>x</code> and <code>y</code> where <code>s = x + y</code>.</li>
<li><strong>Randomly</strong> decide to swap the two substrings or to keep them in the same order. i.e., after this step, <code>s</code> may become <code>s = x + y</code> or <code>s = y + x</code>.</li>
<li>Apply step 1 recursively on each of the two substrings <code>x</code> and <code>y</code>.</li>
</ul>
</li>
</ol>
<p>Given two strings <code>s1</code> and <code>s2</code> of <strong>the same length</strong>, return <code>true</code> if <code>s2</code> is a scrambled string of <code>s1</code>, otherwise, return <code>false</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s1 = &quot;great&quot;, s2 = &quot;rgeat&quot;</span><br><span class="line">Output: true</span><br><span class="line">Explanation: One possible scenario applied on s1 is:</span><br><span class="line">&quot;great&quot; --&gt; &quot;gr/eat&quot; // divide at random index.</span><br><span class="line">&quot;gr/eat&quot; --&gt; &quot;gr/eat&quot; // random decision is not to swap the two substrings and keep them in order.</span><br><span class="line">&quot;gr/eat&quot; --&gt; &quot;g/r / e/at&quot; // apply the same algorithm recursively on both substrings. divide at random index each of them.</span><br><span class="line">&quot;g/r / e/at&quot; --&gt; &quot;r/g / e/at&quot; // random decision was to swap the first substring and to keep the second substring in the same order.</span><br><span class="line">&quot;r/g / e/at&quot; --&gt; &quot;r/g / e/ a/t&quot; // again apply the algorithm recursively, divide &quot;at&quot; to &quot;a/t&quot;.</span><br><span class="line">&quot;r/g / e/ a/t&quot; --&gt; &quot;r/g / e/ a/t&quot; // random decision is to keep both substrings in the same order.</span><br><span class="line">The algorithm stops now, and the result string is &quot;rgeat&quot; which is s2.</span><br><span class="line">As one possible scenario led s1 to be scrambled to s2, we return true.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s1 = &quot;abcde&quot;, s2 = &quot;caebd&quot;</span><br><span class="line">Output: false</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s1 = &quot;a&quot;, s2 = &quot;a&quot;</span><br><span class="line">Output: true</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>s1.length == s2.length</code></li>
<li><code>1 &lt;= s1.length &lt;= 30</code></li>
<li><code>s1</code> and <code>s2</code> consist of lowercase English letters.</li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><p>題目簡單解釋，str分割可以得到  x1 + y1  ，可以互換，若能互換後相同就為scrambled</p>
<p><del>當初看超久</del></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    rgeat</span><br><span class="line">   /    \</span><br><span class="line">  rg    eat</span><br><span class="line"> / \    /  \</span><br><span class="line">r   g  e   at</span><br><span class="line">           / \</span><br><span class="line">          a   t</span><br><span class="line"></span><br><span class="line">    great</span><br><span class="line">    /  \</span><br><span class="line">  gr    eat</span><br><span class="line"> / \    /  \</span><br><span class="line">g  r   e    at</span><br><span class="line">           /  \</span><br><span class="line">         a     t</span><br></pre></td></tr></table></figure>

<p>前面gr 與 rg 為scrambled ， eat當然就一樣</p>
<p>所以也能延伸</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">    greta</span><br><span class="line">   /     \</span><br><span class="line">  gr      eta</span><br><span class="line"> /  \    /   \</span><br><span class="line">g   r   e    ta</span><br><span class="line">           /    \</span><br><span class="line">          t      a</span><br></pre></td></tr></table></figure>

<p>at &amp;  ta ⇒ <code>True</code> ( scrambled )   →  eat  &amp;  ate  ⇒ <code>True</code></p>
<p>→  great  &amp;    grate    ⇒   <code>True</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">     abb</span><br><span class="line">    /   \</span><br><span class="line">  ab      b</span><br><span class="line"> /  \</span><br><span class="line">a    b</span><br><span class="line"></span><br><span class="line">   bba</span><br><span class="line">  /   \</span><br><span class="line">b     ba</span><br><span class="line">      /  \</span><br><span class="line">     b    a</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bab</span><br><span class="line">   /   \</span><br><span class="line">  b     ab</span><br><span class="line">       /  \</span><br><span class="line">      a    b</span><br></pre></td></tr></table></figure>

<p>這種情況也是    abb &amp; bba  ⇒<code>True</code></p>
<p>由於 abb  &amp;   bab   ⇒  <code>True</code>   第一層互換</p>
<p>ab  &amp;  ba  ⇒ <code>True</code>     → abb  &amp;  bba  ⇒  <code>True</code></p>
<h2 id="可以但超過時間"><a href="#可以但超過時間" class="headerlink" title="可以但超過時間"></a><code>可以但超過時間</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 類似用遞迴窮舉</span></span><br><span class="line"><span class="comment"># 但會超過時間</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isScramble</span>(<span class="params">self, s1: <span class="built_in">str</span>, s2: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(s1)!=<span class="built_in">len</span>(s2):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> s1==s2:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        n = <span class="built_in">len</span>(s1)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(s1)):</span><br><span class="line">            <span class="keyword">if</span> self.isScramble(s1[:i],s2[:i]) <span class="keyword">and</span> self.isScramble(s1[i:],s2[i:]):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> self.isScramble(s1[:i] , s2[n-i:]) <span class="keyword">and</span> self.isScramble(s1[i:] , s2[:n-i]):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h2 id="借鏡別人的"><a href="#借鏡別人的" class="headerlink" title="借鏡別人的"></a><code>借鏡別人的</code></h2><p>做一個儲存庫</p>
<p>這樣不用每次都從新跑</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isScramble</span>(<span class="params">self, s1: <span class="built_in">str</span>, s2: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># memoization: (s1, s2) -&gt; bool ，表示 s1 和 s2 是否 scramble</span></span><br><span class="line">        memo = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">helper</span>(<span class="params">s1, s2</span>):</span><br><span class="line">            <span class="comment"># 先判斷是否已經計算過</span></span><br><span class="line">            <span class="keyword">if</span> (s1, s2) <span class="keyword">in</span> memo:</span><br><span class="line">                <span class="keyword">return</span> memo[(s1, s2)]</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 長度不同 或者 字母不同，則不可能 scramble</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(s1) != <span class="built_in">len</span>(s2) <span class="keyword">or</span> <span class="built_in">sorted</span>(s1) != <span class="built_in">sorted</span>(s2):</span><br><span class="line">                <span class="comment"># 記錄結果</span></span><br><span class="line">                memo[(s1, s2)] = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 一樣的字母，則為 True</span></span><br><span class="line">            <span class="keyword">if</span> s1 == s2:</span><br><span class="line">                <span class="comment"># 記錄結果</span></span><br><span class="line">                memo[(s1, s2)] = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">            n = <span class="built_in">len</span>(s1)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">                <span class="comment"># 不交換的情況  or 交換的情況</span></span><br><span class="line">                <span class="keyword">if</span> (helper(s1[:i], s2[:i]) <span class="keyword">and</span> helper(s1[i:], s2[i:])) <span class="keyword">or</span> (helper(s1[:i], s2[n-i:]) <span class="keyword">and</span> helper(s1[i:], s2[:n-i])):</span><br><span class="line">                    <span class="comment"># 記錄結果</span></span><br><span class="line">                    memo[(s1, s2)] = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                </span><br><span class="line">            <span class="comment"># 記錄結果</span></span><br><span class="line">            memo[(s1, s2)] = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> helper(s1, s2)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">great  &amp;  rgeta</span><br><span class="line"></span><br><span class="line">memo = &#123;</span><br><span class="line">    (<span class="string">&quot;g&quot;</span>, <span class="string">&quot;r&quot;</span>): <span class="literal">False</span>,</span><br><span class="line">    (<span class="string">&quot;r&quot;</span>, <span class="string">&quot;g&quot;</span>): <span class="literal">False</span>,</span><br><span class="line">    (<span class="string">&quot;gr&quot;</span>, <span class="string">&quot;rg&quot;</span>): <span class="literal">True</span>,</span><br><span class="line">    (<span class="string">&quot;rg&quot;</span>, <span class="string">&quot;gr&quot;</span>): <span class="literal">True</span>,</span><br><span class="line">    (<span class="string">&quot;g&quot;</span>, <span class="string">&quot;e&quot;</span>): <span class="literal">False</span>,</span><br><span class="line">    (<span class="string">&quot;e&quot;</span>, <span class="string">&quot;g&quot;</span>): <span class="literal">False</span>,</span><br><span class="line">    (<span class="string">&quot;gr&quot;</span>, <span class="string">&quot;at&quot;</span>): <span class="literal">True</span>,</span><br><span class="line">    (<span class="string">&quot;at&quot;</span>, <span class="string">&quot;gr&quot;</span>): <span class="literal">True</span>,</span><br><span class="line">    (<span class="string">&quot;rg&quot;</span>, <span class="string">&quot;ea&quot;</span>): <span class="literal">True</span>,</span><br><span class="line">    (<span class="string">&quot;ea&quot;</span>, <span class="string">&quot;rg&quot;</span>): <span class="literal">True</span>,</span><br><span class="line">    (<span class="string">&quot;g&quot;</span>, <span class="string">&quot;at&quot;</span>): <span class="literal">False</span>,</span><br><span class="line">    (<span class="string">&quot;at&quot;</span>, <span class="string">&quot;g&quot;</span>): <span class="literal">False</span>,</span><br><span class="line">    (<span class="string">&quot;gr&quot;</span>, <span class="string">&quot;eat&quot;</span>): <span class="literal">True</span>,</span><br><span class="line">    (<span class="string">&quot;eat&quot;</span>, <span class="string">&quot;gr&quot;</span>): <span class="literal">True</span>,</span><br><span class="line">    (<span class="string">&quot;rg&quot;</span>, <span class="string">&quot;eat&quot;</span>): <span class="literal">True</span>,</span><br><span class="line">    (<span class="string">&quot;eat&quot;</span>, <span class="string">&quot;rg&quot;</span>): <span class="literal">True</span>,</span><br><span class="line">    (<span class="string">&quot;g&quot;</span>, <span class="string">&quot;rge&quot;</span>): <span class="literal">False</span>,</span><br><span class="line">    (<span class="string">&quot;rge&quot;</span>, <span class="string">&quot;g&quot;</span>): <span class="literal">False</span>,</span><br><span class="line">    (<span class="string">&quot;gr&quot;</span>, <span class="string">&quot;ge&quot;</span>): <span class="literal">False</span>,</span><br><span class="line">    (<span class="string">&quot;ge&quot;</span>, <span class="string">&quot;gr&quot;</span>): <span class="literal">False</span>,</span><br><span class="line">    (<span class="string">&quot;g&quot;</span>, <span class="string">&quot;eat&quot;</span>): <span class="literal">False</span>,</span><br><span class="line">    (<span class="string">&quot;eat&quot;</span>, <span class="string">&quot;g&quot;</span>): <span class="literal">False</span>,</span><br><span class="line">    (<span class="string">&quot;gr&quot;</span>, <span class="string">&quot;reat&quot;</span>): <span class="literal">False</span>,</span><br><span class="line">    (<span class="string">&quot;reat&quot;</span>, <span class="string">&quot;gr&quot;</span>): <span class="literal">False</span>,</span><br><span class="line">    (<span class="string">&quot;rg&quot;</span>, <span class="string">&quot;eat&quot;</span>): <span class="literal">True</span>,</span><br><span class="line">    (<span class="string">&quot;eat&quot;</span>, <span class="string">&quot;rg&quot;</span>): <span class="literal">True</span>,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="目前看到的最佳解之一"><a href="#目前看到的最佳解之一" class="headerlink" title="目前看到的最佳解之一"></a><code>目前看到的最佳解之一</code></h2><p>使用的Memory更少</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isScramble</span>(<span class="params">self,s1, s2</span>):</span><br><span class="line">        m =&#123;&#125;</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">s1, s2</span>):</span><br><span class="line">            <span class="keyword">if</span> (s1, s2) <span class="keyword">in</span> m:</span><br><span class="line">                <span class="keyword">return</span> m[(s1, s2)]</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">sorted</span>(s1) == <span class="built_in">sorted</span>(s2):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(s1) == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(s1)):</span><br><span class="line">                <span class="keyword">if</span> func(s1[:i], s2[-i:]) <span class="keyword">and</span> func(s1[i:], s2[:-i]) <span class="keyword">or</span> func(s1[:i], s2[:i]) <span class="keyword">and</span> func(s1[i:], s2[i:]):</span><br><span class="line">                    m[(s1, s2)] = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            m[(s1, s2)] = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> func(s1, s2)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>💡</tag>
        <tag>Dynamic Programming</tag>
        <tag>hard</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode#62. Unique Paths</title>
    <url>/posts/leetcode/Leetcode-62-Unique-Paths/</url>
    <content><![CDATA[<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> [Leetcode]</span><br><span class="line"><span class="bullet">-</span> [Python]</span><br><span class="line"><span class="bullet">-</span> [medium]</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> [💡]</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> Math</span><br><span class="line"><span class="bullet">-</span> Dynamic Programming</span><br><span class="line"><span class="bullet">-</span> Combinatorics</span><br><span class="line"></span><br><span class="line">cover: /img/cover/leetcode.jpg</span><br><span class="line">categories: Leetcode</span><br></pre></td></tr></table></figure>

<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><code>Problem</code></h1><p>There is a robot on an <code>m x n</code> grid. The robot is initially located at the <strong>top-left corner</strong> (i.e., <code>grid[0][0]</code>). The robot tries to move to the <strong>bottom-right corner</strong> (i.e., <code>grid[m - 1][n - 1]</code>). The robot can only move either down or right at any point in time.</p>
<p>Given the two integers <code>m</code> and <code>n</code>, return <em>the number of possible unique paths that the robot can take to reach the bottom-right corner</em>.</p>
<p>The test cases are generated so that the answer will be less than or equal to <code>2 * 109</code>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2018/10/22/robot_maze.png"></p>
<p>!<a href="https://assets.leetcode.com/uploads/2018/10/22/robot_maze.png">https://assets.leetcode.com/uploads/2018/10/22/robot_maze.png</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: m = 3, n = 7</span><br><span class="line">Output: 28</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Example 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: m = 3, n = 2</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:</span><br><span class="line">1. Right -&gt; Down -&gt; Down</span><br><span class="line">2. Down -&gt; Down -&gt; Right</span><br><span class="line">3. Down -&gt; Right -&gt; Down</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= m, n &lt;= 100</code></li>
</ul>
<h1 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a><code>Solve</code></h1><table>
<thead>
<tr>
<th>x-1 ,  y-1</th>
<th>x ,  y-1</th>
</tr>
</thead>
<tbody><tr>
<td>x-1   ,    y</td>
<td>x   ,   y</td>
</tr>
</tbody></table>
<p>應該是國中數學吧</p>
<p>右下角的為，上方 + 左邊 的方法次數</p>
<h2 id="使用dp，memo"><a href="#使用dp，memo" class="headerlink" title="使用dp，memo"></a><code>使用dp，memo</code></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">uniquePaths</span>(<span class="params">self, m: <span class="built_in">int</span>, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        dp = &#123;&#125;</span><br><span class="line">        </span><br><span class="line">        dp[(<span class="number">0</span>,<span class="number">0</span>)] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            dp[(i,<span class="number">0</span>)] = <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            dp[(<span class="number">0</span>,j)] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n):</span><br><span class="line">                dp[(i,j)] = dp[(i-<span class="number">1</span>,j)] + dp[(i,j-<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[(m-<span class="number">1</span>,n-<span class="number">1</span>)]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Python</tag>
        <tag>medium</tag>
        <tag>💡</tag>
        <tag>Dynamic Programming</tag>
        <tag>Math</tag>
        <tag>Combinatorics</tag>
      </tags>
  </entry>
</search>
